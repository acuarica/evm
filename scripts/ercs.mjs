#!/usr/bin/env node

/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable no-undef */

import { basename } from 'path';
import { FunctionFragment, keccak256, toUtf8Bytes } from 'ethers';
import { readFileSync } from 'fs';
import solc from 'solc';

function main() {
    const content = readFileSync('./scripts/ercs.sol', 'utf-8');
    const input = {
        language: 'Solidity',
        sources: { SOURCE: { content } },
        settings: { outputSelection: { '*': { '*': ['abi'] } } },
    };
    const output = solc.compile(JSON.stringify(input));
    /** @type {import('./solc').SolcOutput} */
    const { errors, contracts } = JSON.parse(output);
    if (errors) {
        console.error(errors);
        process.exit(1);
    }

    const src = {};
    for (const [name, { abi }] of Object.entries(contracts['SOURCE'])) {
        const selectors = {};
        for (const member of abi) {
            if (member.type === 'function') {
                const sig = FunctionFragment.from(member).format('sighash');
                const name = sig.replace(/\(/, '_').replace(/\)/g, '_').replace(/,/g, '_');
                selectors[name] = keccak256(toUtf8Bytes(sig)).substring(2, 10);
            }
        }
        src[name] = {
            includes: Object.values(selectors),
            selectors,
        };
    }

    console.info(`// Autogenerated by \`${basename(import.meta.url)}\`. DO NOT MODIFY`);
    console.info('export default', src, ';');
}

main();
