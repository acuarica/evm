import { EVM } from '../evm';
import { Opcode } from '../opcode';
declare const _default: {
    STOP: (_opcode: Opcode, state: EVM) => void;
    ADD: (_opcode: Opcode, { stack }: EVM) => void;
    MUL: (_opcode: Opcode, { stack }: EVM) => void;
    SUB: (_opcode: Opcode, { stack }: EVM) => void;
    DIV: (_opcode: Opcode, { stack }: EVM) => void;
    SDIV: (_opcode: Opcode, { stack }: EVM) => void;
    MOD: (_opcode: Opcode, { stack }: EVM) => void;
    SMOD: (_opcode: Opcode, { stack }: EVM) => void;
    ADDMOD: (_opcode: Opcode, state: EVM) => void;
    MULMOD: (_opcode: Opcode, state: EVM) => void;
    EXP: (_opcode: Opcode, { stack }: EVM) => void;
    SIGNEXTEND: (_opcode: Opcode, state: EVM) => void;
    LT: (_opcode: Opcode, { stack }: EVM) => void;
    GT: (_opcode: Opcode, { stack }: EVM) => void;
    SLT: (_opcode: Opcode, { stack }: EVM) => void;
    SGT: (_opcode: Opcode, { stack }: EVM) => void;
    EQ: (_opcode: Opcode, { stack }: EVM) => void;
    ISZERO: (_opcode: Opcode, { stack }: EVM) => void;
    AND: (_opcode: Opcode, { stack }: EVM) => void;
    OR: (_opcode: Opcode, { stack }: EVM) => void;
    XOR: (_opcode: Opcode, { stack }: EVM) => void;
    NOT: (_opcode: Opcode, { stack }: EVM) => void;
    BYTE: (_opcode: Opcode, { stack }: EVM) => void;
    SHL: (_opcode: Opcode, { stack }: EVM) => void;
    SHR: (_opcode: Opcode, { stack }: EVM) => void;
    SAR: (_opcode: Opcode, { stack }: EVM) => void;
    SHA3: (_opcode: Opcode, state: EVM) => void;
    ADDRESS: (_opcode: Opcode, { stack }: EVM) => void;
    BALANCE: (_opcode: Opcode, { stack }: EVM) => void;
    ORIGIN: (_opcode: Opcode, { stack }: EVM) => void;
    CALLER: (_opcode: Opcode, { stack }: EVM) => void;
    CALLVALUE: (_opcode: Opcode, { stack }: EVM) => void;
    CALLDATALOAD: (_opcode: Opcode, { stack }: EVM) => void;
    CALLDATASIZE: (_opcode: Opcode, { stack }: EVM) => void;
    CALLDATACOPY: (_opcode: Opcode, { stack, memory }: EVM) => void;
    CODESIZE: (_opcode: Opcode, state: EVM) => void;
    CODECOPY: (_opcode: Opcode, { stack, memory }: EVM) => void;
    GASPRICE: (_opcode: Opcode, { stack }: EVM) => void;
    EXTCODESIZE: (_opcode: Opcode, { stack }: EVM) => void;
    EXTCODECOPY: (_opcode: Opcode, { stack, memory }: EVM) => void;
    RETURNDATASIZE: (_opcode: Opcode, { stack }: EVM) => void;
    RETURNDATACOPY: (_opcode: Opcode, state: EVM) => void;
    EXTCODEHASH: (_opcode: Opcode, { stack }: EVM) => void;
    BLOCKHASH: (_opcode: Opcode, { stack }: EVM) => void;
    COINBASE: (_opcode: Opcode, { stack }: EVM) => void;
    TIMESTAMP: (_opcode: Opcode, { stack }: EVM) => void;
    NUMBER: (_opcode: Opcode, { stack }: EVM) => void;
    DIFFICULTY: (_opcode: Opcode, { stack }: EVM) => void;
    GASLIMIT: (_opcode: Opcode, { stack }: EVM) => void;
    POP: (_opcode: Opcode, state: EVM) => void;
    MLOAD: (_opcode: Opcode, state: EVM) => void;
    MSTORE: (_opcode: Opcode, state: EVM) => void;
    MSTORE8: (_opcode: Opcode, state: EVM) => void;
    SLOAD: (_opcode: Opcode, state: EVM) => void;
    SSTORE: (_opcode: Opcode, state: EVM) => void;
    JUMP: (opcode: Opcode, state: EVM) => void;
    JUMPI: (opcode: Opcode, state: EVM) => void;
    PC: (opcode: Opcode, state: EVM) => void;
    MSIZE: (_opcode: Opcode, { stack }: EVM) => void;
    GAS: (_opcode: Opcode, { stack }: EVM) => void;
    JUMPDEST: (_opcode: Opcode, _state: EVM) => void;
    PUSH1: typeof PUSH;
    PUSH2: typeof PUSH;
    PUSH3: typeof PUSH;
    PUSH4: typeof PUSH;
    PUSH5: typeof PUSH;
    PUSH6: typeof PUSH;
    PUSH7: typeof PUSH;
    PUSH8: typeof PUSH;
    PUSH9: typeof PUSH;
    PUSH10: typeof PUSH;
    PUSH11: typeof PUSH;
    PUSH12: typeof PUSH;
    PUSH13: typeof PUSH;
    PUSH14: typeof PUSH;
    PUSH15: typeof PUSH;
    PUSH16: typeof PUSH;
    PUSH17: typeof PUSH;
    PUSH18: typeof PUSH;
    PUSH19: typeof PUSH;
    PUSH20: typeof PUSH;
    PUSH21: typeof PUSH;
    PUSH22: typeof PUSH;
    PUSH23: typeof PUSH;
    PUSH24: typeof PUSH;
    PUSH25: typeof PUSH;
    PUSH26: typeof PUSH;
    PUSH27: typeof PUSH;
    PUSH28: typeof PUSH;
    PUSH29: typeof PUSH;
    PUSH30: typeof PUSH;
    PUSH31: typeof PUSH;
    PUSH32: typeof PUSH;
    DUP1: (_opcode: Opcode, { stack }: EVM) => void;
    DUP2: (_opcode: Opcode, { stack }: EVM) => void;
    DUP3: (_opcode: Opcode, { stack }: EVM) => void;
    DUP4: (_opcode: Opcode, { stack }: EVM) => void;
    DUP5: (_opcode: Opcode, { stack }: EVM) => void;
    DUP6: (_opcode: Opcode, { stack }: EVM) => void;
    DUP7: (_opcode: Opcode, { stack }: EVM) => void;
    DUP8: (_opcode: Opcode, { stack }: EVM) => void;
    DUP9: (_opcode: Opcode, { stack }: EVM) => void;
    DUP10: (_opcode: Opcode, { stack }: EVM) => void;
    DUP11: (_opcode: Opcode, { stack }: EVM) => void;
    DUP12: (_opcode: Opcode, { stack }: EVM) => void;
    DUP13: (_opcode: Opcode, { stack }: EVM) => void;
    DUP14: (_opcode: Opcode, { stack }: EVM) => void;
    DUP15: (_opcode: Opcode, { stack }: EVM) => void;
    DUP16: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP1: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP2: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP3: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP4: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP5: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP6: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP7: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP8: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP9: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP10: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP11: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP12: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP13: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP14: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP15: (_opcode: Opcode, { stack }: EVM) => void;
    SWAP16: (_opcode: Opcode, { stack }: EVM) => void;
    LOG0: (_opcode: Opcode, state: EVM) => void;
    LOG1: (_opcode: Opcode, state: EVM) => void;
    LOG2: (_opcode: Opcode, state: EVM) => void;
    LOG3: (_opcode: Opcode, state: EVM) => void;
    LOG4: (_opcode: Opcode, state: EVM) => void;
    CREATE: (_opcode: Opcode, state: EVM) => void;
    CALL: (_opcode: Opcode, { stack, memory }: EVM) => void;
    CALLCODE: (_opcode: Opcode, { stack }: EVM) => void;
    RETURN: (_opcode: Opcode, state: EVM) => void;
    DELEGATECALL: (_opcode: Opcode, { stack }: EVM) => void;
    CREATE2: (_opcode: Opcode, { stack }: EVM) => void;
    STATICCALL: (_opcode: Opcode, { stack }: EVM) => void;
    REVERT: (_opcode: Opcode, state: EVM) => void;
    INVALID: (opcode: Opcode, state: EVM) => void;
    SELFDESTRUCT: (_opcode: Opcode, state: EVM) => void;
};
export default _default;
declare function PUSH(opcode: Opcode, { stack }: EVM): void;
