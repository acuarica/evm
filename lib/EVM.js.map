{"version":3,"file":"EVM.js","mappings":"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,IACf,EAAAC,QAAU,IACV,EAAAC,WAAa,IACb,EAAAC,OAAS,IACT,EAAAC,QAAU,IACV,EAAAC,aAAe,IAEf,EAAAC,MAAQ,CACjB,EAAM,OACN,EAAM,MACN,EAAM,MACN,EAAM,MACN,EAAM,MACN,EAAM,OACN,EAAM,MACN,EAAM,OACN,EAAM,SACN,EAAM,SACN,GAAM,MACN,GAAM,aACN,GAAM,KACN,GAAM,KACN,GAAM,MACN,GAAM,MACN,GAAM,KACN,GAAM,SACN,GAAM,MACN,GAAM,KACN,GAAM,MACN,GAAM,MACN,GAAM,OACN,GAAM,MACN,GAAM,MACN,GAAM,MACN,GAAM,OACN,GAAM,UACN,GAAM,UACN,GAAM,SACN,GAAM,SACN,GAAM,YACN,GAAM,eACN,GAAM,eACN,GAAM,eACN,GAAM,WACN,GAAM,WACN,GAAM,WACN,GAAM,cACN,GAAM,cACN,GAAM,iBACN,GAAM,iBACN,GAAM,cACN,GAAM,YACN,GAAM,WACN,GAAM,YACN,GAAM,SACN,GAAM,aACN,GAAM,WACN,GAAM,MACN,GAAM,QACN,GAAM,SACN,GAAM,UACN,GAAM,QACN,GAAM,SACN,GAAM,OACN,GAAM,QACN,GAAM,KACN,GAAM,QACN,GAAM,MACN,GAAM,WACN,GAAM,QACN,GAAM,QACN,GAAM,QACN,GAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,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","sources":["webpack://evm/webpack/universalModuleDefinition","webpack://evm/./src/codes.ts","webpack://evm/./src/evm.ts","webpack://evm/./src/hex.ts","webpack://evm/./src/index.ts","webpack://evm/./src/opcodes/add.ts","webpack://evm/./src/opcodes/addmod.ts","webpack://evm/./src/opcodes/address.ts","webpack://evm/./src/opcodes/and.ts","webpack://evm/./src/opcodes/balance.ts","webpack://evm/./src/opcodes/blockhash.ts","webpack://evm/./src/opcodes/byte.ts","webpack://evm/./src/opcodes/call.ts","webpack://evm/./src/opcodes/callcode.ts","webpack://evm/./src/opcodes/calldatacopy.ts","webpack://evm/./src/opcodes/calldataload.ts","webpack://evm/./src/opcodes/calldatasize.ts","webpack://evm/./src/opcodes/caller.ts","webpack://evm/./src/opcodes/callvalue.ts","webpack://evm/./src/opcodes/codecopy.ts","webpack://evm/./src/opcodes/codesize.ts","webpack://evm/./src/opcodes/coinbase.ts","webpack://evm/./src/opcodes/create.ts","webpack://evm/./src/opcodes/create2.ts","webpack://evm/./src/opcodes/delegatecall.ts","webpack://evm/./src/opcodes/difficulty.ts","webpack://evm/./src/opcodes/div.ts","webpack://evm/./src/opcodes/eq.ts","webpack://evm/./src/opcodes/exp.ts","webpack://evm/./src/opcodes/extcodecopy.ts","webpack://evm/./src/opcodes/extcodehash.ts","webpack://evm/./src/opcodes/extcodesize.ts","webpack://evm/./src/opcodes/gas.ts","webpack://evm/./src/opcodes/gaslimit.ts","webpack://evm/./src/opcodes/gasprice.ts","webpack://evm/./src/opcodes/gt.ts","webpack://evm/./src/opcodes/index.ts","webpack://evm/./src/opcodes/invalid.ts","webpack://evm/./src/opcodes/iszero.ts","webpack://evm/./src/opcodes/jump.ts","webpack://evm/./src/opcodes/jumpi.ts","webpack://evm/./src/opcodes/log.ts","webpack://evm/./src/opcodes/lt.ts","webpack://evm/./src/opcodes/mload.ts","webpack://evm/./src/opcodes/mod.ts","webpack://evm/./src/opcodes/msize.ts","webpack://evm/./src/opcodes/mstore.ts","webpack://evm/./src/opcodes/mul.ts","webpack://evm/./src/opcodes/mulmod.ts","webpack://evm/./src/opcodes/not.ts","webpack://evm/./src/opcodes/number.ts","webpack://evm/./src/opcodes/or.ts","webpack://evm/./src/opcodes/origin.ts","webpack://evm/./src/opcodes/pop.ts","webpack://evm/./src/opcodes/return.ts","webpack://evm/./src/opcodes/returndatacopy.ts","webpack://evm/./src/opcodes/returndatasize.ts","webpack://evm/./src/opcodes/revert.ts","webpack://evm/./src/opcodes/sar.ts","webpack://evm/./src/opcodes/selfdestruct.ts","webpack://evm/./src/opcodes/sha3.ts","webpack://evm/./src/opcodes/shl.ts","webpack://evm/./src/opcodes/shr.ts","webpack://evm/./src/opcodes/signextend.ts","webpack://evm/./src/opcodes/sload.ts","webpack://evm/./src/opcodes/sstore.ts","webpack://evm/./src/opcodes/staticcall.ts","webpack://evm/./src/opcodes/stop.ts","webpack://evm/./src/opcodes/sub.ts","webpack://evm/./src/opcodes/timestamp.ts","webpack://evm/./src/opcodes/xor.ts","webpack://evm/./src/stack.ts","webpack://evm/./src/tx.ts","webpack://evm/./src/utils/stringify.ts","webpack://evm/./src/utils/stringifyEvents.ts","webpack://evm/./src/utils/stringifyFunctions.ts","webpack://evm/./src/utils/stringifyInstructions.ts","webpack://evm/./src/utils/stringifyMappings.ts","webpack://evm/./src/utils/stringifyStructs.ts","webpack://evm/./src/utils/stringifyVariables.ts","webpack://evm/webpack/bootstrap","webpack://evm/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","export const STOP = 0x00;\nexport const ADD = 0x01;\nexport const MUL = 0x02;\nexport const SUB = 0x03;\nexport const DIV = 0x04;\nexport const SDIV = 0x05;\nexport const MOD = 0x06;\nexport const SMOD = 0x07;\nexport const ADDMOD = 0x08;\nexport const MULMOD = 0x09;\nexport const EXP = 0x0a;\nexport const SIGNEXTEND = 0x0b;\nexport const LT = 0x10;\nexport const GT = 0x11;\nexport const SLT = 0x12;\nexport const SGT = 0x13;\nexport const EQ = 0x14;\nexport const ISZERO = 0x15;\nexport const AND = 0x16;\nexport const OR = 0x17;\nexport const XOR = 0x18;\nexport const NOT = 0x19;\nexport const BYTE = 0x1a;\nexport const SHL = 0x1b;\nexport const SHR = 0x1c;\nexport const SAR = 0x1d;\nexport const SHA3 = 0x20;\nexport const ADDRESS = 0x30;\nexport const BALANCE = 0x31;\nexport const ORIGIN = 0x32;\nexport const CALLER = 0x33;\nexport const CALLVALUE = 0x34;\nexport const CALLDATALOAD = 0x35;\nexport const CALLDATASIZE = 0x36;\nexport const CALLDATACOPY = 0x37;\nexport const CODESIZE = 0x38;\nexport const CODECOPY = 0x39;\nexport const GASPRICE = 0x3a;\nexport const EXTCODESIZE = 0x3b;\nexport const EXTCODECOPY = 0x3c;\nexport const RETURNDATASIZE = 0x3d;\nexport const RETURNDATACOPY = 0x3e;\nexport const EXTCODEHASH = 0x3f;\nexport const BLOCKHASH = 0x40;\nexport const COINBASE = 0x41;\nexport const TIMESTAMP = 0x42;\nexport const NUMBER = 0x43;\nexport const DIFFICULTY = 0x44;\nexport const GASLIMIT = 0x45;\nexport const POP = 0x50;\nexport const MLOAD = 0x51;\nexport const MSTORE = 0x52;\nexport const MSTORE8 = 0x53;\nexport const SLOAD = 0x54;\nexport const SSTORE = 0x55;\nexport const JUMP = 0x56;\nexport const JUMPI = 0x57;\nexport const PC = 0x58;\nexport const MSIZE = 0x59;\nexport const GAS = 0x5a;\nexport const JUMPDEST = 0x5b;\nexport const PUSH1 = 0x60;\nexport const PUSH2 = 0x61;\nexport const PUSH3 = 0x62;\nexport const PUSH4 = 0x63;\nexport const PUSH5 = 0x64;\nexport const PUSH6 = 0x65;\nexport const PUSH7 = 0x66;\nexport const PUSH8 = 0x67;\nexport const PUSH9 = 0x68;\nexport const PUSH10 = 0x69;\nexport const PUSH11 = 0x6a;\nexport const PUSH12 = 0x6b;\nexport const PUSH13 = 0x6c;\nexport const PUSH14 = 0x6d;\nexport const PUSH15 = 0x6e;\nexport const PUSH16 = 0x6f;\nexport const PUSH17 = 0x70;\nexport const PUSH18 = 0x71;\nexport const PUSH19 = 0x72;\nexport const PUSH20 = 0x73;\nexport const PUSH21 = 0x74;\nexport const PUSH22 = 0x75;\nexport const PUSH23 = 0x76;\nexport const PUSH24 = 0x77;\nexport const PUSH25 = 0x78;\nexport const PUSH26 = 0x79;\nexport const PUSH27 = 0x7a;\nexport const PUSH28 = 0x7b;\nexport const PUSH29 = 0x7c;\nexport const PUSH30 = 0x7d;\nexport const PUSH31 = 0x7e;\nexport const PUSH32 = 0x7f;\nexport const DUP1 = 0x80;\nexport const DUP2 = 0x81;\nexport const DUP3 = 0x82;\nexport const DUP4 = 0x83;\nexport const DUP5 = 0x84;\nexport const DUP6 = 0x85;\nexport const DUP7 = 0x86;\nexport const DUP8 = 0x87;\nexport const DUP9 = 0x88;\nexport const DUP10 = 0x89;\nexport const DUP11 = 0x8a;\nexport const DUP12 = 0x8b;\nexport const DUP13 = 0x8c;\nexport const DUP14 = 0x8d;\nexport const DUP15 = 0x8e;\nexport const DUP16 = 0x8f;\nexport const SWAP1 = 0x90;\nexport const SWAP2 = 0x91;\nexport const SWAP3 = 0x92;\nexport const SWAP4 = 0x93;\nexport const SWAP5 = 0x94;\nexport const SWAP6 = 0x95;\nexport const SWAP7 = 0x96;\nexport const SWAP8 = 0x97;\nexport const SWAP9 = 0x98;\nexport const SWAP10 = 0x99;\nexport const SWAP11 = 0x9a;\nexport const SWAP12 = 0x9b;\nexport const SWAP13 = 0x9c;\nexport const SWAP14 = 0x9d;\nexport const SWAP15 = 0x9e;\nexport const SWAP16 = 0x9f;\nexport const LOG0 = 0xa0;\nexport const LOG1 = 0xa1;\nexport const LOG2 = 0xa2;\nexport const LOG3 = 0xa3;\nexport const LOG4 = 0xa4;\nexport const CREATE = 0xf0;\nexport const CALL = 0xf1;\nexport const CALLCODE = 0xf2;\nexport const RETURN = 0xf3;\nexport const DELEGATECALL = 0xf4;\nexport const CREATE2 = 0xf5;\nexport const STATICCALL = 0xfa;\nexport const REVERT = 0xfd;\nexport const INVALID = 0xfe;\nexport const SELFDESTRUCT = 0xff;\n\nexport const codes = {\n    0x00: 'STOP',\n    0x01: 'ADD',\n    0x02: 'MUL',\n    0x03: 'SUB',\n    0x04: 'DIV',\n    0x05: 'SDIV',\n    0x06: 'MOD',\n    0x07: 'SMOD',\n    0x08: 'ADDMOD',\n    0x09: 'MULMOD',\n    0x0a: 'EXP',\n    0x0b: 'SIGNEXTEND',\n    0x10: 'LT',\n    0x11: 'GT',\n    0x12: 'SLT',\n    0x13: 'SGT',\n    0x14: 'EQ',\n    0x15: 'ISZERO',\n    0x16: 'AND',\n    0x17: 'OR',\n    0x18: 'XOR',\n    0x19: 'NOT',\n    0x1a: 'BYTE',\n    0x1b: 'SHL',\n    0x1c: 'SHR',\n    0x1d: 'SAR',\n    0x20: 'SHA3',\n    0x30: 'ADDRESS',\n    0x31: 'BALANCE',\n    0x32: 'ORIGIN',\n    0x33: 'CALLER',\n    0x34: 'CALLVALUE',\n    0x35: 'CALLDATALOAD',\n    0x36: 'CALLDATASIZE',\n    0x37: 'CALLDATACOPY',\n    0x38: 'CODESIZE',\n    0x39: 'CODECOPY',\n    0x3a: 'GASPRICE',\n    0x3b: 'EXTCODESIZE',\n    0x3c: 'EXTCODECOPY',\n    0x3d: 'RETURNDATASIZE',\n    0x3e: 'RETURNDATACOPY',\n    0x3f: 'EXTCODEHASH',\n    0x40: 'BLOCKHASH',\n    0x41: 'COINBASE',\n    0x42: 'TIMESTAMP',\n    0x43: 'NUMBER',\n    0x44: 'DIFFICULTY',\n    0x45: 'GASLIMIT',\n    0x50: 'POP',\n    0x51: 'MLOAD',\n    0x52: 'MSTORE',\n    0x53: 'MSTORE8',\n    0x54: 'SLOAD',\n    0x55: 'SSTORE',\n    0x56: 'JUMP',\n    0x57: 'JUMPI',\n    0x58: 'PC',\n    0x59: 'MSIZE',\n    0x5a: 'GAS',\n    0x5b: 'JUMPDEST',\n    0x60: 'PUSH1',\n    0x61: 'PUSH2',\n    0x62: 'PUSH3',\n    0x63: 'PUSH4',\n    0x64: 'PUSH5',\n    0x65: 'PUSH6',\n    0x66: 'PUSH7',\n    0x67: 'PUSH8',\n    0x68: 'PUSH9',\n    0x69: 'PUSH10',\n    0x6a: 'PUSH11',\n    0x6b: 'PUSH12',\n    0x6c: 'PUSH13',\n    0x6d: 'PUSH14',\n    0x6e: 'PUSH15',\n    0x6f: 'PUSH16',\n    0x70: 'PUSH17',\n    0x71: 'PUSH18',\n    0x72: 'PUSH19',\n    0x73: 'PUSH20',\n    0x74: 'PUSH21',\n    0x75: 'PUSH22',\n    0x76: 'PUSH23',\n    0x77: 'PUSH24',\n    0x78: 'PUSH25',\n    0x79: 'PUSH26',\n    0x7a: 'PUSH27',\n    0x7b: 'PUSH28',\n    0x7c: 'PUSH29',\n    0x7d: 'PUSH30',\n    0x7e: 'PUSH31',\n    0x7f: 'PUSH32',\n    0x80: 'DUP1',\n    0x81: 'DUP2',\n    0x82: 'DUP3',\n    0x83: 'DUP4',\n    0x84: 'DUP5',\n    0x85: 'DUP6',\n    0x86: 'DUP7',\n    0x87: 'DUP8',\n    0x88: 'DUP9',\n    0x89: 'DUP10',\n    0x8a: 'DUP11',\n    0x8b: 'DUP12',\n    0x8c: 'DUP13',\n    0x8d: 'DUP14',\n    0x8e: 'DUP15',\n    0x8f: 'DUP16',\n    0x90: 'SWAP1',\n    0x91: 'SWAP2',\n    0x92: 'SWAP3',\n    0x93: 'SWAP4',\n    0x94: 'SWAP5',\n    0x95: 'SWAP6',\n    0x96: 'SWAP7',\n    0x97: 'SWAP8',\n    0x98: 'SWAP9',\n    0x99: 'SWAP10',\n    0x9a: 'SWAP11',\n    0x9b: 'SWAP12',\n    0x9c: 'SWAP13',\n    0x9d: 'SWAP14',\n    0x9e: 'SWAP15',\n    0x9f: 'SWAP16',\n    0xa0: 'LOG0',\n    0xa1: 'LOG1',\n    0xa2: 'LOG2',\n    0xa3: 'LOG3',\n    0xa4: 'LOG4',\n    0xf0: 'CREATE',\n    0xf1: 'CALL',\n    0xf2: 'CALLCODE',\n    0xf3: 'RETURN',\n    0xf4: 'DELEGATECALL',\n    0xf5: 'CREATE2',\n    0xfa: 'STATICCALL',\n    0xfd: 'REVERT',\n    0xfe: 'INVALID',\n    0xff: 'SELFDESTRUCT',\n};\n\nexport const names = {\n    STOP: 0x00,\n    ADD: 0x01,\n    MUL: 0x02,\n    SUB: 0x03,\n    DIV: 0x04,\n    SDIV: 0x05,\n    MOD: 0x06,\n    SMOD: 0x07,\n    ADDMOD: 0x08,\n    MULMOD: 0x09,\n    EXP: 0x0a,\n    SIGNEXTEND: 0x0b,\n    LT: 0x10,\n    GT: 0x11,\n    SLT: 0x12,\n    SGT: 0x13,\n    EQ: 0x14,\n    ISZERO: 0x15,\n    AND: 0x16,\n    OR: 0x17,\n    XOR: 0x18,\n    NOT: 0x19,\n    BYTE: 0x1a,\n    SHL: 0x1b,\n    SHR: 0x1c,\n    SAR: 0x1d,\n    SHA3: 0x20,\n    ADDRESS: 0x30,\n    BALANCE: 0x31,\n    ORIGIN: 0x32,\n    CALLER: 0x33,\n    CALLVALUE: 0x34,\n    CALLDATALOAD: 0x35,\n    CALLDATASIZE: 0x36,\n    CALLDATACOPY: 0x37,\n    CODESIZE: 0x38,\n    CODECOPY: 0x39,\n    GASPRICE: 0x3a,\n    EXTCODESIZE: 0x3b,\n    EXTCODECOPY: 0x3c,\n    RETURNDATASIZE: 0x3d,\n    RETURNDATACOPY: 0x3e,\n    EXTCODEHASH: 0x3f,\n    BLOCKHASH: 0x40,\n    COINBASE: 0x41,\n    TIMESTAMP: 0x42,\n    NUMBER: 0x43,\n    DIFFICULTY: 0x44,\n    GASLIMIT: 0x45,\n    POP: 0x50,\n    MLOAD: 0x51,\n    MSTORE: 0x52,\n    MSTORE8: 0x53,\n    SLOAD: 0x54,\n    SSTORE: 0x55,\n    JUMP: 0x56,\n    JUMPI: 0x57,\n    PC: 0x58,\n    MSIZE: 0x59,\n    GAS: 0x5a,\n    JUMPDEST: 0x5b,\n    PUSH1: 0x60,\n    PUSH2: 0x61,\n    PUSH3: 0x62,\n    PUSH4: 0x63,\n    PUSH5: 0x64,\n    PUSH6: 0x65,\n    PUSH7: 0x66,\n    PUSH8: 0x67,\n    PUSH9: 0x68,\n    PUSH10: 0x69,\n    PUSH11: 0x6a,\n    PUSH12: 0x6b,\n    PUSH13: 0x6c,\n    PUSH14: 0x6d,\n    PUSH15: 0x6e,\n    PUSH16: 0x6f,\n    PUSH17: 0x70,\n    PUSH18: 0x71,\n    PUSH19: 0x72,\n    PUSH20: 0x73,\n    PUSH21: 0x74,\n    PUSH22: 0x75,\n    PUSH23: 0x76,\n    PUSH24: 0x77,\n    PUSH25: 0x78,\n    PUSH26: 0x79,\n    PUSH27: 0x7a,\n    PUSH28: 0x7b,\n    PUSH29: 0x7c,\n    PUSH30: 0x7d,\n    PUSH31: 0x7e,\n    PUSH32: 0x7f,\n    DUP1: 0x80,\n    DUP2: 0x81,\n    DUP3: 0x82,\n    DUP4: 0x83,\n    DUP5: 0x84,\n    DUP6: 0x85,\n    DUP7: 0x86,\n    DUP8: 0x87,\n    DUP9: 0x88,\n    DUP10: 0x89,\n    DUP11: 0x8a,\n    DUP12: 0x8b,\n    DUP13: 0x8c,\n    DUP14: 0x8d,\n    DUP15: 0x8e,\n    DUP16: 0x8f,\n    SWAP1: 0x90,\n    SWAP2: 0x91,\n    SWAP3: 0x92,\n    SWAP4: 0x93,\n    SWAP5: 0x94,\n    SWAP6: 0x95,\n    SWAP7: 0x96,\n    SWAP8: 0x97,\n    SWAP9: 0x98,\n    SWAP10: 0x99,\n    SWAP11: 0x9a,\n    SWAP12: 0x9b,\n    SWAP13: 0x9c,\n    SWAP14: 0x9d,\n    SWAP15: 0x9e,\n    SWAP16: 0x9f,\n    LOG0: 0xa0,\n    LOG1: 0xa1,\n    LOG2: 0xa2,\n    LOG3: 0xa3,\n    LOG4: 0xa4,\n    CREATE: 0xf0,\n    CALL: 0xf1,\n    CALLCODE: 0xf2,\n    RETURN: 0xf3,\n    DELEGATECALL: 0xf4,\n    CREATE2: 0xf5,\n    STATICCALL: 0xfa,\n    REVERT: 0xfd,\n    INVALID: 0xfe,\n    SELFDESTRUCT: 0xff,\n};\n","import opcodeFunctions from './opcodes';\nimport stringifyEvents from './utils/stringifyEvents';\nimport stringifyStructs from './utils/stringifyStructs';\nimport stringifyMappings from './utils/stringifyMappings';\nimport stringifyVariables from './utils/stringifyVariables';\nimport stringifyFunctions from './utils/stringifyFunctions';\nimport { stringifyInstructions } from './utils/stringifyInstructions';\nimport { Stack } from './stack';\nimport { Opcode } from './opcode';\nimport {\n    STOP,\n    RETURN,\n    REVERT,\n    INVALID,\n    PUSH1,\n    PUSH32,\n    JUMPDEST,\n    SELFDESTRUCT,\n    codes,\n    names,\n} from './codes';\nimport { fromHex, toHex } from './hex';\nimport { GT } from './opcodes/gt';\nimport { LT } from './opcodes/lt';\nimport { SHA3 } from './opcodes/sha3';\nimport { ADD } from './opcodes/add';\nimport { SIG } from './opcodes/eq';\nimport { ISZERO } from './opcodes/iszero';\nimport { CALL } from './opcodes/call';\nimport { DIV } from './opcodes/div';\nimport { CALLDATALOAD } from './opcodes/calldataload';\n\ninterface Event {\n    [key: string]: any;\n}\n\ntype INST = GT | LT | SHA3 | ADD | SIG | ISZERO | CALL | DIV | CALLDATALOAD;\n\ntype Instruction =\n    | {\n          name: Exclude<\n              keyof typeof opcodeFunctions | 'MappingStore' | 'REQUIRE' | 'MappingLoad' | 'LOG',\n              INST['name']\n          >;\n          type?: string;\n          wrapped?: boolean;\n      }\n    | INST;\n\ninterface Variable {\n    [key: string]: any;\n}\n\ninterface Mapping {\n    [key: string]: any;\n}\n\nexport class EVM {\n    pc = 0;\n    stack = new Stack<bigint | Instruction>();\n    memory: any = {};\n    opcodes: Opcode[] = [];\n    instructions: Instruction[] = [];\n    storage: any = {};\n    jumps: any = {};\n    code: Uint8Array;\n    mappings: Mapping = {};\n    layer = 0;\n    halted = false;\n    functions: any = {};\n    variables: Variable = {};\n    events: Event = {};\n    gasUsed = 0;\n    conditions: any = [];\n\n    constructor(\n        code: string | Uint8Array,\n        readonly functionHashes: { [s: string]: string },\n        readonly eventHashes: { [s: string]: string }\n    ) {\n        if (code instanceof Uint8Array) {\n            this.code = code;\n        } else {\n            this.code = fromHex(code.replace('0x', ''));\n        }\n    }\n\n    clone(): EVM {\n        const clone = new EVM(this.code, this.functionHashes, this.eventHashes);\n        clone.pc = this.pc;\n        clone.opcodes = this.opcodes;\n        clone.stack = this.stack.clone();\n        clone.memory = { ...this.memory };\n        clone.storage = this.storage;\n        clone.jumps = { ...this.jumps };\n        clone.mappings = this.mappings;\n        clone.layer = this.layer + 1;\n        clone.functions = this.functions;\n        clone.variables = this.variables;\n        clone.events = this.events;\n        clone.gasUsed = this.gasUsed;\n        clone.conditions = [...this.conditions];\n        return clone;\n    }\n\n    getBytecode(): string {\n        return '0x' + toHex(this.code);\n    }\n\n    getOpcodes(): Opcode[] {\n        if (this.opcodes.length === 0) {\n            for (let index = 0; index < this.code.length; index++) {\n                const currentOp = {\n                    pc: index,\n                    opcode: this.code[index],\n                    name: 'INVALID',\n                    toString: function () {\n                        const pc = this.pc.toString(16).padStart(4, '0').toUpperCase();\n                        const opcode = this.opcode.toString(16).padStart(2, '0').toUpperCase();\n                        const pushData = this.pushData ? ' 0x' + toHex(this.pushData) : '';\n\n                        return `${pc}    ${opcode}    ${this.name}${pushData}`;\n                    },\n                } as Opcode;\n                if (currentOp.opcode in codes) {\n                    currentOp.name = codes[currentOp.opcode as keyof typeof codes];\n                }\n                this.opcodes.push(currentOp);\n                if (currentOp.name.startsWith('PUSH')) {\n                    const pushDataLength = this.code[index] - 0x5f;\n                    const pushData = this.code.subarray(index + 1, index + pushDataLength + 1);\n                    currentOp.pushData = pushData;\n                    index += pushDataLength;\n                }\n            }\n        }\n        return this.opcodes;\n    }\n\n    getFunctions(): string[] {\n        return [\n            ...new Set(\n                this.getOpcodes()\n                    .filter(opcode => opcode.name === 'PUSH4')\n                    .map(opcode => (opcode.pushData ? toHex(opcode.pushData) : ''))\n                    .filter(hash => hash in this.functionHashes)\n                    .map(hash => this.functionHashes[hash])\n            ),\n        ];\n    }\n\n    getEvents(): string[] {\n        return [\n            ...new Set(\n                this.getOpcodes()\n                    .filter(opcode => opcode.name === 'PUSH32')\n                    .map(opcode => (opcode.pushData ? toHex(opcode.pushData) : ''))\n                    .filter(hash => hash in this.eventHashes)\n                    .map(hash => this.eventHashes[hash])\n            ),\n        ];\n    }\n\n    containsOpcode(opcode: number | string): boolean {\n        let halted = false;\n        if (typeof opcode === 'string' && opcode in names) {\n            opcode = (names as any)[opcode];\n        } else if (typeof opcode === 'string') {\n            throw new Error('Invalid opcode provided');\n        }\n        for (let index = 0; index < this.code.length; index++) {\n            const currentOpcode = this.code[index];\n            if (currentOpcode === opcode && !halted) {\n                return true;\n            } else if (currentOpcode === JUMPDEST) {\n                halted = false;\n            } else if ([STOP, RETURN, REVERT, INVALID, SELFDESTRUCT].includes(currentOpcode)) {\n                halted = true;\n            } else if (currentOpcode >= PUSH1 && currentOpcode <= PUSH32) {\n                index += currentOpcode - PUSH1 + 0x01;\n            }\n        }\n        return false;\n    }\n\n    getJumpDestinations(): number[] {\n        return this.getOpcodes()\n            .filter(opcode => opcode.name === 'JUMPDEST')\n            .map(opcode => opcode.pc);\n    }\n\n    getSwarmHash(): string | false {\n        const regex = /a165627a7a72305820([a-f0-9]{64})0029$/;\n        const bytecode = this.getBytecode();\n        const match = bytecode.match(regex);\n        if (match && match[1]) {\n            return 'bzzr://' + match[1];\n        } else {\n            return false;\n        }\n    }\n\n    getABI(): any {\n        const abi: any = [];\n        if (this.instructions.length === 0) {\n            this.parse();\n        }\n        Object.keys(this.functions).forEach((key: string) => {\n            const item: any = abi.push({ type: 'function' });\n            item.name = this.functions[key].label.split('(')[0];\n            item.payable = this.functions[key].payable;\n            item.constant = this.functions[key].constant;\n        });\n    }\n\n    reset(): void {\n        this.pc = 0;\n        this.instructions = [];\n        this.stack.reset();\n        this.memory = {};\n        this.storage = {};\n        this.jumps = {};\n        this.mappings = {};\n        this.functions = {};\n        this.variables = {};\n        this.events = {};\n        this.gasUsed = 0;\n    }\n\n    parse(): Instruction[] {\n        if (this.instructions.length === 0) {\n            const opcodes = this.getOpcodes();\n            for (this.pc; this.pc < opcodes.length && !this.halted; this.pc++) {\n                const opcode = opcodes[this.pc];\n                if (opcode.name in opcodeFunctions) {\n                    opcodeFunctions[opcode.name as keyof typeof opcodeFunctions](opcode, this);\n                } else {\n                    throw new Error('Unknown OPCODE: ' + opcode.name);\n                }\n            }\n        }\n        return this.instructions;\n    }\n\n    decompile(): string {\n        const instructionTree = this.parse();\n        const events = stringifyEvents(this.events, this.getEvents());\n        const structs = stringifyStructs(this.mappings);\n        const mappings = stringifyMappings(this.mappings);\n        const variables = stringifyVariables(this.variables);\n        const functions = Object.keys(this.functions)\n            .map((functionName: string) =>\n                stringifyFunctions(functionName, this.functions[functionName], this.functionHashes)\n            )\n            .join('');\n        const code = stringifyInstructions(instructionTree);\n        return events + structs + mappings + variables + functions + code;\n    }\n\n    isERC165(): boolean {\n        return ['supportsInterface(bytes4)'].every(v => this.getFunctions().includes(v));\n    }\n}\n","export function hex2a(hexx: any) {\n    const hex = hexx.toString();\n    let str = '';\n    for (let i = 0; i < hex.length && hex.substr(i, 2) !== '00'; i += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    }\n    return str;\n}\n\nexport function pad32(data: string) {\n    if (data.length >= 64) {\n        return data;\n    } else {\n        return '0'.repeat(64 - data.length) + data;\n    }\n}\n\nexport function isHex(h: any) {\n    return /^[0-9a-f-]+$/.test(h);\n}\n\nexport default (data: any) => {\n    if (isHex(data)) {\n        const pieces = data.match(/.{1,64}/g);\n        if (pieces.length === 3 && parseInt(pieces[0], 16) === 32) {\n            const stringLength = parseInt(pieces[1], 16) * 2;\n            const stringData = hex2a(pieces[2].substr(0, stringLength));\n            return '\"' + stringData + '\"';\n        } else if (!isNaN(parseInt(data, 16))) {\n            return parseInt(data, 16).toString();\n        } else {\n            return data;\n        }\n    } else {\n        return data;\n    }\n};\n\n/**\n *\n * @param buffer\n * @returns\n */\nexport function toHex(buffer: Uint8Array): string {\n    return buffer.reduce((str, elem) => str + elem.toString(16).padStart(2, '0'), '');\n}\n\n/**\n *\n * @param str\n * @returns\n */\nexport function fromHex(str: string): Uint8Array {\n    const buffer = new Uint8Array(str.length / 2);\n    for (let i = 0; i < buffer.length; i++) {\n        buffer[i] = parseInt(str.substr(i * 2, 2), 16);\n    }\n\n    return buffer;\n}\n","export { Stack } from './stack';\nexport { Transaction } from './tx';\nexport { EVM } from './evm';\nexport * from './opcodes';\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class ADD {\n    readonly name = 'ADD';\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any) {}\n\n    toString() {\n        return stringify(this.left) + ' + ' + stringify(this.right);\n    }\n\n    get type() {\n        if (this.left.type === this.right.type) {\n            return this.left.type;\n        } else if (!this.left.type && this.right.type) {\n            return this.right.type;\n        } else if (!this.right.type && this.left.type) {\n            return this.left.type;\n        } else {\n            return false;\n        }\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint'\n            ? left + right\n            : typeof left === 'bigint' && left === 0n\n            ? right\n            : typeof right === 'bigint' && right === 0n\n            ? left\n            : new ADD(left, right)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport { ADD } from './add';\nimport { MOD } from './mod';\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    const mod = state.stack.pop();\n    state.stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint' && typeof mod === 'bigint'\n            ? (left + right) % mod\n            : typeof left === 'bigint' && typeof right === 'bigint'\n            ? new MOD(left + right, mod)\n            : new MOD(new ADD(left, right), mod)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class ADDRESS {\n    readonly name = 'ADDRESS';\n    readonly type: string = 'address';\n    readonly wrapped = false;\n\n    toString() {\n        return 'this';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new ADDRESS());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class AND {\n    readonly name = 'AND';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any) {}\n\n    toString() {\n        return stringify(this.left) + ' && ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const left = stack.pop();\n    const right = stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        stack.push(left & right);\n    } else if (typeof left === 'bigint' && /^[f]+$/.test(left.toString(16))) {\n        (right as any).size = left.toString(16).length;\n        stack.push(right);\n    } else if (typeof right === 'bigint' && /^[f]+$/.test(right.toString(16))) {\n        (left as any).size = right.toString(16).length;\n        stack.push(left);\n        /*} else if (\n        typeof left === 'bigint' &&\n        left.equals('1461501637330902918203684832716283019655932542975')\n    ) {*/\n        /* 2 ** 160 */\n        /*    state.stack.push(right);\n    } else if (\n        typeof right === 'bigint' &&\n        right.equals('1461501637330902918203684832716283019655932542975')\n    ) {*/\n        /* 2 ** 160 */\n        /*    state.stack.push(left);*/\n    } else if (\n        typeof left === 'bigint' &&\n        right instanceof AND &&\n        typeof right.left === 'bigint' &&\n        left === right.left\n    ) {\n        stack.push(right.right);\n    } else {\n        stack.push(new AND(left, right));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class BALANCE {\n    readonly name = 'BALANCE';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    constructor(readonly address: any) {}\n\n    toString() {\n        return stringify(this.address) + '.balance';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const address = stack.pop();\n    stack.push(new BALANCE(address));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class BLOCKHASH {\n    readonly name = 'BLOCKHASH';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly blockNumber: any) {}\n\n    toString() {\n        return 'block.blockhash(' + stringify(this.blockNumber) + ')';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const blockNumber = stack.pop();\n    stack.push(new BLOCKHASH(blockNumber));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class BYTE {\n    readonly name = 'BYTE';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly position: any, readonly data: any) {}\n\n    toString() {\n        return '(' + stringify(this.data) + ' >> ' + stringify(this.position) + ') & 1';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const position = stack.pop();\n    const data = stack.pop();\n    stack.push(\n        typeof data === 'bigint' && typeof position === 'bigint'\n            ? (data >> position) & 1n\n            : new BYTE(position, data)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class CALL {\n    readonly name = 'CALL';\n    readonly type?: string;\n    readonly wrapped = false;\n    throwOnFail = false;\n\n    constructor(\n        readonly gas: any,\n        readonly address: any,\n        readonly value: any,\n        readonly memoryStart: any,\n        readonly memoryLength: any,\n        readonly outputStart: any,\n        readonly outputLength: any\n    ) {}\n\n    toString() {\n        if (\n            typeof this.memoryLength === 'bigint' &&\n            this.memoryLength === 0n &&\n            typeof this.outputLength === 'bigint' &&\n            this.outputLength === 0n\n        ) {\n            if (\n                this.gas.name === 'MUL' &&\n                this.gas.left.name === 'ISZERO' &&\n                typeof this.gas.right === 'bigint' &&\n                this.gas.right === 2300n\n            ) {\n                if (this.throwOnFail) {\n                    return (\n                        'address(' +\n                        stringify(this.address) +\n                        ').transfer(' +\n                        stringify(this.value) +\n                        ')'\n                    );\n                } else {\n                    return (\n                        'address(' +\n                        stringify(this.address) +\n                        ').send(' +\n                        stringify(this.value) +\n                        ')'\n                    );\n                }\n            } else {\n                return (\n                    'address(' +\n                    stringify(this.address) +\n                    ').call.gas(' +\n                    stringify(this.gas) +\n                    ').value(' +\n                    stringify(this.value) +\n                    ')'\n                );\n            }\n        } else {\n            return (\n                'call(' +\n                stringify(this.gas) +\n                ',' +\n                stringify(this.address) +\n                ',' +\n                stringify(this.value) +\n                ',' +\n                stringify(this.memoryStart) +\n                ',' +\n                stringify(this.memoryLength) +\n                ',' +\n                stringify(this.outputStart) +\n                ',' +\n                stringify(this.outputLength) +\n                ')'\n            );\n        }\n    }\n}\n\nexport default (_opcode: Opcode, { stack, memory }: EVM): void => {\n    const gas = stack.pop();\n    const address = stack.pop();\n    const value = stack.pop();\n    const memoryStart = stack.pop();\n    const memoryLength = stack.pop();\n    const outputStart = stack.pop();\n    const outputLength = stack.pop();\n    stack.push(new CALL(gas, address, value, memoryStart, memoryLength, outputStart, outputLength));\n\n    if (typeof outputStart !== 'number') {\n        console.log('WARN:CALL outstart should be number');\n    }\n\n    memory[outputStart as any as number] = 'output';\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class CALLCODE {\n    readonly name = 'CALLCODE';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(\n        readonly gas: any,\n        readonly address: any,\n        readonly value: any,\n        readonly memoryStart: any,\n        readonly memoryLength: any,\n        readonly outputStart: any,\n        readonly outputLength: any\n    ) {}\n\n    toString() {\n        return (\n            'callcode(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.value) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const gas = stack.pop();\n    const address = stack.pop();\n    const value = stack.pop();\n    const memoryStart = stack.pop();\n    const memoryLength = stack.pop();\n    const outputStart = stack.pop();\n    const outputLength = stack.pop();\n\n    stack.push(\n        new CALLCODE(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class CALLDATACOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(startLocation: any, copyLength: any) {\n        this.name = 'CALLDATACOPY';\n        this.wrapped = true;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'msg.data[' +\n            this.startLocation +\n            ':(' +\n            this.startLocation +\n            '+' +\n            this.copyLength +\n            ')];'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack, memory }: EVM): void => {\n    const memoryLocation = stack.pop();\n    const startLocation = stack.pop();\n    const copyLength = stack.pop();\n\n    if (typeof memoryLocation !== 'number') {\n        throw new Error('expected number in returndatacopy');\n    }\n\n    memory[memoryLocation] = new CALLDATACOPY(startLocation, copyLength);\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class CALLDATALOAD {\n    readonly name = 'CALLDATALOAD';\n    readonly type?: string;\n    readonly returntype?: string;\n    readonly wrapped = false;\n\n    constructor(readonly location: any) {}\n\n    toString() {\n        if (typeof this.location === 'bigint' && this.location === 0n) {\n            return 'msg.data';\n        } else if (typeof this.location === 'bigint' && (this.location - 4n) % 32n === 0n) {\n            return '_arg' + ((this.location - 4n) / 32n).toString();\n        } else {\n            return 'msg.data[' + stringify(this.location) + ']';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const location = stack.pop();\n    stack.push(new CALLDATALOAD(location));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class CALLDATASIZE {\n    readonly name = 'CALLDATASIZE';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'msg.data.length';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new CALLDATASIZE());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class CALLER {\n    readonly name = 'CALLER';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    constructor() {\n        this.name = 'CALLER';\n    }\n\n    toString() {\n        return 'msg.sender';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new CALLER());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class CALLVALUE {\n    readonly name = 'CALLVALUE';\n    readonly type?: string;\n    readonly wrapped: boolean = false;\n\n    toString() {\n        return 'msg.value';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new CALLVALUE());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class CODECOPY {\n    readonly name = 'CODECOPY';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly startLocation: any, readonly copyLength: any) {}\n\n    toString() {\n        return (\n            'this.code[' +\n            stringify(this.startLocation) +\n            ':(' +\n            stringify(this.startLocation) +\n            '+' +\n            stringify(this.copyLength) +\n            ')]'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack, memory }: EVM): void => {\n    const memoryLocation = stack.pop();\n    const startLocation = stack.pop();\n    const copyLength = stack.pop();\n\n    if (typeof memoryLocation !== 'number') {\n        throw new Error('expected number for memory location on codecopy');\n    }\n\n    memory[memoryLocation] = new CODECOPY(startLocation, copyLength);\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class CODESIZE {\n    readonly name = 'CODESIZE';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'this.code.length';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CODESIZE());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class COINBASE {\n    readonly name = 'COINBASE';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'block.coinbase';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new COINBASE());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class CREATE {\n    readonly name = 'CREATE';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly memoryStart: any, readonly memoryLength: any, readonly value: any) {\n        // this.name = 'address';\n    }\n\n    toString() {\n        return (\n            '(new Contract(memory[' +\n            stringify(this.memoryStart) +\n            ':(' +\n            stringify(this.memoryStart) +\n            '+' +\n            stringify(this.memoryLength) +\n            ')]).value(' +\n            stringify(this.value) +\n            ')).address'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.stack.push(new CREATE(memoryStart, memoryLength, value));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class CREATE2 {\n    readonly name = 'CREATE2';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly memoryStart: any, readonly memoryLength: any, readonly value: any) {}\n\n    toString() {\n        return (\n            '(new Contract(memory[' +\n            stringify(this.memoryStart) +\n            ':(' +\n            stringify(this.memoryStart) +\n            '+' +\n            stringify(this.memoryLength) +\n            ')]).value(' +\n            stringify(this.value) +\n            ')).address'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const value = stack.pop();\n    const memoryStart = stack.pop();\n    const memoryLength = stack.pop();\n    stack.push(new CREATE2(memoryStart, memoryLength, value));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class DELEGATECALL {\n    readonly name = 'DELEGATECALL';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(\n        readonly gas: any,\n        readonly address: any,\n        readonly memoryStart: any,\n        readonly memoryLength: any,\n        readonly outputStart: any,\n        readonly outputLength: any\n    ) {}\n\n    toString() {\n        return (\n            'delegatecall(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const gas = stack.pop();\n    const address = stack.pop();\n    const memoryStart = stack.pop();\n    const memoryLength = stack.pop();\n    const outputStart = stack.pop();\n    const outputLength = stack.pop();\n    stack.push(\n        new DELEGATECALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class DIFFICULTY {\n    readonly name = 'DIFFICULTY';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'block.difficulty';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new DIFFICULTY());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class DIV {\n    readonly name = 'DIV';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any) {}\n\n    toString() {\n        return stringify(this.left) + ' / ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint'\n            ? left / right\n            : typeof right === 'bigint' && right === 1n\n            ? left\n            : new DIV(left, right)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class SIG {\n    readonly name = 'SIG';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    constructor(readonly hash: string) {}\n\n    toString() {\n        return 'msg.sig == ' + this.hash;\n    }\n}\n\nexport class EQ {\n    readonly name = 'EQ';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any) {}\n\n    toString() {\n        return stringify(this.left) + ' == ' + stringify(this.right);\n    }\n}\n\nfunction isSHRCallData(inst: any) {\n    return (\n        inst.name === 'SHR' &&\n        typeof inst.shift === 'bigint' &&\n        inst.shift === 0xe0n &&\n        typeof inst.value !== 'bigint' &&\n        inst.value.name === 'CALLDATALOAD' &&\n        inst.value.location === 0n\n    );\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    let left = stack.pop();\n    let right = stack.pop();\n\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        stack.push(left === right ? 1n : 0n);\n    } else {\n        if (\n            typeof left === 'bigint' &&\n            typeof right !== 'bigint' &&\n            right.name === 'DIV' &&\n            typeof right.right === 'bigint'\n        ) {\n            left = left * right.right;\n            right = right.left;\n        }\n        if (\n            typeof right === 'bigint' &&\n            typeof left !== 'bigint' &&\n            left.name === 'DIV' &&\n            typeof left.right === 'bigint'\n        ) {\n            right = right * left.right;\n            left = left.left;\n        }\n        if (\n            typeof left === 'bigint' &&\n            /^[0]+$/.test(left.toString(16).substring(8)) &&\n            typeof right !== 'bigint' &&\n            right.name === 'CALLDATALOAD' &&\n            right.location === 0n\n        ) {\n            stack.push(\n                new SIG(\n                    '0'.repeat(64 - left.toString(16).length) +\n                        left.toString(16).substring(0, 8 - (64 - left.toString(16).length))\n                )\n            );\n        } else if (\n            typeof right === 'bigint' &&\n            /^[0]+$/.test(right.toString(16).substring(8)) &&\n            typeof left !== 'bigint' &&\n            left.name === 'CALLDATALOAD' &&\n            left.location === 0\n        ) {\n            stack.push(\n                new SIG(\n                    '0'.repeat(64 - right.toString(16).length) +\n                        right.toString(16).substring(0, 8 - (64 - right.toString(16).length))\n                )\n            );\n        } else if (typeof left === 'bigint' && isSHRCallData(right)) {\n            stack.push(new SIG(left.toString(16)));\n        } else {\n            stack.push(new EQ(left, right));\n        }\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class EXP {\n    readonly name = 'EXP';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any) {}\n\n    toString() {\n        return stringify(this.left) + ' ** ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint' ? left ** right : new EXP(left, right)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODECOPY {\n    readonly name = 'EXTCODECOPY';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly address: any, readonly startLocation: any, readonly copyLength: any) {}\n\n    toString() {\n        return (\n            'address(' +\n            stringify(this.address) +\n            ').code[' +\n            stringify(this.startLocation) +\n            ':(' +\n            stringify(this.startLocation) +\n            '+' +\n            stringify(this.copyLength) +\n            ')]'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack, memory }: EVM): void => {\n    const address = stack.pop();\n    const memoryLocation = stack.pop();\n    const startLocation = stack.pop();\n    const copyLength = stack.pop();\n\n    if (typeof memoryLocation !== 'number') {\n        throw new Error('expected number extcodecopy');\n    }\n\n    memory[memoryLocation] = new EXTCODECOPY(address, startLocation, copyLength);\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODEHASH {\n    readonly name = 'EXTCODEHASH';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly address: any) {}\n\n    toString() {\n        return 'keccak256(address(' + stringify(this.address) + ').code)';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const address = stack.pop();\n    stack.push(new EXTCODEHASH(address));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODESIZE {\n    readonly name = 'EXTCODESIZE';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly address: any) {}\n\n    toString() {\n        return 'address(' + stringify(this.address) + ').code.length';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const address = stack.pop();\n    stack.push(new EXTCODESIZE(address));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class GAS {\n    readonly name = 'GAS';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'gasleft()';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new GAS());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class GASLIMIT {\n    readonly name = 'GASLIMIT';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'block.gaslimit';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new GASLIMIT());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class GASPRICE {\n    readonly name = 'GASPRICE';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'tx.gasprice';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new GASPRICE());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class GT {\n    readonly name = 'GT';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any, readonly equal: boolean = false) {}\n\n    toString() {\n        return stringify(this.left) + (this.equal ? ' >= ' : ' > ') + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint'\n            ? left > right\n                ? 1n\n                : 0n\n            : new GT(left, right)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport { toHex } from '../hex';\n\nimport STOP from './stop';\nimport ADD from './add';\nimport MUL from './mul';\nimport SUB from './sub';\nimport DIV from './div';\nimport MOD from './mod';\nimport ADDMOD from './addmod';\nimport MULMOD from './mulmod';\nimport EXP from './exp';\nimport SIGNEXTEND from './signextend';\nimport LT from './lt';\nimport GT from './gt';\nimport EQ from './eq';\nimport ISZERO from './iszero';\nimport AND from './and';\nimport OR from './or';\nimport NOT from './not';\nimport BYTE from './byte';\nimport SHL from './shl';\nimport SHR from './shr';\nimport SAR from './sar';\nimport SHA3 from './sha3';\nimport ADDRESS from './address';\nimport BALANCE from './balance';\nimport ORIGIN from './origin';\nimport CALLER from './caller';\nimport CALLVALUE from './callvalue';\nimport CALLDATALOAD from './calldataload';\nimport CALLDATASIZE from './calldatasize';\nimport CALLDATACOPY from './calldatacopy';\nimport CODESIZE from './codesize';\nimport CODECOPY from './codecopy';\nimport GASPRICE from './gasprice';\nimport EXTCODESIZE from './extcodesize';\nimport EXTCODECOPY from './extcodecopy';\nimport RETURNDATASIZE from './returndatasize';\nimport RETURNDATACOPY from './returndatacopy';\nimport EXTCODEHASH from './extcodehash';\nimport BLOCKHASH from './blockhash';\nimport COINBASE from './coinbase';\nimport TIMESTAMP from './timestamp';\nimport NUMBER from './number';\nimport DIFFICULTY from './difficulty';\nimport GASLIMIT from './gaslimit';\nimport POP from './pop';\nimport MLOAD from './mload';\nimport MSTORE from './mstore';\nimport SLOAD from './sload';\nimport SSTORE from './sstore';\nimport JUMP from './jump';\nimport JUMPI from './jumpi';\nimport MSIZE from './msize';\nimport GAS from './gas';\nimport LOG from './log';\nimport CREATE from './create';\nimport CALL from './call';\nimport CALLCODE from './callcode';\nimport RETURN from './return';\nimport DELEGATECALL from './delegatecall';\nimport CREATE2 from './create2';\nimport STATICCALL from './staticcall';\nimport REVERT from './revert';\nimport INVALID from './invalid';\nimport SELFDESTRUCT from './selfdestruct';\nimport { XOR } from './xor';\n\nexport default {\n    STOP,\n    ADD,\n    MUL,\n    SUB,\n    DIV,\n    SDIV: DIV,\n    MOD,\n    SMOD: MOD,\n    ADDMOD,\n    MULMOD,\n    EXP,\n    SIGNEXTEND,\n    LT,\n    GT,\n    SLT: LT,\n    SGT: GT,\n    EQ,\n    ISZERO,\n    AND,\n    OR,\n    XOR: (_opcode: Opcode, { stack }: EVM) => {\n        const left = stack.pop();\n        const right = stack.pop();\n        stack.push(\n            typeof left === 'bigint' && typeof right === 'bigint'\n                ? left ^ right\n                : new XOR(left, right)\n        );\n    },\n    NOT,\n    BYTE,\n    SHL,\n    SHR,\n    SAR,\n    SHA3,\n    ADDRESS,\n    BALANCE,\n    ORIGIN,\n    CALLER,\n    CALLVALUE,\n    CALLDATALOAD,\n    CALLDATASIZE,\n    CALLDATACOPY,\n    CODESIZE,\n    CODECOPY,\n    GASPRICE,\n    EXTCODESIZE,\n    EXTCODECOPY,\n    RETURNDATASIZE,\n    RETURNDATACOPY,\n    EXTCODEHASH,\n    BLOCKHASH,\n    COINBASE,\n    TIMESTAMP,\n    NUMBER,\n    DIFFICULTY,\n    GASLIMIT,\n    POP,\n    MLOAD,\n    MSTORE,\n    MSTORE8: MSTORE,\n    SLOAD,\n    SSTORE,\n    JUMP,\n    JUMPI,\n    PC: (opcode: Opcode, { stack }: EVM) => {\n        stack.push(BigInt(opcode.pc));\n    },\n    MSIZE,\n    GAS,\n    JUMPDEST: (_opcode: Opcode, _state: EVM) => {\n        /* Empty */\n    },\n    PUSH1: PUSH,\n    PUSH2: PUSH,\n    PUSH3: PUSH,\n    PUSH4: PUSH,\n    PUSH5: PUSH,\n    PUSH6: PUSH,\n    PUSH7: PUSH,\n    PUSH8: PUSH,\n    PUSH9: PUSH,\n    PUSH10: PUSH,\n    PUSH11: PUSH,\n    PUSH12: PUSH,\n    PUSH13: PUSH,\n    PUSH14: PUSH,\n    PUSH15: PUSH,\n    PUSH16: PUSH,\n    PUSH17: PUSH,\n    PUSH18: PUSH,\n    PUSH19: PUSH,\n    PUSH20: PUSH,\n    PUSH21: PUSH,\n    PUSH22: PUSH,\n    PUSH23: PUSH,\n    PUSH24: PUSH,\n    PUSH25: PUSH,\n    PUSH26: PUSH,\n    PUSH27: PUSH,\n    PUSH28: PUSH,\n    PUSH29: PUSH,\n    PUSH30: PUSH,\n    PUSH31: PUSH,\n    PUSH32: PUSH,\n    DUP1: DUP(0),\n    DUP2: DUP(1),\n    DUP3: DUP(2),\n    DUP4: DUP(3),\n    DUP5: DUP(4),\n    DUP6: DUP(5),\n    DUP7: DUP(6),\n    DUP8: DUP(7),\n    DUP9: DUP(8),\n    DUP10: DUP(9),\n    DUP11: DUP(10),\n    DUP12: DUP(11),\n    DUP13: DUP(12),\n    DUP14: DUP(13),\n    DUP15: DUP(14),\n    DUP16: DUP(15),\n    SWAP1: SWAP(1),\n    SWAP2: SWAP(2),\n    SWAP3: SWAP(3),\n    SWAP4: SWAP(4),\n    SWAP5: SWAP(5),\n    SWAP6: SWAP(6),\n    SWAP7: SWAP(7),\n    SWAP8: SWAP(8),\n    SWAP9: SWAP(9),\n    SWAP10: SWAP(10),\n    SWAP11: SWAP(11),\n    SWAP12: SWAP(12),\n    SWAP13: SWAP(13),\n    SWAP14: SWAP(14),\n    SWAP15: SWAP(15),\n    SWAP16: SWAP(16),\n    LOG0: LOG(0),\n    LOG1: LOG(1),\n    LOG2: LOG(2),\n    LOG3: LOG(3),\n    LOG4: LOG(4),\n    CREATE,\n    CALL,\n    CALLCODE,\n    RETURN,\n    DELEGATECALL,\n    CREATE2,\n    STATICCALL,\n    REVERT,\n    INVALID,\n    SELFDESTRUCT,\n};\n\nfunction PUSH(opcode: Opcode, { stack }: EVM) {\n    stack.push(BigInt('0x' + toHex(opcode.pushData!)));\n}\n\nfunction DUP(position: number) {\n    return (_opcode: Opcode, { stack }: EVM): void => {\n        stack.dup(position);\n    };\n}\n\nfunction SWAP(position: number) {\n    return (_opcode: Opcode, { stack }: EVM): void => {\n        stack.swap(position);\n    };\n}\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class INVALID {\n    readonly name = 'INVALID';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly opcode: any) {}\n\n    toString() {\n        return 'revert(\"Invalid instruction (0x' + this.opcode.toString(16) + ')\");';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.halted = true;\n    state.instructions.push(new INVALID(opcode.opcode));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport { LT } from './lt';\nimport { GT } from './gt';\nimport stringify from '../utils/stringify';\n\nexport class ISZERO {\n    readonly name = 'ISZERO';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly value: any) {}\n\n    toString() {\n        return this.value.name === 'EQ'\n            ? stringify(this.value.left) + ' != ' + stringify(this.value.right)\n            : stringify(this.value) + ' == 0';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const value = stack.pop();\n    stack.push(\n        typeof value === 'bigint'\n            ? value === 0n\n                ? 1n\n                : 0n\n            : value.name === 'LT'\n            ? new GT(value.left, value.right, !value.equal)\n            : value.name === 'GT'\n            ? new LT(value.left, value.right, !value.equal)\n            : value instanceof ISZERO\n            ? value.value\n            : new ISZERO(value)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class JUMP {\n    readonly name = 'JUMP';\n    readonly type?: string;\n    readonly wrapped: boolean = false;\n    readonly valid: boolean;\n\n    constructor(readonly location: any, bad?: boolean) {\n        this.valid = !bad;\n    }\n\n    toString() {\n        return this.valid\n            ? 'goto(' + stringify(this.location) + ');'\n            : 'revert(\"Bad jump destination\");';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const jumpLocation = state.stack.pop();\n    if (typeof jumpLocation !== 'bigint') {\n        state.halted = true;\n        state.instructions.push(new JUMP(jumpLocation, true));\n    } else {\n        const opcodes = state.getOpcodes();\n        const jumpLocationData = opcodes.find(op => op.pc === Number(jumpLocation));\n        if (!jumpLocationData) {\n            state.halted = true;\n            state.instructions.push(new JUMP(jumpLocation, true));\n        } else {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (!(opcode.pc + ':' + Number(jumpLocation) in state.jumps)) {\n                if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\n                    state.halted = true;\n                    state.instructions.push(new JUMP(jumpLocation, true));\n                } else if (\n                    jumpLocationData &&\n                    jumpIndex >= 0 &&\n                    jumpLocationData.name === 'JUMPDEST'\n                ) {\n                    state.jumps[opcode.pc + ':' + Number(jumpLocation)] = true;\n                    state.pc = jumpIndex;\n                } else {\n                    state.halted = true;\n                    state.instructions.push(new JUMP(jumpLocation, true));\n                }\n            } else {\n                state.halted = true;\n                state.instructions.push(new JUMP(jumpLocation));\n            }\n        }\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nconst updateCallDataLoad = (item: any, types: any) => {\n    for (const i in item) {\n        if (Object.prototype.hasOwnProperty.call(item, i)) {\n            if (\n                typeof item[i] === 'object' &&\n                item[i].name === 'CALLDATALOAD' &&\n                typeof item[i].location === 'bigint'\n            ) {\n                const argNumber = ((item[i].location - 4n) / 32n).toString();\n                item[i].type = types[argNumber];\n            }\n            if (typeof item[i] === 'object') {\n                updateCallDataLoad(item[i], types);\n            }\n        }\n    }\n};\n\nconst findReturns = (item: any) => {\n    const returns = [];\n    for (const i in item) {\n        if (Object.prototype.hasOwnProperty.call(item, i)) {\n            if (\n                typeof item[i] === 'object' &&\n                item[i].name === 'RETURN' &&\n                item[i].items &&\n                item[i].items.length > 0\n            ) {\n                returns.push(item[i].items);\n            }\n            if (typeof item[i] === 'object') {\n                const deepReturns: any = findReturns(item[i]);\n                if (deepReturns.length > 0) {\n                    returns.push(...deepReturns);\n                }\n            }\n        }\n    }\n    return returns;\n};\n\nexport class TopLevelFunction {\n    readonly name: string;\n    readonly type?: string;\n    readonly label: string;\n    readonly hash: any;\n    readonly gasUsed: number;\n    readonly payable: boolean;\n    readonly visibility: string;\n    readonly constant: boolean;\n    readonly items: any;\n    readonly returns: any;\n\n    constructor(items: any, hash: any, gasUsed: number, functionHashes: { [s: string]: string }) {\n        this.name = 'Function';\n        this.hash = hash;\n        this.gasUsed = gasUsed;\n        this.items = items;\n        this.payable = true;\n        this.visibility = 'public';\n        this.constant = false;\n        this.returns = [];\n        if (this.hash in functionHashes) {\n            this.label = (functionHashes as any)[this.hash];\n        } else {\n            this.label = this.hash + '()';\n        }\n        if (\n            this.items.length > 0 &&\n            this.items[0] instanceof REQUIRE &&\n            this.items[0].condition.name === 'ISZERO' &&\n            this.items[0].condition.item.name === 'CALLVALUE'\n        ) {\n            this.payable = false;\n            this.items.shift();\n        }\n        if (this.items.length === 1 && this.items[0].name === 'RETURN') {\n            this.constant = true;\n        }\n        if (this.hash in functionHashes) {\n            const functionName = (functionHashes as any)[this.hash].split('(')[0];\n            const argumentTypes = (functionHashes as any)[this.hash]\n                .replace(functionName, '')\n                .substr(1)\n                .slice(0, -1)\n                .split(',');\n            if (\n                argumentTypes.length > 1 ||\n                (argumentTypes.length === 1 && argumentTypes[0] !== '')\n            ) {\n                this.items.forEach((item: any) => updateCallDataLoad(item, argumentTypes));\n            }\n        }\n        const returns: any = [];\n        this.items.forEach((item: any) => {\n            const deepReturns = findReturns(item);\n            if (deepReturns.length > 0) {\n                returns.push(...deepReturns);\n            }\n        });\n        if (\n            returns.length > 0 &&\n            returns.every(\n                (returnItem: any) =>\n                    returnItem.length === returns[0].length &&\n                    returnItem.map((item: any) => item.type).join('') ===\n                        returns[0].map((item: any) => item.type).join('')\n            )\n        ) {\n            returns[0].forEach((item: any) => {\n                if (typeof item === 'bigint') {\n                    this.returns.push('uint256');\n                } else if (item.type) {\n                    this.returns.push(item.type);\n                } else {\n                    this.returns.push('unknown');\n                }\n            });\n        } else if (returns.length > 0) {\n            this.returns.push('<unknown>');\n        }\n    }\n}\n\nexport class Variable {\n    readonly name: string;\n    readonly label: string | false;\n    readonly types: any;\n\n    constructor(label: string | false, types: any) {\n        this.name = 'Variable';\n        this.label = label;\n        this.types = types;\n    }\n}\n\nexport class REQUIRE {\n    readonly name = 'REQUIRE';\n    readonly type?: string;\n    readonly wrapped: boolean = true;\n\n    constructor(readonly condition: any) {}\n\n    toString() {\n        return 'require(' + stringify(this.condition) + ');';\n    }\n}\n\nexport class JUMPI {\n    readonly name = 'JUMPI';\n    readonly type?: string;\n    readonly wrapped = true;\n    readonly valid: boolean;\n    readonly true?: any;\n    readonly false?: any;\n    readonly payable?: boolean;\n\n    constructor(\n        readonly condition: any,\n        readonly location: any,\n        ifTrue?: any,\n        ifFalse?: any,\n        skipped?: boolean\n    ) {\n        if (skipped) {\n            this.valid = true;\n        } else if (ifTrue && ifFalse) {\n            this.valid = true;\n            this.true = ifTrue;\n            this.false = ifFalse;\n            if (\n                this.true.length >= 1 &&\n                this.true[0] instanceof REQUIRE &&\n                this.true[0].condition.name === 'ISZERO' &&\n                this.true[0].condition.item.name === 'CALLVALUE'\n            ) {\n                this.payable = false;\n                this.true.shift();\n            } else {\n                this.payable = true;\n            }\n        } else {\n            this.valid = false;\n        }\n    }\n\n    toString() {\n        if (this.valid && this.true && this.false) {\n            return stringify(this.condition);\n        } else if (this.valid) {\n            return 'if' + stringify(this.condition) + ' goto(' + stringify(this.location) + ');';\n        } else {\n            return 'revert(\"Bad jump destination\");';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const jumpLocation = state.stack.pop();\n    const jumpCondition = state.stack.pop();\n    const opcodes = state.getOpcodes();\n    if (typeof jumpLocation !== 'bigint') {\n        state.halted = true;\n        state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n    } else {\n        const jumpLocationData = opcodes.find((o: any) => o.pc === Number(jumpLocation));\n        if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\n            //state.halted = true;\n            //state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            state.instructions.push(new REQUIRE(jumpCondition));\n        } else if (typeof jumpCondition === 'bigint') {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (\n                jumpIndex >= 0 &&\n                jumpCondition !== 0n &&\n                !(opcode.pc + ':' + Number(jumpLocation) in state.jumps)\n            ) {\n                state.jumps[opcode.pc + ':' + Number(jumpLocation)] = true;\n                state.pc = jumpIndex;\n            }\n        } else if (\n            !(opcode.pc + ':' + Number(jumpLocation) in state.jumps) &&\n            jumpCondition.name === 'SIG'\n        ) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (jumpIndex >= 0) {\n                const functionClone: any = state.clone();\n                functionClone.pc = jumpIndex;\n                const functionCloneTree = functionClone.parse();\n                state.functions[jumpCondition.hash] = new TopLevelFunction(\n                    functionCloneTree,\n                    jumpCondition.hash,\n                    functionClone.gasUsed,\n                    state.functionHashes\n                );\n                if (\n                    jumpCondition.hash in state.functionHashes &&\n                    functionCloneTree.length === 1 &&\n                    functionCloneTree[0].name === 'RETURN' &&\n                    functionCloneTree[0].items.every((item: any) => item.name === 'MappingLoad')\n                ) {\n                    functionCloneTree[0].items.forEach((item: any) => {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.mappings[item.location].name = fullFunction.split('(')[0];\n                        if (\n                            item.structlocation &&\n                            !state.mappings[item.location].structs.includes(item.structlocation)\n                        ) {\n                            state.mappings[item.location].structs.push(item.structlocation);\n                        }\n                    });\n                    delete state.functions[jumpCondition.hash];\n                } else if (\n                    jumpCondition.hash in state.functionHashes &&\n                    state.functions[jumpCondition.hash].items.length === 1 &&\n                    state.functions[jumpCondition.hash].items[0].name === 'RETURN' &&\n                    state.functions[jumpCondition.hash].items[0].items.length === 1 &&\n                    state.functions[jumpCondition.hash].items[0].items[0].name === 'SLOAD' &&\n                    typeof state.functions[jumpCondition.hash].items[0].items[0].location ===\n                        'bigint'\n                ) {\n                    if (\n                        !(\n                            state.functions[jumpCondition.hash].items[0].items[0].location in\n                            state.variables\n                        )\n                    ) {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.variables[\n                            state.functions[jumpCondition.hash].items[0].items[0].location\n                        ] = new Variable(fullFunction.split('(')[0], []);\n                        delete state.functions[jumpCondition.hash];\n                    } else {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.variables[\n                            state.functions[jumpCondition.hash].items[0].items[0].location\n                        ].label = fullFunction.split('(')[0];\n                        delete state.functions[jumpCondition.hash];\n                    }\n                }\n            }\n        } else if (\n            !(opcode.pc + ':' + Number(jumpLocation) in state.jumps) &&\n            ((jumpCondition.name === 'LT' &&\n                jumpCondition.left.name === 'CALLDATASIZE' &&\n                typeof jumpCondition.right === 'bigint' &&\n                jumpCondition.right === 4n) ||\n                (jumpCondition.name === 'ISZERO' && jumpCondition.value.name === 'CALLDATASIZE'))\n        ) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (jumpIndex >= 0) {\n                state.halted = true;\n                const trueClone: any = state.clone();\n                trueClone.pc = jumpIndex;\n                trueClone.conditions.push(jumpCondition);\n                const trueCloneTree = trueClone.parse();\n                const falseClone = state.clone();\n                falseClone.pc = state.pc + 1;\n                const falseCloneTree: any = falseClone.parse();\n                if (\n                    trueCloneTree.length > 0 &&\n                    trueCloneTree.length === falseCloneTree.length &&\n                    trueCloneTree[0].name !== 'REVERT' &&\n                    trueCloneTree[0].name !== 'INVALID' &&\n                    trueCloneTree.map((item: any) => stringify(item)).join('') ===\n                        falseCloneTree.map((item: any) => stringify(item)).join('')\n                ) {\n                    state.functions[''] = new TopLevelFunction(\n                        trueCloneTree,\n                        '',\n                        trueCloneTree.gasUsed,\n                        state.functionHashes\n                    );\n                } else if (\n                    trueCloneTree.length > 0 &&\n                    trueCloneTree[0].name !== 'REVERT' &&\n                    trueCloneTree[0].name !== 'INVALID'\n                ) {\n                    state.instructions.push(\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\n                    );\n                }\n            } else {\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            }\n        } else if (!(opcode.pc + ':' + Number(jumpLocation) in state.jumps)) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            state.jumps[opcode.pc + ':' + Number(jumpLocation)] = true;\n            if (jumpIndex >= 0) {\n                state.halted = true;\n                const trueClone: any = state.clone();\n                trueClone.pc = jumpIndex;\n                trueClone.conditions.push(jumpCondition);\n                const trueCloneTree = trueClone.parse();\n                const falseClone = state.clone();\n                falseClone.pc = state.pc + 1;\n                const falseCloneTree: any = falseClone.parse();\n                if (\n                    (falseCloneTree.length === 1 &&\n                        'name' in falseCloneTree[0] &&\n                        falseCloneTree[0].name === 'REVERT' &&\n                        falseCloneTree[0].items &&\n                        falseCloneTree[0].items.length === 0) ||\n                    falseCloneTree[0].name === 'INVALID'\n                ) {\n                    if (\n                        jumpCondition.name === 'CALL' &&\n                        typeof jumpCondition.memoryLength === 'bigint' &&\n                        jumpCondition.memoryLength === 0n &&\n                        typeof jumpCondition.outputLength === 'bigint' &&\n                        jumpCondition.outputLength === 0n &&\n                        jumpCondition.gas.name === 'MUL' &&\n                        jumpCondition.gas.left.name === 'ISZERO' &&\n                        typeof jumpCondition.gas.right === 'bigint' &&\n                        jumpCondition.gas.right === 2300n\n                    ) {\n                        jumpCondition.throwOnFail = true;\n                        state.instructions.push(jumpCondition);\n                        state.instructions.push(...trueCloneTree);\n                    } else {\n                        state.instructions.push(new REQUIRE(jumpCondition));\n                        state.instructions.push(...trueCloneTree);\n                    }\n                } else {\n                    state.instructions.push(\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\n                    );\n                }\n            } else {\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            }\n        } else {\n            state.instructions.push(new JUMPI(jumpCondition, jumpLocation, null, null, true));\n        }\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport { MLOAD } from './mload';\n\nexport class LOG {\n    readonly name = 'LOG';\n    readonly type?: string;\n    readonly wrapped = true;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items?: any;\n    readonly eventName?: string;\n\n    constructor(\n        eventHashes: { [s: string]: string },\n        readonly topics: any,\n        items?: any,\n        memoryStart?: any,\n        memoryLength?: any\n    ) {\n        if (\n            this.topics.length > 0 &&\n            typeof this.topics[0] === 'bigint' &&\n            this.topics[0].toString(16) in eventHashes\n        ) {\n            this.eventName = (eventHashes as any)[this.topics[0].toString(16)].split('(')[0];\n            this.topics.shift();\n        }\n        if (this.memoryStart && this.memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.eventName) {\n            return (\n                'emit ' + this.eventName + '(' + [...this.topics, ...this.items].join(', ') + ');'\n            );\n        } else {\n            return 'log(' + [...this.topics, ...this.items].join(', ') + ');';\n        }\n    }\n}\n\nexport default (topicsCount: number) => {\n    return (_opcode: Opcode, state: EVM): void => {\n        const memoryStart = state.stack.pop();\n        const memoryLength = state.stack.pop();\n        const topics = [];\n        for (let i = 0; i < topicsCount; i++) {\n            topics.push(state.stack.pop());\n        }\n        if (topics.length > 0) {\n            const eventTopic = topics[0].toString(16);\n            if (!(eventTopic in state.events)) {\n                state.events[eventTopic] = {};\n                state.events[eventTopic].indexedCount = topics.length - 1;\n                if (eventTopic in state.eventHashes) {\n                    state.events[eventTopic].label = (state.eventHashes as any)[eventTopic];\n                }\n            }\n        }\n        if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n            const items = [];\n            for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n                if (i in state.memory) {\n                    items.push(state.memory[i]);\n                } else {\n                    items.push(new MLOAD(i));\n                }\n            }\n            if (topics.length === 0) {\n                if (!('anonymous' in state.events)) {\n                    state.events['anonymous'] = [];\n                }\n                state.events['anonymous'].push({ items });\n            }\n            state.instructions.push(new LOG(state.eventHashes, topics, items));\n        } else {\n            state.instructions.push(\n                new LOG(state.eventHashes, topics, [], memoryStart, memoryLength)\n            );\n        }\n    };\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class LT {\n    readonly name = 'LT';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any, readonly equal: boolean = false) {}\n\n    toString() {\n        return stringify(this.left) + (this.equal ? ' <= ' : ' < ') + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM) => {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint'\n            ? left < right\n                ? 1n\n                : 0n\n            : new LT(left, right)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class MLOAD {\n    readonly name = 'MLOAD';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly location: any) {}\n\n    toString() {\n        return 'memory[' + stringify(this.location) + ']';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    if (typeof memoryLocation === 'bigint' && Number(memoryLocation) in state.memory) {\n        state.stack.push(state.memory[Number(memoryLocation)]);\n    } else {\n        state.stack.push(new MLOAD(memoryLocation));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class MOD {\n    readonly name = 'MOD';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any) {}\n\n    toString() {\n        return stringify(this.left) + ' % ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint' ? left % right : new MOD(left, right)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class MSIZE {\n    readonly name = 'MSIZE';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'memory.length';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new MSIZE());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class MSTORE {\n    readonly name = 'MSTORE';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly location: any, readonly data: any) {}\n\n    toString() {\n        return 'memory[' + stringify(this.location) + '] = ' + stringify(this.data) + ';';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    const storeData = state.stack.pop();\n    if (typeof storeLocation === 'bigint') {\n        state.memory[Number(storeLocation)] = storeData;\n    } else {\n        state.instructions.push(new MSTORE(storeLocation, storeData));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class MUL {\n    readonly name = 'MUL';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any) {}\n\n    toString() {\n        return stringify(this.left) + ' * ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint'\n            ? left * right\n            : (typeof left === 'bigint' && left === 0n) ||\n              (typeof right === 'bigint' && right === 0n)\n            ? 0n\n            : new MUL(left, right)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport { MUL } from './mul';\nimport { MOD } from './mod';\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    const mod = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint' && typeof mod === 'bigint') {\n        state.stack.push((left * right) % mod);\n    } else if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(new MOD(left * right, mod));\n    } else {\n        state.stack.push(new MOD(new MUL(left, right), mod));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class NOT {\n    readonly name = 'NOT';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly item: any) {}\n\n    toString() {\n        return '~' + stringify(this.item);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM) => {\n    const item = stack.pop();\n    stack.push(typeof item === 'bigint' ? ~item : new NOT(item));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class NUMBER {\n    readonly name = 'NUMBER';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'block.number';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM) => {\n    stack.push(new NUMBER());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class OR {\n    readonly name = 'OR';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any) {}\n\n    toString() {\n        return stringify(this.left) + ' || ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint' ? left | right : new OR(left, right)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class ORIGIN {\n    readonly name = 'ORIGIN';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'tx.origin';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new ORIGIN());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.pop();\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport { MLOAD } from './mload';\nimport { hex2a } from '../hex';\nimport stringify from '../utils/stringify';\n\nexport class RETURN {\n    readonly name = 'RETURN';\n    readonly type?: string;\n    readonly wrapped = true;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.memoryStart && this.memoryLength) {\n            return (\n                'return memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')];'\n            );\n        } else if (this.items.length === 0) {\n            return 'return;';\n        } else if (\n            this.items.length === 1 &&\n            (typeof this.items[0] === 'bigint' || this.items[0].static)\n        ) {\n            return 'return ' + this.items[0] + ';';\n        } else if (\n            this.items.length === 3 &&\n            this.items.every((item: any) => typeof item === 'bigint') &&\n            this.items[0] === 32n\n        ) {\n            return 'return \"' + hex2a(this.items[2].toString(16)) + '\";';\n        } else {\n            return 'return(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.halted = true;\n    if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n        const items = [];\n        for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.instructions.push(new RETURN(items));\n    } else {\n        state.instructions.push(new RETURN([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class RETURNDATACOPY {\n    readonly name = 'RETURNDATACOPY';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly returnDataPosition: any, readonly returnDataSize: any) {}\n\n    toString() {\n        return (\n            'output[' +\n            stringify(this.returnDataPosition) +\n            ':(' +\n            stringify(this.returnDataPosition) +\n            '+' +\n            stringify(this.returnDataSize) +\n            ')]'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack, memory }: EVM): void => {\n    const memoryPosition = stack.pop();\n    const returnDataPosition = stack.pop();\n    const returnDataSize = stack.pop();\n\n    if (typeof memoryPosition !== 'number') {\n        throw new Error('expected number in returndatacopy');\n    }\n\n    memory[memoryPosition] = new RETURNDATACOPY(returnDataPosition, returnDataSize);\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class RETURNDATASIZE {\n    readonly name = 'RETURNDATASIZE';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'output.length';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new RETURNDATASIZE());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport { MLOAD } from './mload';\nimport stringify from '../utils/stringify';\n\nexport class REVERT {\n    readonly name = 'REVERT';\n    readonly type?: string;\n    readonly wrapped = true;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.items) {\n            return 'revert(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\n        } else {\n            return (\n                'revert(memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')]);'\n            );\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.halted = true;\n    if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n        const items = [];\n        for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.instructions.push(new REVERT(items));\n    } else {\n        state.instructions.push(new REVERT([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class SAR {\n    readonly name = 'SAR';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly value: any, readonly shift: any) {}\n\n    toString() {\n        return stringify(this.value) + ' >> ' + stringify(this.shift);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const shift = stack.pop();\n    const value = stack.pop();\n\n    stack.push(\n        typeof value === 'bigint' && typeof shift === 'bigint'\n            ? value >> shift\n            : new SAR(value, shift)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class SELFDESTRUCT {\n    readonly name = 'SELFDESTRUCT';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly address: any) {}\n\n    toString() {\n        return 'selfdestruct(' + stringify(this.address) + ');';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.halted = true;\n    state.instructions.push(new SELFDESTRUCT(address));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport { MLOAD } from './mload';\nimport stringify from '../utils/stringify';\n\nexport class SHA3 {\n    readonly name = 'SHA3';\n    readonly type?: string;\n    readonly wrapped = false;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.items) {\n            return 'keccak256(' + this.items.map((item: any) => stringify(item)).join(', ') + ')';\n        } else {\n            return (\n                'keccak256(memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')])'\n            );\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n        const items = [];\n        for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.stack.push(new SHA3(items));\n    } else {\n        state.stack.push(new SHA3([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class SHL {\n    readonly name = 'SHL';\n    readonly type?: string;\n    readonly wrapped: boolean = true;\n\n    constructor(readonly value: any, readonly shift: any) {}\n\n    toString() {\n        return stringify(this.value) + ' << ' + stringify(this.shift);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const shift = stack.pop();\n    const value = stack.pop();\n    stack.push(\n        typeof value === 'bigint' && typeof shift === 'bigint'\n            ? value << shift\n            : new SHL(value, shift)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class SHR {\n    readonly name = 'SHR';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly value: any, readonly shift: any) {}\n\n    toString() {\n        return stringify(this.value) + ' >>> ' + stringify(this.shift);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const shift = stack.pop();\n    const value = stack.pop();\n\n    stack.push(\n        typeof value === 'bigint' && typeof shift === 'bigint'\n            ? value >> shift\n            : new SHR(value, shift)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport { SHL } from './shl';\nimport { SAR } from './sar';\nimport { SUB } from './sub';\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push((right << (32n - left)) >> (32n - left));\n    } else if (typeof left === 'bigint') {\n        state.stack.push(new SAR(new SHL(right, 32n - left), 32n - left));\n    } else {\n        state.stack.push(new SAR(new SHL(right, new SUB(32n, left)), new SUB(32n, left)));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nconst parseMapping = (...items: any[]) => {\n    const mappings: any = [];\n    items.forEach((item2: any) => {\n        if (item2.name === 'SHA3' && item2.items) {\n            mappings.push(...parseMapping(...item2.items));\n        } else {\n            mappings.push(item2);\n        }\n    });\n    return mappings;\n};\n\nexport class MappingLoad {\n    readonly name = 'MappingLoad';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    constructor(\n        readonly mappings: any,\n        readonly location: any,\n        readonly items: any,\n        readonly count: any,\n        readonly structlocation?: any\n    ) {}\n\n    toString() {\n        let mappingName = 'mapping' + (this.count + 1);\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\n            mappingName = this.mappings()[this.location].name;\n        }\n        if (this.structlocation) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                '[' +\n                this.structlocation.toString() +\n                ']'\n            );\n        } else {\n            return (\n                mappingName + this.items.map((item: any) => '[' + stringify(item) + ']').join('')\n            );\n        }\n    }\n}\n\nexport class SLOAD {\n    readonly name = 'SLOAD';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    constructor(readonly location: any, readonly variables: any) {}\n\n    toString() {\n        if (typeof this.location === 'bigint' && this.location.toString() in this.variables()) {\n            if (this.variables()[this.location.toString()].label) {\n                return this.variables()[this.location.toString()].label;\n            } else {\n                return (\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1)\n                );\n            }\n        } else {\n            return 'storage[' + stringify(this.location) + ']';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    if (typeof storeLocation !== 'bigint' && storeLocation.name === 'SHA3') {\n        const mappingItems = parseMapping(...storeLocation.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else if (\n        typeof storeLocation !== 'bigint' &&\n        storeLocation.name === 'ADD' &&\n        storeLocation.left.name === 'SHA3' &&\n        typeof storeLocation.right === 'bigint'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.left.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.right\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else if (\n        typeof storeLocation !== 'bigint' &&\n        storeLocation.name === 'ADD' &&\n        typeof storeLocation.left === 'bigint' &&\n        storeLocation.right.name === 'SHA3'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.right.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.left\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else {\n        state.stack.push(new SLOAD(storeLocation, () => state.variables));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\nimport { Variable } from './jumpi';\n\nconst parseMapping = (...items: any[]) => {\n    const mappings: any = [];\n    items.forEach((item2: any) => {\n        if (item2.name === 'SHA3' && item2.items) {\n            mappings.push(...parseMapping(...item2.items));\n        } else {\n            mappings.push(item2);\n        }\n    });\n    return mappings;\n};\n\nexport class MappingStore {\n    readonly name = 'MappingStore';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    constructor(\n        readonly mappings: any,\n        readonly location: any,\n        readonly items: any,\n        readonly data: any,\n        readonly count: any,\n        readonly structlocation?: any\n    ) {}\n\n    toString() {\n        let mappingName = 'mapping' + (this.count + 1);\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\n            mappingName = this.mappings()[this.location].name;\n        }\n        if (\n            this.data.name === 'ADD' &&\n            this.data.right.name === 'MappingLoad' &&\n            stringify(this.data.right.location) === stringify(this.location)\n        ) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' += ' +\n                stringify(this.data.left) +\n                ';'\n            );\n        } else if (\n            this.data.name === 'ADD' &&\n            this.data.left.name === 'MappingLoad' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' += ' +\n                stringify(this.data.right) +\n                ';'\n            );\n        } else if (\n            this.data.name === 'SUB' &&\n            this.data.left.name === 'MappingLoad' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' -= ' +\n                stringify(this.data.right) +\n                ';'\n            );\n        } else {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' = ' +\n                stringify(this.data) +\n                ';'\n            );\n        }\n    }\n}\n\nexport class SSTORE {\n    readonly name = 'SSTORE';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly location: any, readonly data: any, readonly variables: any) {\n        if (typeof this.location === 'bigint' && this.location.toString() in this.variables()) {\n            this.variables()[this.location.toString()].types.push(() => this.data.type);\n        } else if (\n            typeof this.location === 'bigint' &&\n            !(this.location.toString() in this.variables())\n        ) {\n            this.variables()[this.location.toString()] = new Variable(false, [\n                () => this.data.type,\n            ]);\n        }\n    }\n\n    toString() {\n        let variableName = 'storage[' + stringify(this.location) + ']';\n        if (typeof this.location === 'bigint' && this.location.toString() in this.variables()) {\n            if (this.variables()[this.location.toString()].label) {\n                variableName = this.variables()[this.location.toString()].label;\n            } else {\n                variableName =\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1);\n            }\n        }\n        if (\n            this.data.name === 'ADD' &&\n            this.data.right.name === 'SLOAD' &&\n            stringify(this.data.right.location) === stringify(this.location)\n        ) {\n            return variableName + ' += ' + stringify(this.data.left) + ';';\n        } else if (\n            this.data.name === 'SUB' &&\n            this.data.left.name === 'SLOAD' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return variableName + ' -= ' + stringify(this.data.right) + ';';\n        } else {\n            return variableName + ' = ' + stringify(this.data) + ';';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    const storeData = state.stack.pop();\n    if (typeof storeLocation === 'bigint') {\n        throw new Error('bigint not expected in sstore');\n    } else if (storeLocation.name === 'SHA3') {\n        const mappingItems = parseMapping(...storeLocation.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.mappings[mappingLocation].values.push(storeData);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        storeLocation.left.name === 'SHA3' &&\n        typeof storeLocation.right === 'bigint'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.left.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.right\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        typeof storeLocation.left === 'bigint' &&\n        storeLocation.right.name === 'SHA3'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.right.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.left\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        // eslint-disable-next-line no-constant-condition\n        false &&\n        // typeof storeLocation === 'bigint' &&\n        storeLocation.toString() in state.variables //&&\n        // storeData.type &&\n        // (!)state.variables[storeLocation.toString()].types.includes(storeData.type)\n    ) {\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        // state.variables[storeLocation.toString()].types.push(storeData.type);\n    } else {\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class STATICCALL {\n    readonly name = 'STATICCALL';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(\n        readonly gas: any,\n        readonly address: any,\n        readonly memoryStart: any,\n        readonly memoryLength: any,\n        readonly outputStart: any,\n        readonly outputLength: any\n    ) {}\n\n    toString() {\n        return (\n            'staticcall(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const gas = stack.pop();\n    const address = stack.pop();\n    const memoryStart = stack.pop();\n    const memoryLength = stack.pop();\n    const outputStart = stack.pop();\n    const outputLength = stack.pop();\n    stack.push(new STATICCALL(gas, address, memoryStart, memoryLength, outputStart, outputLength));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class STOP {\n    readonly name = 'STOP';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'return;';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.halted = true;\n    state.instructions.push(new STOP());\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class SUB {\n    readonly name = 'SUB';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any) {}\n\n    toString() {\n        return stringify(this.left) + ' - ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint' ? left - right : new SUB(left, right)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class TIMESTAMP {\n    readonly name = 'TIMESTAMP';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'block.timestamp';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new TIMESTAMP());\n};\n","import stringify from '../utils/stringify';\n\nexport class XOR {\n    readonly name = 'XOR';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any) {}\n\n    toString() {\n        return stringify(this.left) + ' ^ ' + stringify(this.right);\n    }\n}\n","export class Stack<T> {\n    elements: T[];\n\n    constructor() {\n        this.elements = [];\n    }\n\n    push(item: T): void {\n        if (this.elements.length >= 1024) {\n            throw new Error('Stack too deep');\n        } else {\n            this.elements.unshift(item);\n        }\n    }\n\n    pop(): T | never {\n        if (this.elements.length === 0) {\n            throw new Error('POP with empty stack');\n        } else {\n            return this.elements.shift()!;\n        }\n    }\n\n    dup(position: number): void | never {\n        if (position < 0 || position > 15) {\n            throw new Error('Unsupported position for duplication operation');\n        } else if (!(position in this.elements)) {\n            throw new Error(\n                \"Invalid duplication operation, provided position wasn't found in stack\"\n            );\n        } else {\n            this.push(this.elements[position]);\n        }\n    }\n\n    swap(secondPosition: number): void | never {\n        if (secondPosition < 1 || secondPosition > 16) {\n            throw new Error('Unsupported position for swap operation');\n        } else if (!(secondPosition in this.elements)) {\n            throw new Error(\"Invalid swap operation, provided position wasn't found in stack\");\n        } else {\n            const firstValue = this.elements[0];\n            const secondValue = this.elements[secondPosition];\n            this.elements[0] = secondValue;\n            this.elements[secondPosition] = firstValue;\n        }\n    }\n\n    clone(): Stack<T> {\n        const stack = new Stack<T>();\n        stack.elements = [...this.elements];\n        return stack;\n    }\n\n    reset(): void {\n        this.elements = [];\n    }\n}\n","const parseSingle = (data: any, type: any) => {\n    if (type === 'string') {\n        return '\"' + Buffer.from(data, 'hex').toString('utf8') + '\"';\n    } else if (type === 'address') {\n        return '0x' + data.substring(24);\n    } else if (type === 'uint256' || type === 'uint8') {\n        return BigInt('0x' + data).toString();\n    } else if (type === 'bool') {\n        return (BigInt('0x' + data) !== 0n).toString();\n    } else {\n        return data;\n    }\n};\n\nexport class Transaction {\n    blockHash?: string;\n    blockNumber?: number;\n    from?: string;\n    gas?: number;\n    gasPrice?: number;\n    input?: string;\n    to?: string;\n    value?: number;\n\n    constructor(transactionObject?: any) {\n        if (transactionObject) {\n            if ('blockHash' in transactionObject) {\n                this.blockHash = transactionObject.blockHash;\n            }\n            if ('blockNumber' in transactionObject) {\n                this.blockNumber = transactionObject.blockNumber;\n            }\n            if ('from' in transactionObject) {\n                this.from = transactionObject.from;\n            }\n            if ('gas' in transactionObject) {\n                this.gas = transactionObject.gas;\n            }\n            if ('gasPrice' in transactionObject) {\n                this.gasPrice = transactionObject.gasPrice;\n            }\n            if ('input' in transactionObject) {\n                this.input = transactionObject.input.replace('0x', '');\n            }\n            if ('to' in transactionObject) {\n                this.to = transactionObject.to;\n            }\n            if ('value' in transactionObject) {\n                this.value = transactionObject.value;\n            }\n        }\n    }\n\n    setInput(input: string): void {\n        this.input = input.replace('0x', '');\n    }\n\n    getFunctionHash(): string | false {\n        if (this.input && this.input.length >= 8) {\n            return this.input.substr(0, 8);\n        } else {\n            return false;\n        }\n    }\n\n    getFunction(functionHashes: { [s: string]: string }): string | false {\n        const functionHash = this.getFunctionHash();\n        if (functionHash && functionHash in functionHashes) {\n            return (functionHashes as any)[functionHash];\n        } else {\n            return false;\n        }\n    }\n\n    getFunctionName(functionHashes: { [s: string]: string }): string | false {\n        const rawFunction = this.getFunction(functionHashes);\n        if (rawFunction) {\n            return rawFunction.split('(')[0];\n        } else {\n            return false;\n        }\n    }\n\n    getRawArguments(): string[] {\n        if (this.input && this.input.length >= 70) {\n            return this.input.substr(8).match(/.{1,64}/g)!;\n        } else {\n            return [];\n        }\n    }\n\n    getArguments(functionHashes: { [s: string]: string }, _descriptive = true): string[] {\n        const functionName = this.getFunction(functionHashes);\n        const functionArguments = this.getRawArguments();\n        if (functionName && this.input) {\n            const rawFunctionArguments = functionName.split('(')[1].slice(0, -1).split(',');\n            if (\n                rawFunctionArguments.length === 1 &&\n                rawFunctionArguments[0] === '' &&\n                functionArguments.length === 0\n            ) {\n                return [];\n            } else {\n                const result: string[] = [];\n                for (let i = 0; i < rawFunctionArguments.length; i++) {\n                    const functionArgumentType = rawFunctionArguments[i] || 'unknown';\n                    const functionArgument = functionArguments[i];\n                    if (functionArgumentType === 'string') {\n                        const location = Number(BigInt('0x' + functionArgument) / 32n);\n                        const length = Number(BigInt('0x' + functionArguments[location]) * 2n);\n                        const data = this.input.substring(8).substr((location + 1) * 64, length);\n                        result.push(parseSingle(data, functionArgumentType));\n                    } else {\n                        result.push(parseSingle(functionArgument, functionArgumentType));\n                    }\n                }\n                return result;\n            }\n        } else {\n            return functionArguments;\n        }\n    }\n\n    isContractCreation(): boolean {\n        return this.to === null;\n    }\n}\n","export default (item: any) => {\n    if (typeof item === 'bigint') {\n        return item.toString(16);\n    } else if (!item.wrapped) {\n        return item.toString();\n    } else {\n        return '(' + item.toString() + ')';\n    }\n};\n","export default (stateEvents: any, events: string[]) => {\n    const stateEventValues = Object.keys(stateEvents).map((key: string) => stateEvents[key]);\n    let output = '';\n\n    events.forEach((event: string) => {\n        const eventName = event.split('(')[0];\n        const eventArguments = event.replace(eventName, '').substring(1).slice(0, -1);\n        output += 'event ';\n        if (eventArguments) {\n            output += eventName + '(';\n            output += eventArguments\n                .split(',')\n                .map((a: string, i: number) => {\n                    const stateEvent = stateEventValues.find((e: any) => e.label === event);\n                    if (stateEvent && i < stateEvent.indexedCount) {\n                        return a + ' indexed _arg' + i;\n                    } else {\n                        return a + ' _arg' + i;\n                    }\n                })\n                .join(', ');\n            output += ');';\n        } else {\n            output += event;\n        }\n        output += '\\n';\n    });\n\n    if (events.length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","import { stringifyInstructions } from './stringifyInstructions';\n\nexport default (\n    functionName: string,\n    functionInstance: any,\n    functionHashes: { [s: string]: string }\n): string => {\n    let output = '';\n    output += 'function ';\n    if (functionName in functionHashes) {\n        const fullFunction = (functionHashes as any)[functionName];\n        const fullFunctionName = fullFunction.split('(')[0];\n        const fullFunctionArguments = fullFunction\n            .replace(fullFunctionName, '')\n            .substring(1)\n            .slice(0, -1);\n        if (fullFunctionArguments) {\n            output += fullFunctionName + '(';\n            output += fullFunctionArguments\n                .split(',')\n                .map((a: string, i: number) => a + ' _arg' + i)\n                .join(', ');\n            output += ')';\n        } else {\n            output += fullFunction;\n        }\n    } else {\n        output += functionName + '()';\n    }\n    output += ' ' + functionInstance.visibility;\n    if (functionInstance.constant) {\n        output += ' view';\n    }\n    if (functionInstance.payable) {\n        output += ' payable';\n    }\n    if (functionInstance.returns.length > 0) {\n        output += ' returns (' + functionInstance.returns.join(', ') + ')';\n    }\n    output += ' {\\n';\n    output += stringifyInstructions(functionInstance.items, 4);\n    output += '}\\n\\n';\n    return output;\n};\n","/**\n *\n * @param instructionTree\n * @param indentation\n * @returns\n */\nexport function stringifyInstructions(instructionTree: any, indentation = 0): string {\n    let lines = '';\n    instructionTree.forEach((instruction: any) => {\n        if (instruction.name === 'JUMPI' && instruction.false) {\n            const condition = instruction.toString();\n            const falseInstructions = instruction.false.filter((i: any) => i.debugLevel > 0);\n            if (falseInstructions.length === 1 && falseInstructions[0].name === 'JUMPI') {\n                lines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\n                lines += stringifyInstructions(instruction.true, indentation + 4);\n                lines += ' '.repeat(indentation) + '} else ';\n                const elseOrElseIf = stringifyInstructions(instruction.false, indentation);\n                if (elseOrElseIf.trim().startsWith('if')) {\n                    lines += elseOrElseIf.trim() + '\\n';\n                } else {\n                    lines +=\n                        '{\\n' +\n                        elseOrElseIf\n                            .split('\\n')\n                            .filter(l => l)\n                            .map(l => ' '.repeat(4) + l)\n                            .join('\\n');\n                    lines += '\\n' + ' '.repeat(indentation) + '}\\n';\n                }\n            } else {\n                lines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\n                lines += stringifyInstructions(instruction.true, indentation + 4);\n                lines += ' '.repeat(indentation) + '} else {\\n';\n                lines += stringifyInstructions(instruction.false, indentation + 4);\n                lines += ' '.repeat(indentation) + '}\\n';\n            }\n        } else {\n            lines += ' '.repeat(indentation) + instruction.toString() + '\\n';\n        }\n    });\n    return lines;\n}\n","const stringifyMapping = (mapping: any) => {\n    const mappingKey: string[] = [];\n    const mappingValue: string[] = [];\n    let deepMapping = false;\n    mapping.keys\n        .filter((mappingChild: any) => mappingChild.length > 0)\n        .forEach((mappingChild: any) => {\n            if (\n                mappingChild.length > 0 &&\n                mappingChild[0].type &&\n                !mappingKey.includes(mappingChild[0].type)\n            ) {\n                mappingKey.push(mappingChild[0].type);\n            }\n            if (mappingChild.length > 1 && !deepMapping) {\n                deepMapping = true;\n                mappingValue.push(\n                    stringifyMapping({\n                        name: mapping.name,\n                        structs: mapping.structs,\n                        keys: mapping.keys.map((items: any) => {\n                            items.shift();\n                            return items;\n                        }),\n                        values: mapping.values,\n                    })\n                );\n            } else if (mappingChild.length === 1 && !deepMapping) {\n                mapping.values.forEach((mappingChild2: any) => {\n                    if (mappingChild2.type && !mappingValue.includes(mappingChild2.type)) {\n                        mappingValue.push(mappingChild2.type);\n                    }\n                });\n            }\n        });\n    if (mappingKey.length === 0) {\n        mappingKey.push('unknown');\n    }\n    if (mapping.structs.length > 0 && mappingValue.length === 0) {\n        mappingValue.push(mapping.name + 'Struct');\n    } else if (mappingValue.length === 0) {\n        mappingValue.push('unknown');\n    }\n    return 'mapping (' + mappingKey.join('|') + ' => ' + mappingValue.join('|') + ')';\n};\n\nexport default (mappings: any) => {\n    let output = '';\n\n    Object.keys(mappings).forEach((key: string, index: number) => {\n        const mapping = mappings[key];\n        if (mapping.name) {\n            output += stringifyMapping(mapping) + ' public ' + mapping.name + ';';\n        } else {\n            output += stringifyMapping(mapping) + ' mapping' + (index + 1) + ';';\n        }\n        output += '\\n';\n    });\n\n    if (Object.keys(mappings).length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","export default (mappings: any) => {\n    let output = '';\n\n    Object.keys(mappings)\n        .filter((key: any) => mappings[key].structs.length > 0)\n        .forEach((key: string, _index: number) => {\n            const mapping = mappings[key];\n            output += 'struct ' + mapping.name + 'Struct {\\n';\n            mapping.structs.forEach((struct: any) => {\n                output += '    ' + struct.toString() + ';\\n';\n            });\n            output += '}\\n\\n';\n        });\n\n    return output;\n};\n","export default (variables: any) => {\n    let output = '';\n\n    Object.keys(variables).forEach((key: string, index: number) => {\n        const variable = variables[key];\n        const types = variable.types\n            .map((type: any) => {\n                if (typeof type === 'function') {\n                    return type();\n                } else {\n                    return type;\n                }\n            })\n            .filter((type: any) => type);\n        if (types.length === 0) {\n            types.push('unknown');\n        }\n        if (variable.label) {\n            output += [...new Set(types)].join('|') + ' public ' + variable.label + ';';\n        } else {\n            output += [...new Set(types)].join('|') + ' var' + (index + 1).toString() + ';';\n            index++;\n        }\n        output += '\\n';\n    });\n\n    if (Object.keys(variables).length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(341);\n"],"names":["root","factory","exports","module","define","amd","a","i","self","STOP","ADD","MUL","SUB","DIV","SDIV","MOD","SMOD","ADDMOD","MULMOD","EXP","SIGNEXTEND","LT","GT","SLT","SGT","EQ","ISZERO","AND","OR","XOR","NOT","BYTE","SHL","SHR","SAR","SHA3","ADDRESS","BALANCE","ORIGIN","CALLER","CALLVALUE","CALLDATALOAD","CALLDATASIZE","CALLDATACOPY","CODESIZE","CODECOPY","GASPRICE","EXTCODESIZE","EXTCODECOPY","RETURNDATASIZE","RETURNDATACOPY","EXTCODEHASH","BLOCKHASH","COINBASE","TIMESTAMP","NUMBER","DIFFICULTY","GASLIMIT","POP","MLOAD","MSTORE","MSTORE8","SLOAD","SSTORE","JUMP","JUMPI","PC","MSIZE","GAS","JUMPDEST","PUSH1","PUSH2","PUSH3","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH30","PUSH31","PUSH32","DUP1","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","SWAP1","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","LOG0","LOG1","LOG2","LOG3","LOG4","CREATE","CALL","CALLCODE","RETURN","DELEGATECALL","CREATE2","STATICCALL","REVERT","INVALID","SELFDESTRUCT","codes","names","EVM","constructor","code","functionHashes","eventHashes","pc","stack","Stack","memory","opcodes","instructions","storage","jumps","mappings","layer","halted","functions","variables","events","gasUsed","conditions","Uint8Array","this","fromHex","replace","clone","getBytecode","toHex","getOpcodes","length","index","currentOp","opcode","name","toString","padStart","toUpperCase","pushData","push","startsWith","pushDataLength","subarray","getFunctions","Set","filter","map","hash","getEvents","containsOpcode","Error","currentOpcode","includes","getJumpDestinations","getSwarmHash","match","getABI","abi","parse","Object","keys","forEach","key","item","type","label","split","payable","constant","reset","decompile","instructionTree","functionName","join","stringifyInstructions","isERC165","every","v","hex2a","hexx","hex","str","substr","String","fromCharCode","parseInt","isHex","h","test","data","repeat","pieces","stringLength","isNaN","buffer","reduce","elem","Transaction","left","right","wrapped","_opcode","pop","state","mod","size","address","blockNumber","position","gas","value","memoryStart","memoryLength","outputStart","outputLength","throwOnFail","console","log","startLocation","copyLength","memoryLocation","location","SIG","inst","substring","shift","equal","PUSH","BigInt","DUP","dup","SWAP","swap","_state","bad","valid","jumpLocation","jumpLocationData","find","op","Number","jumpIndex","indexOf","updateCallDataLoad","types","prototype","hasOwnProperty","call","argNumber","findReturns","returns","items","deepReturns","TopLevelFunction","visibility","REQUIRE","condition","argumentTypes","slice","returnItem","Variable","ifTrue","ifFalse","skipped","true","false","jumpCondition","o","trueClone","trueCloneTree","falseClone","falseCloneTree","functionClone","functionCloneTree","fullFunction","structlocation","structs","LOG","topics","eventName","topicsCount","eventTopic","indexedCount","storeLocation","storeData","static","returnDataPosition","returnDataSize","memoryPosition","parseMapping","item2","MappingLoad","count","mappingName","mappingItems","mappingLocation","mappingItem","mappingParts","values","MappingStore","variableName","elements","unshift","secondPosition","firstValue","secondValue","parseSingle","Buffer","from","transactionObject","blockHash","gasPrice","input","to","setInput","getFunctionHash","getFunction","functionHash","getFunctionName","rawFunction","getRawArguments","getArguments","_descriptive","functionArguments","rawFunctionArguments","result","functionArgumentType","functionArgument","isContractCreation","stateEvents","stateEventValues","output","event","eventArguments","stateEvent","e","functionInstance","fullFunctionName","fullFunctionArguments","indentation","lines","instruction","falseInstructions","debugLevel","elseOrElseIf","trim","l","stringifyMapping","mapping","mappingKey","mappingValue","deepMapping","mappingChild","mappingChild2","_index","struct","variable","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}