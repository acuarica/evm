{"version":3,"file":"EVM.js","mappings":"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AC,SAAW,IACX,EAAA5L,OAAS,IACT,EAAA6L,aAAe,IACf,EAAAC,QAAU,IACV,EAAAC,WAAa,IACb,EAAA9L,OAAS,IACT,EAAAC,QAAU,IACV,EAAAC,aAAe,IAEf,EAAAlB,MAAQ,CACjB,EAAM,OACN,EAAM,MACN,EAAM,MACN,EAAM,MACN,EAAM,MACN,EAAM,OACN,EAAM,MACN,EAAM,OACN,EAAM,SACN,EAAM,SACN,GAAM,MACN,GAAM,aACN,GAAM,KACN,GAAM,KACN,GAAM,MACN,GAAM,MACN,GAAM,KACN,GAAM,SACN,GAAM,MACN,GAAM,KACN,GAAM,MACN,GAAM,MACN,GAAM,OACN,GAAM,MACN,GAAM,MACN,GAAM,MACN,GAAM,OACN,GAAM,UACN,GAAM,UACN,GAAM,SACN,GAAM,SACN,GAAM,YACN,GAAM,eACN,GAAM,eACN,GAAM,eACN,GAAM,WACN,GAAM,WACN,GAAM,WACN,GAAM,cACN,GAAM,cACN,GAAM,iBACN,GAAM,iBACN,GAAM,cACN,GAAM,YACN,GAAM,WACN,GAAM,YACN,GAAM,SACN,GAAM,aACN,GAAM,WACN,GAAM,MACN,GAAM,QACN,GAAM,SACN,GAAM,UACN,GAAM,QACN,GAAM,SACN,GAAM,OACN,GAAM,QACN,GAAM,KACN,GAAM,QACN,GAAM,MACN,GAAM,WACN,GAAM,QACN,GAAM,QACN,GAAM,QACN,GAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IA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EAEA,IAAIqf,OAAO,GAAKrf,EAAK/D,QAAU+D,CAE9C,EAEA,UAIA,UAAgBA,IACZ,GAAIyjB,EAAMzjB,GAAO,CACb,MAAM2jB,EAAS3jB,EAAK0S,MAAM,YAC1B,GAAsB,IAAlBiR,EAAO1nB,QAA4C,KAA5B4G,SAAS8gB,EAAO,GAAI,IAAY,CACvD,MAAMC,EAAyC,EAA1B/gB,SAAS8gB,EAAO,GAAI,IAEzC,MAAO,IADYrB,EAAMqB,EAAO,GAAG7gB,OAAO,EAAG8gB,IACnB,IACvB,OAAKpU,MAAM3M,SAAS7C,EAAM,KAGtBA,EAFA6C,SAAS7C,EAAM,IAAIM,WAK9B,OAAON,iFClCf,gBACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,WACA,WAEA,UAAe,CACXiS,KAAA,UACA6D,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,KAAM,UACNC,IAAA,UACAC,KAAM,UACNC,OAAA,UACAC,OAAA,UACAC,IAAA,UACAC,WAAA,UACAC,GAAA,UACAC,GAAA,UACAC,IAAK,UACLC,IAAK,UACLC,GAAA,UACAC,OAAA,UACAC,IAAA,UACAC,GAAA,UACAC,IAAA,UACAC,IAAA,UACAC,KAAA,UACAC,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,KAAA,UACAC,QAAA,UACAC,QAAA,UACAC,OAAA,UACAC,OAAA,UACAC,UAAA,UACAC,aAAA,UACAC,aAAA,UACAC,aAAA,UACAC,SAAA,UACAC,SAAA,UACAC,SAAA,UACAC,YAAA,UACAC,YAAA,UACAC,eAAA,UACAC,eAAA,UACAC,YAAA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","sources":["webpack://evm/webpack/universalModuleDefinition","webpack://evm/./node_modules/base64-js/index.js","webpack://evm/./node_modules/buffer/index.js","webpack://evm/./node_modules/ieee754/index.js","webpack://evm/./src/classes/evm.class.ts","webpack://evm/./src/classes/stack.class.ts","webpack://evm/./src/classes/tx.class.ts","webpack://evm/./src/index.ts","webpack://evm/./src/opcodes.ts","webpack://evm/./src/opcodes/add.ts","webpack://evm/./src/opcodes/addmod.ts","webpack://evm/./src/opcodes/address.ts","webpack://evm/./src/opcodes/and.ts","webpack://evm/./src/opcodes/balance.ts","webpack://evm/./src/opcodes/blockhash.ts","webpack://evm/./src/opcodes/byte.ts","webpack://evm/./src/opcodes/call.ts","webpack://evm/./src/opcodes/callcode.ts","webpack://evm/./src/opcodes/calldatacopy.ts","webpack://evm/./src/opcodes/calldataload.ts","webpack://evm/./src/opcodes/calldatasize.ts","webpack://evm/./src/opcodes/caller.ts","webpack://evm/./src/opcodes/callvalue.ts","webpack://evm/./src/opcodes/codecopy.ts","webpack://evm/./src/opcodes/codesize.ts","webpack://evm/./src/opcodes/coinbase.ts","webpack://evm/./src/opcodes/create.ts","webpack://evm/./src/opcodes/create2.ts","webpack://evm/./src/opcodes/delegatecall.ts","webpack://evm/./src/opcodes/difficulty.ts","webpack://evm/./src/opcodes/div.ts","webpack://evm/./src/opcodes/dup.ts","webpack://evm/./src/opcodes/eq.ts","webpack://evm/./src/opcodes/exp.ts","webpack://evm/./src/opcodes/extcodecopy.ts","webpack://evm/./src/opcodes/extcodehash.ts","webpack://evm/./src/opcodes/extcodesize.ts","webpack://evm/./src/opcodes/gas.ts","webpack://evm/./src/opcodes/gaslimit.ts","webpack://evm/./src/opcodes/gasprice.ts","webpack://evm/./src/opcodes/gt.ts","webpack://evm/./src/opcodes/invalid.ts","webpack://evm/./src/opcodes/iszero.ts","webpack://evm/./src/opcodes/jump.ts","webpack://evm/./src/opcodes/jumpdest.ts","webpack://evm/./src/opcodes/jumpi.ts","webpack://evm/./src/opcodes/log.ts","webpack://evm/./src/opcodes/lt.ts","webpack://evm/./src/opcodes/mload.ts","webpack://evm/./src/opcodes/mod.ts","webpack://evm/./src/opcodes/msize.ts","webpack://evm/./src/opcodes/mstore.ts","webpack://evm/./src/opcodes/mul.ts","webpack://evm/./src/opcodes/mulmod.ts","webpack://evm/./src/opcodes/not.ts","webpack://evm/./src/opcodes/number.ts","webpack://evm/./src/opcodes/or.ts","webpack://evm/./src/opcodes/origin.ts","webpack://evm/./src/opcodes/pc.ts","webpack://evm/./src/opcodes/pop.ts","webpack://evm/./src/opcodes/push.ts","webpack://evm/./src/opcodes/return.ts","webpack://evm/./src/opcodes/returndatacopy.ts","webpack://evm/./src/opcodes/returndatasize.ts","webpack://evm/./src/opcodes/revert.ts","webpack://evm/./src/opcodes/sar.ts","webpack://evm/./src/opcodes/selfdestruct.ts","webpack://evm/./src/opcodes/sha3.ts","webpack://evm/./src/opcodes/shl.ts","webpack://evm/./src/opcodes/shr.ts","webpack://evm/./src/opcodes/signextend.ts","webpack://evm/./src/opcodes/sload.ts","webpack://evm/./src/opcodes/sstore.ts","webpack://evm/./src/opcodes/staticcall.ts","webpack://evm/./src/opcodes/stop.ts","webpack://evm/./src/opcodes/sub.ts","webpack://evm/./src/opcodes/swap.ts","webpack://evm/./src/opcodes/timestamp.ts","webpack://evm/./src/opcodes/xor.ts","webpack://evm/./src/utils/hex.ts","webpack://evm/./src/utils/opcodes.ts","webpack://evm/./src/utils/stringify.ts","webpack://evm/./src/utils/stringifyEvents.ts","webpack://evm/./src/utils/stringifyFunctions.ts","webpack://evm/./src/utils/stringifyInstructions.ts","webpack://evm/./src/utils/stringifyMappings.ts","webpack://evm/./src/utils/stringifyStructs.ts","webpack://evm/./src/utils/stringifyVariables.ts","webpack://evm/webpack/bootstrap","webpack://evm/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","import opcodeFunctions from '../utils/opcodes';\nimport stringifyEvents from '../utils/stringifyEvents';\nimport stringifyStructs from '../utils/stringifyStructs';\nimport stringifyMappings from '../utils/stringifyMappings';\nimport stringifyVariables from '../utils/stringifyVariables';\nimport stringifyFunctions from '../utils/stringifyFunctions';\nimport stringifyInstructions from '../utils/stringifyInstructions';\nimport { Stack } from './stack.class';\nimport { Opcode } from '../opcode.interface';\nimport {\n    STOP,\n    RETURN,\n    REVERT,\n    INVALID,\n    PUSH1,\n    PUSH32,\n    JUMPDEST,\n    SELFDESTRUCT,\n    codes,\n    names,\n} from '../opcodes';\n\ninterface Event {\n    [key: string]: any;\n}\n\ninterface Instruction {\n    name: string;\n    type?: string;\n    wrapped?: boolean;\n}\ninterface Variable {\n    [key: string]: any;\n}\n\ninterface Mapping {\n    [key: string]: any;\n}\n\nexport class EVM {\n    pc = 0;\n    stack: Stack = new Stack();\n    memory: any = {};\n    opcodes: Opcode[] = [];\n    instructions: Instruction[] = [];\n    storage: any = {};\n    jumps: any = {};\n    code: Buffer;\n    mappings: Mapping = {};\n    layer = 0;\n    halted = false;\n    functions: any = {};\n    variables: Variable = {};\n    events: Event = {};\n    gasUsed = 0;\n    conditions: any = [];\n\n    constructor(\n        code: string | Buffer,\n        readonly functionHashes: { [s: string]: string },\n        readonly eventHashes: { [s: string]: string }\n    ) {\n        if (code instanceof Buffer) {\n            this.code = code;\n        } else {\n            this.code = Buffer.from(code.replace('0x', ''), 'hex');\n        }\n    }\n\n    clone(): EVM {\n        const clone = new EVM(this.code, this.functionHashes, this.eventHashes);\n        clone.pc = this.pc;\n        clone.opcodes = this.opcodes;\n        clone.stack = this.stack.clone();\n        clone.memory = { ...this.memory };\n        clone.storage = this.storage;\n        clone.jumps = { ...this.jumps };\n        clone.mappings = this.mappings;\n        clone.layer = this.layer + 1;\n        clone.functions = this.functions;\n        clone.variables = this.variables;\n        clone.events = this.events;\n        clone.gasUsed = this.gasUsed;\n        clone.conditions = [...this.conditions];\n        return clone;\n    }\n\n    getBytecode(): string {\n        return '0x' + this.code.toString('hex');\n    }\n\n    getOpcodes(): Opcode[] {\n        if (this.opcodes.length === 0) {\n            for (let index = 0; index < this.code.length; index++) {\n                const currentOp: Opcode = {\n                    pc: index,\n                    opcode: this.code[index],\n                    name: 'INVALID',\n                };\n                if (currentOp.opcode in codes) {\n                    currentOp.name = (codes as any)[this.code[index]];\n                }\n                this.opcodes.push(currentOp);\n                if (currentOp.name.startsWith('PUSH')) {\n                    const pushDataLength = this.code[index] - 0x5f;\n                    const pushData = this.code.slice(index + 1, index + pushDataLength + 1);\n                    currentOp.pushData = pushData;\n                    index += pushDataLength;\n                }\n            }\n        }\n        return this.opcodes;\n    }\n\n    getFunctions(): string[] {\n        return [\n            ...new Set(\n                this.getOpcodes()\n                    .filter(opcode => opcode.name === 'PUSH4')\n                    .map(opcode => (opcode.pushData ? opcode.pushData.toString('hex') : ''))\n                    .filter(hash => hash in this.functionHashes)\n                    .map(hash => this.functionHashes[hash])\n            ),\n        ];\n    }\n\n    getEvents(): string[] {\n        return [\n            ...new Set(\n                this.getOpcodes()\n                    .filter(opcode => opcode.name === 'PUSH32')\n                    .map(opcode => (opcode.pushData ? opcode.pushData.toString('hex') : ''))\n                    .filter(hash => hash in this.eventHashes)\n                    .map(hash => this.eventHashes[hash])\n            ),\n        ];\n    }\n\n    containsOpcode(opcode: number | string): boolean {\n        let halted = false;\n        if (typeof opcode === 'string' && opcode in names) {\n            opcode = (names as any)[opcode];\n        } else if (typeof opcode === 'string') {\n            throw new Error('Invalid opcode provided');\n        }\n        for (let index = 0; index < this.code.length; index++) {\n            const currentOpcode = this.code[index];\n            if (currentOpcode === opcode && !halted) {\n                return true;\n            } else if (currentOpcode === JUMPDEST) {\n                halted = false;\n            } else if ([STOP, RETURN, REVERT, INVALID, SELFDESTRUCT].includes(currentOpcode)) {\n                halted = true;\n            } else if (currentOpcode >= PUSH1 && currentOpcode <= PUSH32) {\n                index += currentOpcode - PUSH1 + 0x01;\n            }\n        }\n        return false;\n    }\n\n    getJumpDestinations(): number[] {\n        return this.getOpcodes()\n            .filter(opcode => opcode.name === 'JUMPDEST')\n            .map(opcode => opcode.pc);\n    }\n\n    getSwarmHash(): string | false {\n        const regex = /a165627a7a72305820([a-f0-9]{64})0029$/;\n        const bytecode = this.getBytecode();\n        const match = bytecode.match(regex);\n        if (match && match[1]) {\n            return 'bzzr://' + match[1];\n        } else {\n            return false;\n        }\n    }\n\n    getABI(): any {\n        const abi: any = [];\n        if (this.instructions.length === 0) {\n            this.parse();\n        }\n        Object.keys(this.functions).forEach((key: string) => {\n            const item: any = abi.push({ type: 'function' });\n            item.name = this.functions[key].label.split('(')[0];\n            item.payable = this.functions[key].payable;\n            item.constant = this.functions[key].constant;\n        });\n    }\n\n    reset(): void {\n        this.pc = 0;\n        this.instructions = [];\n        this.stack.reset();\n        this.memory = {};\n        this.storage = {};\n        this.jumps = {};\n        this.mappings = {};\n        this.functions = {};\n        this.variables = {};\n        this.events = {};\n        this.gasUsed = 0;\n    }\n\n    parse(): Instruction[] {\n        if (this.instructions.length === 0) {\n            const opcodes = this.getOpcodes();\n            for (this.pc; this.pc < opcodes.length && !this.halted; this.pc++) {\n                const opcode = opcodes[this.pc];\n                if (opcode.name in opcodeFunctions) {\n                    opcodeFunctions[opcode.name as keyof typeof opcodeFunctions](opcode, this);\n                } else {\n                    throw new Error('Unknown OPCODE: ' + opcode.name);\n                }\n            }\n        }\n        return this.instructions;\n    }\n\n    decompile(): string {\n        const instructionTree = this.parse();\n        const events = stringifyEvents(this.events, this.getEvents());\n        const structs = stringifyStructs(this.mappings);\n        const mappings = stringifyMappings(this.mappings);\n        const variables = stringifyVariables(this.variables);\n        const functions = Object.keys(this.functions)\n            .map((functionName: string) =>\n                stringifyFunctions(functionName, this.functions[functionName], this.functionHashes)\n            )\n            .join('');\n        const code = stringifyInstructions(instructionTree);\n        return events + structs + mappings + variables + functions + code;\n    }\n\n    isERC165(): boolean {\n        return ['supportsInterface(bytes4)'].every(v => this.getFunctions().includes(v));\n    }\n}\n","export class Stack {\n    elements: any[];\n\n    constructor() {\n        this.elements = [];\n    }\n\n    push(item: any): void {\n        if (this.elements.length >= 1024) {\n            throw new Error('Stack too deep');\n        } else {\n            this.elements.unshift(item);\n        }\n    }\n\n    pop(): any {\n        if (this.elements.length === 0) {\n            throw new Error('POP with empty stack');\n        } else {\n            return this.elements.shift();\n        }\n    }\n\n    duplicate(position: number): void {\n        if (position < 0 || position > 15) {\n            throw new Error('Unsupported position for duplication operation');\n        } else if (!(position in this.elements)) {\n            throw new Error(\n                \"Invalid duplication operation, provided position wasn't found in stack\"\n            );\n        } else {\n            this.push(this.elements[position]);\n        }\n    }\n\n    swap(secondPosition: number): void {\n        if (secondPosition < 1 || secondPosition > 16) {\n            throw new Error('Unsupported position for swap operation');\n        } else if (!(secondPosition in this.elements)) {\n            throw new Error(\"Invalid swap operation, provided position wasn't found in stack\");\n        } else {\n            const firstValue = this.elements[0];\n            const secondValue = this.elements[secondPosition];\n            this.elements[0] = secondValue;\n            this.elements[secondPosition] = firstValue;\n        }\n    }\n\n    clone(): Stack {\n        const stack = new Stack();\n        stack.elements = [...this.elements];\n        return stack;\n    }\n\n    reset(): void {\n        this.elements = [];\n    }\n}\n","const parseSingle = (data: any, type: any) => {\n    if (type === 'string') {\n        return '\"' + Buffer.from(data, 'hex').toString('utf8') + '\"';\n    } else if (type === 'address') {\n        return '0x' + data.substring(24);\n    } else if (type === 'uint256' || type === 'uint8') {\n        return BigInt('0x' + data).toString();\n    } else if (type === 'bool') {\n        return (BigInt('0x' + data) !== 0n).toString();\n    } else {\n        return data;\n    }\n};\n\nexport class Transaction {\n    blockHash?: string;\n    blockNumber?: number;\n    from?: string;\n    gas?: number;\n    gasPrice?: number;\n    input?: string;\n    to?: string;\n    value?: number;\n\n    constructor(transactionObject?: any) {\n        if (transactionObject) {\n            if ('blockHash' in transactionObject) {\n                this.blockHash = transactionObject.blockHash;\n            }\n            if ('blockNumber' in transactionObject) {\n                this.blockNumber = transactionObject.blockNumber;\n            }\n            if ('from' in transactionObject) {\n                this.from = transactionObject.from;\n            }\n            if ('gas' in transactionObject) {\n                this.gas = transactionObject.gas;\n            }\n            if ('gasPrice' in transactionObject) {\n                this.gasPrice = transactionObject.gasPrice;\n            }\n            if ('input' in transactionObject) {\n                this.input = transactionObject.input.replace('0x', '');\n            }\n            if ('to' in transactionObject) {\n                this.to = transactionObject.to;\n            }\n            if ('value' in transactionObject) {\n                this.value = transactionObject.value;\n            }\n        }\n    }\n\n    setInput(input: string): void {\n        this.input = input.replace('0x', '');\n    }\n\n    getFunctionHash(): string | false {\n        if (this.input && this.input.length >= 8) {\n            return this.input.substr(0, 8);\n        } else {\n            return false;\n        }\n    }\n\n    getFunction(functionHashes: { [s: string]: string }): string | false {\n        const functionHash = this.getFunctionHash();\n        if (functionHash && functionHash in functionHashes) {\n            return (functionHashes as any)[functionHash];\n        } else {\n            return false;\n        }\n    }\n\n    getFunctionName(functionHashes: { [s: string]: string }): string | false {\n        const rawFunction = this.getFunction(functionHashes);\n        if (rawFunction) {\n            return rawFunction.split('(')[0];\n        } else {\n            return false;\n        }\n    }\n\n    getRawArguments(): string[] {\n        if (this.input && this.input.length >= 70) {\n            return this.input.substr(8).match(/.{1,64}/g)!;\n        } else {\n            return [];\n        }\n    }\n\n    getArguments(functionHashes: { [s: string]: string }, _descriptive = true): string[] {\n        const functionName = this.getFunction(functionHashes);\n        const functionArguments = this.getRawArguments();\n        if (functionName && this.input) {\n            const rawFunctionArguments = functionName.split('(')[1].slice(0, -1).split(',');\n            if (\n                rawFunctionArguments.length === 1 &&\n                rawFunctionArguments[0] === '' &&\n                functionArguments.length === 0\n            ) {\n                return [];\n            } else {\n                const result: string[] = [];\n                for (let i = 0; i < rawFunctionArguments.length; i++) {\n                    const functionArgumentType = rawFunctionArguments[i] || 'unknown';\n                    const functionArgument = functionArguments[i];\n                    if (functionArgumentType === 'string') {\n                        const location = Number(BigInt('0x' + functionArgument) / 32n);\n                        const length = Number(BigInt('0x' + functionArguments[location]) * 2n);\n                        const data = this.input.substring(8).substr((location + 1) * 64, length);\n                        result.push(parseSingle(data, functionArgumentType));\n                    } else {\n                        result.push(parseSingle(functionArgument, functionArgumentType));\n                    }\n                }\n                return result;\n            }\n        } else {\n            return functionArguments;\n        }\n    }\n\n    isContractCreation(): boolean {\n        return this.to === null;\n    }\n}\n","export { Transaction } from './classes/tx.class';\nexport { EVM } from './classes/evm.class';\nexport * from './opcodes';\n","export const STOP = 0x00;\nexport const ADD = 0x01;\nexport const MUL = 0x02;\nexport const SUB = 0x03;\nexport const DIV = 0x04;\nexport const SDIV = 0x05;\nexport const MOD = 0x06;\nexport const SMOD = 0x07;\nexport const ADDMOD = 0x08;\nexport const MULMOD = 0x09;\nexport const EXP = 0x0a;\nexport const SIGNEXTEND = 0x0b;\nexport const LT = 0x10;\nexport const GT = 0x11;\nexport const SLT = 0x12;\nexport const SGT = 0x13;\nexport const EQ = 0x14;\nexport const ISZERO = 0x15;\nexport const AND = 0x16;\nexport const OR = 0x17;\nexport const XOR = 0x18;\nexport const NOT = 0x19;\nexport const BYTE = 0x1a;\nexport const SHL = 0x1b;\nexport const SHR = 0x1c;\nexport const SAR = 0x1d;\nexport const SHA3 = 0x20;\nexport const ADDRESS = 0x30;\nexport const BALANCE = 0x31;\nexport const ORIGIN = 0x32;\nexport const CALLER = 0x33;\nexport const CALLVALUE = 0x34;\nexport const CALLDATALOAD = 0x35;\nexport const CALLDATASIZE = 0x36;\nexport const CALLDATACOPY = 0x37;\nexport const CODESIZE = 0x38;\nexport const CODECOPY = 0x39;\nexport const GASPRICE = 0x3a;\nexport const EXTCODESIZE = 0x3b;\nexport const EXTCODECOPY = 0x3c;\nexport const RETURNDATASIZE = 0x3d;\nexport const RETURNDATACOPY = 0x3e;\nexport const EXTCODEHASH = 0x3f;\nexport const BLOCKHASH = 0x40;\nexport const COINBASE = 0x41;\nexport const TIMESTAMP = 0x42;\nexport const NUMBER = 0x43;\nexport const DIFFICULTY = 0x44;\nexport const GASLIMIT = 0x45;\nexport const POP = 0x50;\nexport const MLOAD = 0x51;\nexport const MSTORE = 0x52;\nexport const MSTORE8 = 0x53;\nexport const SLOAD = 0x54;\nexport const SSTORE = 0x55;\nexport const JUMP = 0x56;\nexport const JUMPI = 0x57;\nexport const PC = 0x58;\nexport const MSIZE = 0x59;\nexport const GAS = 0x5a;\nexport const JUMPDEST = 0x5b;\nexport const PUSH1 = 0x60;\nexport const PUSH2 = 0x61;\nexport const PUSH3 = 0x62;\nexport const PUSH4 = 0x63;\nexport const PUSH5 = 0x64;\nexport const PUSH6 = 0x65;\nexport const PUSH7 = 0x66;\nexport const PUSH8 = 0x67;\nexport const PUSH9 = 0x68;\nexport const PUSH10 = 0x69;\nexport const PUSH11 = 0x6a;\nexport const PUSH12 = 0x6b;\nexport const PUSH13 = 0x6c;\nexport const PUSH14 = 0x6d;\nexport const PUSH15 = 0x6e;\nexport const PUSH16 = 0x6f;\nexport const PUSH17 = 0x70;\nexport const PUSH18 = 0x71;\nexport const PUSH19 = 0x72;\nexport const PUSH20 = 0x73;\nexport const PUSH21 = 0x74;\nexport const PUSH22 = 0x75;\nexport const PUSH23 = 0x76;\nexport const PUSH24 = 0x77;\nexport const PUSH25 = 0x78;\nexport const PUSH26 = 0x79;\nexport const PUSH27 = 0x7a;\nexport const PUSH28 = 0x7b;\nexport const PUSH29 = 0x7c;\nexport const PUSH30 = 0x7d;\nexport const PUSH31 = 0x7e;\nexport const PUSH32 = 0x7f;\nexport const DUP1 = 0x80;\nexport const DUP2 = 0x81;\nexport const DUP3 = 0x82;\nexport const DUP4 = 0x83;\nexport const DUP5 = 0x84;\nexport const DUP6 = 0x85;\nexport const DUP7 = 0x86;\nexport const DUP8 = 0x87;\nexport const DUP9 = 0x88;\nexport const DUP10 = 0x89;\nexport const DUP11 = 0x8a;\nexport const DUP12 = 0x8b;\nexport const DUP13 = 0x8c;\nexport const DUP14 = 0x8d;\nexport const DUP15 = 0x8e;\nexport const DUP16 = 0x8f;\nexport const SWAP1 = 0x90;\nexport const SWAP2 = 0x91;\nexport const SWAP3 = 0x92;\nexport const SWAP4 = 0x93;\nexport const SWAP5 = 0x94;\nexport const SWAP6 = 0x95;\nexport const SWAP7 = 0x96;\nexport const SWAP8 = 0x97;\nexport const SWAP9 = 0x98;\nexport const SWAP10 = 0x99;\nexport const SWAP11 = 0x9a;\nexport const SWAP12 = 0x9b;\nexport const SWAP13 = 0x9c;\nexport const SWAP14 = 0x9d;\nexport const SWAP15 = 0x9e;\nexport const SWAP16 = 0x9f;\nexport const LOG0 = 0xa0;\nexport const LOG1 = 0xa1;\nexport const LOG2 = 0xa2;\nexport const LOG3 = 0xa3;\nexport const LOG4 = 0xa4;\nexport const CREATE = 0xf0;\nexport const CALL = 0xf1;\nexport const CALLCODE = 0xf2;\nexport const RETURN = 0xf3;\nexport const DELEGATECALL = 0xf4;\nexport const CREATE2 = 0xf5;\nexport const STATICCALL = 0xfa;\nexport const REVERT = 0xfd;\nexport const INVALID = 0xfe;\nexport const SELFDESTRUCT = 0xff;\n\nexport const codes = {\n    0x00: 'STOP',\n    0x01: 'ADD',\n    0x02: 'MUL',\n    0x03: 'SUB',\n    0x04: 'DIV',\n    0x05: 'SDIV',\n    0x06: 'MOD',\n    0x07: 'SMOD',\n    0x08: 'ADDMOD',\n    0x09: 'MULMOD',\n    0x0a: 'EXP',\n    0x0b: 'SIGNEXTEND',\n    0x10: 'LT',\n    0x11: 'GT',\n    0x12: 'SLT',\n    0x13: 'SGT',\n    0x14: 'EQ',\n    0x15: 'ISZERO',\n    0x16: 'AND',\n    0x17: 'OR',\n    0x18: 'XOR',\n    0x19: 'NOT',\n    0x1a: 'BYTE',\n    0x1b: 'SHL',\n    0x1c: 'SHR',\n    0x1d: 'SAR',\n    0x20: 'SHA3',\n    0x30: 'ADDRESS',\n    0x31: 'BALANCE',\n    0x32: 'ORIGIN',\n    0x33: 'CALLER',\n    0x34: 'CALLVALUE',\n    0x35: 'CALLDATALOAD',\n    0x36: 'CALLDATASIZE',\n    0x37: 'CALLDATACOPY',\n    0x38: 'CODESIZE',\n    0x39: 'CODECOPY',\n    0x3a: 'GASPRICE',\n    0x3b: 'EXTCODESIZE',\n    0x3c: 'EXTCODECOPY',\n    0x3d: 'RETURNDATASIZE',\n    0x3e: 'RETURNDATACOPY',\n    0x3f: 'EXTCODEHASH',\n    0x40: 'BLOCKHASH',\n    0x41: 'COINBASE',\n    0x42: 'TIMESTAMP',\n    0x43: 'NUMBER',\n    0x44: 'DIFFICULTY',\n    0x45: 'GASLIMIT',\n    0x50: 'POP',\n    0x51: 'MLOAD',\n    0x52: 'MSTORE',\n    0x53: 'MSTORE8',\n    0x54: 'SLOAD',\n    0x55: 'SSTORE',\n    0x56: 'JUMP',\n    0x57: 'JUMPI',\n    0x58: 'PC',\n    0x59: 'MSIZE',\n    0x5a: 'GAS',\n    0x5b: 'JUMPDEST',\n    0x60: 'PUSH1',\n    0x61: 'PUSH2',\n    0x62: 'PUSH3',\n    0x63: 'PUSH4',\n    0x64: 'PUSH5',\n    0x65: 'PUSH6',\n    0x66: 'PUSH7',\n    0x67: 'PUSH8',\n    0x68: 'PUSH9',\n    0x69: 'PUSH10',\n    0x6a: 'PUSH11',\n    0x6b: 'PUSH12',\n    0x6c: 'PUSH13',\n    0x6d: 'PUSH14',\n    0x6e: 'PUSH15',\n    0x6f: 'PUSH16',\n    0x70: 'PUSH17',\n    0x71: 'PUSH18',\n    0x72: 'PUSH19',\n    0x73: 'PUSH20',\n    0x74: 'PUSH21',\n    0x75: 'PUSH22',\n    0x76: 'PUSH23',\n    0x77: 'PUSH24',\n    0x78: 'PUSH25',\n    0x79: 'PUSH26',\n    0x7a: 'PUSH27',\n    0x7b: 'PUSH28',\n    0x7c: 'PUSH29',\n    0x7d: 'PUSH30',\n    0x7e: 'PUSH31',\n    0x7f: 'PUSH32',\n    0x80: 'DUP1',\n    0x81: 'DUP2',\n    0x82: 'DUP3',\n    0x83: 'DUP4',\n    0x84: 'DUP5',\n    0x85: 'DUP6',\n    0x86: 'DUP7',\n    0x87: 'DUP8',\n    0x88: 'DUP9',\n    0x89: 'DUP10',\n    0x8a: 'DUP11',\n    0x8b: 'DUP12',\n    0x8c: 'DUP13',\n    0x8d: 'DUP14',\n    0x8e: 'DUP15',\n    0x8f: 'DUP16',\n    0x90: 'SWAP1',\n    0x91: 'SWAP2',\n    0x92: 'SWAP3',\n    0x93: 'SWAP4',\n    0x94: 'SWAP5',\n    0x95: 'SWAP6',\n    0x96: 'SWAP7',\n    0x97: 'SWAP8',\n    0x98: 'SWAP9',\n    0x99: 'SWAP10',\n    0x9a: 'SWAP11',\n    0x9b: 'SWAP12',\n    0x9c: 'SWAP13',\n    0x9d: 'SWAP14',\n    0x9e: 'SWAP15',\n    0x9f: 'SWAP16',\n    0xa0: 'LOG0',\n    0xa1: 'LOG1',\n    0xa2: 'LOG2',\n    0xa3: 'LOG3',\n    0xa4: 'LOG4',\n    0xf0: 'CREATE',\n    0xf1: 'CALL',\n    0xf2: 'CALLCODE',\n    0xf3: 'RETURN',\n    0xf4: 'DELEGATECALL',\n    0xf5: 'CREATE2',\n    0xfa: 'STATICCALL',\n    0xfd: 'REVERT',\n    0xfe: 'INVALID',\n    0xff: 'SELFDESTRUCT',\n};\n\nexport const names = {\n    STOP: 0x00,\n    ADD: 0x01,\n    MUL: 0x02,\n    SUB: 0x03,\n    DIV: 0x04,\n    SDIV: 0x05,\n    MOD: 0x06,\n    SMOD: 0x07,\n    ADDMOD: 0x08,\n    MULMOD: 0x09,\n    EXP: 0x0a,\n    SIGNEXTEND: 0x0b,\n    LT: 0x10,\n    GT: 0x11,\n    SLT: 0x12,\n    SGT: 0x13,\n    EQ: 0x14,\n    ISZERO: 0x15,\n    AND: 0x16,\n    OR: 0x17,\n    XOR: 0x18,\n    NOT: 0x19,\n    BYTE: 0x1a,\n    SHL: 0x1b,\n    SHR: 0x1c,\n    SAR: 0x1d,\n    SHA3: 0x20,\n    ADDRESS: 0x30,\n    BALANCE: 0x31,\n    ORIGIN: 0x32,\n    CALLER: 0x33,\n    CALLVALUE: 0x34,\n    CALLDATALOAD: 0x35,\n    CALLDATASIZE: 0x36,\n    CALLDATACOPY: 0x37,\n    CODESIZE: 0x38,\n    CODECOPY: 0x39,\n    GASPRICE: 0x3a,\n    EXTCODESIZE: 0x3b,\n    EXTCODECOPY: 0x3c,\n    RETURNDATASIZE: 0x3d,\n    RETURNDATACOPY: 0x3e,\n    EXTCODEHASH: 0x3f,\n    BLOCKHASH: 0x40,\n    COINBASE: 0x41,\n    TIMESTAMP: 0x42,\n    NUMBER: 0x43,\n    DIFFICULTY: 0x44,\n    GASLIMIT: 0x45,\n    POP: 0x50,\n    MLOAD: 0x51,\n    MSTORE: 0x52,\n    MSTORE8: 0x53,\n    SLOAD: 0x54,\n    SSTORE: 0x55,\n    JUMP: 0x56,\n    JUMPI: 0x57,\n    PC: 0x58,\n    MSIZE: 0x59,\n    GAS: 0x5a,\n    JUMPDEST: 0x5b,\n    PUSH1: 0x60,\n    PUSH2: 0x61,\n    PUSH3: 0x62,\n    PUSH4: 0x63,\n    PUSH5: 0x64,\n    PUSH6: 0x65,\n    PUSH7: 0x66,\n    PUSH8: 0x67,\n    PUSH9: 0x68,\n    PUSH10: 0x69,\n    PUSH11: 0x6a,\n    PUSH12: 0x6b,\n    PUSH13: 0x6c,\n    PUSH14: 0x6d,\n    PUSH15: 0x6e,\n    PUSH16: 0x6f,\n    PUSH17: 0x70,\n    PUSH18: 0x71,\n    PUSH19: 0x72,\n    PUSH20: 0x73,\n    PUSH21: 0x74,\n    PUSH22: 0x75,\n    PUSH23: 0x76,\n    PUSH24: 0x77,\n    PUSH25: 0x78,\n    PUSH26: 0x79,\n    PUSH27: 0x7a,\n    PUSH28: 0x7b,\n    PUSH29: 0x7c,\n    PUSH30: 0x7d,\n    PUSH31: 0x7e,\n    PUSH32: 0x7f,\n    DUP1: 0x80,\n    DUP2: 0x81,\n    DUP3: 0x82,\n    DUP4: 0x83,\n    DUP5: 0x84,\n    DUP6: 0x85,\n    DUP7: 0x86,\n    DUP8: 0x87,\n    DUP9: 0x88,\n    DUP10: 0x89,\n    DUP11: 0x8a,\n    DUP12: 0x8b,\n    DUP13: 0x8c,\n    DUP14: 0x8d,\n    DUP15: 0x8e,\n    DUP16: 0x8f,\n    SWAP1: 0x90,\n    SWAP2: 0x91,\n    SWAP3: 0x92,\n    SWAP4: 0x93,\n    SWAP5: 0x94,\n    SWAP6: 0x95,\n    SWAP7: 0x96,\n    SWAP8: 0x97,\n    SWAP9: 0x98,\n    SWAP10: 0x99,\n    SWAP11: 0x9a,\n    SWAP12: 0x9b,\n    SWAP13: 0x9c,\n    SWAP14: 0x9d,\n    SWAP15: 0x9e,\n    SWAP16: 0x9f,\n    LOG0: 0xa0,\n    LOG1: 0xa1,\n    LOG2: 0xa2,\n    LOG3: 0xa3,\n    LOG4: 0xa4,\n    CREATE: 0xf0,\n    CALL: 0xf1,\n    CALLCODE: 0xf2,\n    RETURN: 0xf3,\n    DELEGATECALL: 0xf4,\n    CREATE2: 0xf5,\n    STATICCALL: 0xfa,\n    REVERT: 0xfd,\n    INVALID: 0xfe,\n    SELFDESTRUCT: 0xff,\n};\n\nexport default {\n    ...codes,\n    ...names,\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class ADD {\n    readonly name: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'ADD';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' + ' + stringify(this.right);\n    }\n\n    get type() {\n        if (this.left.type === this.right.type) {\n            return this.left.type;\n        } else if (!this.left.type && this.right.type) {\n            return this.right.type;\n        } else if (!this.right.type && this.left.type) {\n            return this.left.type;\n        } else {\n            return false;\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    state.stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint'\n            ? left + right\n            : typeof left === 'bigint' && left === 0n\n            ? right\n            : typeof right === 'bigint' && right === 0n\n            ? left\n            : new ADD(left, right)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { ADD } from './add';\nimport { MOD } from './mod';\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    const mod = state.stack.pop();\n    state.stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint' && typeof mod === 'bigint'\n            ? (left + right) % mod\n            : typeof left === 'bigint' && typeof right === 'bigint'\n            ? new MOD(left + right, mod)\n            : new MOD(new ADD(left, right), mod)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class ADDRESS {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'ADDRESS';\n        this.type = 'address';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'this';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new ADDRESS());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class AND {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'AND';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' && ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left & right);\n    } else if (typeof left === 'bigint' && /^[f]+$/.test(left.toString(16))) {\n        right.size = left.toString(16).length;\n        state.stack.push(right);\n    } else if (typeof right === 'bigint' && /^[f]+$/.test(right.toString(16))) {\n        left.size = right.toString(16).length;\n        state.stack.push(left);\n        /*} else if (\n        typeof left === 'bigint' &&\n        left.equals('1461501637330902918203684832716283019655932542975')\n    ) {*/\n        /* 2 ** 160 */\n        /*    state.stack.push(right);\n    } else if (\n        typeof right === 'bigint' &&\n        right.equals('1461501637330902918203684832716283019655932542975')\n    ) {*/\n        /* 2 ** 160 */\n        /*    state.stack.push(left);*/\n    } else if (\n        typeof left === 'bigint' &&\n        right instanceof AND &&\n        typeof right.left === 'bigint' &&\n        left === right.left\n    ) {\n        state.stack.push(right.right);\n    } else {\n        state.stack.push(new AND(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class BALANCE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'BALANCE';\n        this.wrapped = false;\n        this.address = address;\n    }\n\n    toString() {\n        return stringify(this.address) + '.balance';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.stack.push(new BALANCE(address));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class BLOCKHASH {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly number: any;\n\n    constructor(blockNumber: any) {\n        this.name = 'BLOCKHASH';\n        this.wrapped = true;\n        this.number = blockNumber;\n    }\n\n    toString() {\n        return 'block.blockhash(' + stringify(this.number) + ')';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const blockNumber = state.stack.pop();\n    state.stack.push(new BLOCKHASH(blockNumber));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class BYTE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly position: any;\n    readonly data: any;\n\n    constructor(position: any, data: any) {\n        this.name = 'BYTE';\n        this.wrapped = true;\n        this.position = position;\n        this.data = data;\n    }\n\n    toString() {\n        return '(' + stringify(this.data) + ' >> ' + stringify(this.position) + ') & 1';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const position = state.stack.pop();\n    const data = state.stack.pop();\n    if (typeof data === 'bigint' && typeof position === 'bigint') {\n        state.stack.push((data >> position) & 1n);\n    } else {\n        state.stack.push(new BYTE(position, data));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CALL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly value: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n    readonly throwOnFail: boolean;\n\n    constructor(\n        gas: any,\n        address: any,\n        value: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'CALL';\n        this.wrapped = false;\n        this.gas = gas;\n        this.address = address;\n        this.value = value;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n        this.throwOnFail = false;\n    }\n\n    toString() {\n        if (\n            typeof this.memoryLength === 'bigint' &&\n            this.memoryLength === 0n &&\n            typeof this.outputLength === 'bigint' &&\n            this.outputLength === 0n\n        ) {\n            if (\n                this.gas.name === 'MUL' &&\n                this.gas.left.name === 'ISZERO' &&\n                typeof this.gas.right === 'bigint' &&\n                this.gas.right === 2300n\n            ) {\n                if (this.throwOnFail) {\n                    return (\n                        'address(' +\n                        stringify(this.address) +\n                        ').transfer(' +\n                        stringify(this.value) +\n                        ')'\n                    );\n                } else {\n                    return (\n                        'address(' +\n                        stringify(this.address) +\n                        ').send(' +\n                        stringify(this.value) +\n                        ')'\n                    );\n                }\n            } else {\n                return (\n                    'address(' +\n                    stringify(this.address) +\n                    ').call.gas(' +\n                    stringify(this.gas) +\n                    ').value(' +\n                    stringify(this.value) +\n                    ')'\n                );\n            }\n        } else {\n            return (\n                'call(' +\n                stringify(this.gas) +\n                ',' +\n                stringify(this.address) +\n                ',' +\n                stringify(this.value) +\n                ',' +\n                stringify(this.memoryStart) +\n                ',' +\n                stringify(this.memoryLength) +\n                ',' +\n                stringify(this.outputStart) +\n                ',' +\n                stringify(this.outputLength) +\n                ')'\n            );\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new CALL(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\n    );\n    state.memory[outputStart] = 'output';\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CALLCODE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly value: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n\n    constructor(\n        gas: any,\n        address: any,\n        value: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'CALLCODE';\n        this.wrapped = true;\n        this.gas = gas;\n        this.address = address;\n        this.value = value;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n    }\n\n    toString() {\n        return (\n            'callcode(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.value) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new CALLCODE(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class CALLDATACOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(startLocation: any, copyLength: any) {\n        this.name = 'CALLDATACOPY';\n        this.wrapped = true;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'msg.data[' +\n            this.startLocation +\n            ':(' +\n            this.startLocation +\n            '+' +\n            this.copyLength +\n            ')];'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    const startLocation = state.stack.pop();\n    const copyLength = state.stack.pop();\n    state.memory[memoryLocation] = new CALLDATACOPY(startLocation, copyLength);\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CALLDATALOAD {\n    readonly name: string;\n    readonly type?: string;\n    readonly returntype?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n\n    constructor(location: any) {\n        this.name = 'CALLDATALOAD';\n        this.wrapped = false;\n        this.location = location;\n    }\n\n    toString() {\n        if (typeof this.location === 'bigint' && this.location === 0n) {\n            return 'msg.data';\n        } else if (typeof this.location === 'bigint' && (this.location - 4n) % 32n === 0n) {\n            return '_arg' + ((this.location - 4n) / 32n).toString();\n        } else {\n            return 'msg.data[' + stringify(this.location) + ']';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const startLocation = state.stack.pop();\n    state.stack.push(new CALLDATALOAD(startLocation));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class CALLDATASIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CALLDATASIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'msg.data.length';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CALLDATASIZE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class CALLER {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CALLER';\n        this.name = 'address';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'msg.sender';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CALLER());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class CALLVALUE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CALLVALUE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'msg.value';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CALLVALUE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CODECOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(startLocation: any, copyLength: any) {\n        this.name = 'CODECOPY';\n        this.wrapped = true;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'this.code[' +\n            stringify(this.startLocation) +\n            ':(' +\n            stringify(this.startLocation) +\n            '+' +\n            stringify(this.copyLength) +\n            ')]'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    const startLocation = state.stack.pop();\n    const copyLength = state.stack.pop();\n    state.memory[memoryLocation] = new CODECOPY(startLocation, copyLength);\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class CODESIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CODESIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'this.code.length';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CODESIZE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class COINBASE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'COINBASE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.coinbase';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new COINBASE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CREATE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly value: any;\n\n    constructor(memoryStart: any, memoryLength: any, value: any) {\n        this.name = 'CREATE';\n        this.name = 'address';\n        this.wrapped = true;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.value = value;\n    }\n\n    toString() {\n        return (\n            '(new Contract(memory[' +\n            stringify(this.memoryStart) +\n            ':(' +\n            stringify(this.memoryStart) +\n            '+' +\n            stringify(this.memoryLength) +\n            ')]).value(' +\n            stringify(this.value) +\n            ')).address'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.stack.push(new CREATE(memoryStart, memoryLength, value));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CREATE2 {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly value: any;\n\n    constructor(memoryStart: any, memoryLength: any, value: any) {\n        this.name = 'CREATE2';\n        this.wrapped = true;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.value = value;\n    }\n\n    toString() {\n        return (\n            '(new Contract(memory[' +\n            stringify(this.memoryStart) +\n            ':(' +\n            stringify(this.memoryStart) +\n            '+' +\n            stringify(this.memoryLength) +\n            ')]).value(' +\n            stringify(this.value) +\n            ')).address'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.stack.push(new CREATE2(memoryStart, memoryLength, value));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class DELEGATECALL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n\n    constructor(\n        gas: any,\n        address: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'DELEGATECALL';\n        this.wrapped = true;\n        this.gas = gas;\n        this.address = address;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n    }\n\n    toString() {\n        return (\n            'delegatecall(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new DELEGATECALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class DIFFICULTY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'DIFFICULTY';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.difficulty';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new DIFFICULTY());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class DIV {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'DIV';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' / ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left / right);\n    } else if (typeof right === 'bigint' && right === 1n) {\n        state.stack.push(left);\n    } else {\n        state.stack.push(new DIV(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const duplicateLocation = parseInt(opcode.name.replace('DUP', ''), 10) - 1;\n    state.stack.duplicate(duplicateLocation);\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SIG {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly hash: string;\n\n    constructor(hash: string) {\n        this.name = 'SIG';\n        this.wrapped = false;\n        this.hash = hash;\n    }\n\n    toString() {\n        return 'msg.sig == ' + this.hash;\n    }\n}\n\nexport class EQ {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'EQ';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' == ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    let left = state.stack.pop();\n    let right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left === right ? 1n : 0n);\n    } else {\n        if (typeof left === 'bigint' && right.name === 'DIV' && typeof right.right === 'bigint') {\n            left = left * right.right;\n            right = right.left;\n        }\n        if (typeof right === 'bigint' && left.name === 'DIV' && typeof left.right === 'bigint') {\n            right = right * left.right;\n            left = left.left;\n        }\n        if (\n            typeof left === 'bigint' &&\n            /^[0]+$/.test(left.toString(16).substring(8)) &&\n            right.name === 'CALLDATALOAD' &&\n            right.location === 0n\n        ) {\n            state.stack.push(\n                new SIG(\n                    '0'.repeat(64 - left.toString(16).length) +\n                        left.toString(16).substring(0, 8 - (64 - left.toString(16).length))\n                )\n            );\n        } else if (\n            typeof right === 'bigint' &&\n            /^[0]+$/.test(right.toString(16).substring(8)) &&\n            left.name === 'CALLDATALOAD' &&\n            left.location === 0\n        ) {\n            state.stack.push(\n                new SIG(\n                    '0'.repeat(64 - right.toString(16).length) +\n                        right.toString(16).substring(0, 8 - (64 - right.toString(16).length))\n                )\n            );\n        } else {\n            state.stack.push(new EQ(left, right));\n        }\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'EXP';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' ** ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left ** right);\n    } else {\n        state.stack.push(new EXP(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODECOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(address: any, startLocation: any, copyLength: any) {\n        this.name = 'EXTCODECOPY';\n        this.wrapped = true;\n        this.address = address;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'address(' +\n            stringify(this.address) +\n            ').code[' +\n            stringify(this.startLocation) +\n            ':(' +\n            stringify(this.startLocation) +\n            '+' +\n            stringify(this.copyLength) +\n            ')]'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    const memoryLocation = state.stack.pop();\n    const startLocation = state.stack.pop();\n    const copyLength = state.stack.pop();\n    state.memory[memoryLocation] = new EXTCODECOPY(address, startLocation, copyLength);\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODEHASH {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'EXTCODEHASH';\n        this.wrapped = true;\n        this.address = address;\n    }\n\n    toString() {\n        return 'keccak256(address(' + stringify(this.address) + ').code)';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.stack.push(new EXTCODEHASH(address));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODESIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'EXTCODESIZE';\n        this.wrapped = true;\n        this.address = address;\n    }\n\n    toString() {\n        return 'address(' + stringify(this.address) + ').code.length';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.stack.push(new EXTCODESIZE(address));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class GAS {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'GAS';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'gasleft()';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new GAS());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class GASLIMIT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'GASLIMIT';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.gaslimit';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new GASLIMIT());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class GASPRICE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'GASPRICE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'tx.gasprice';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new GASPRICE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class GT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n    readonly equal: boolean;\n\n    constructor(left: any, right: any, equal = false) {\n        this.name = 'GT';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n        this.equal = equal;\n    }\n\n    toString() {\n        if (this.equal) {\n            return stringify(this.left) + ' >= ' + stringify(this.right);\n        } else {\n            return stringify(this.left) + ' > ' + stringify(this.right);\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left > right ? 1n : 0n);\n    } else {\n        state.stack.push(new GT(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class INVALID {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly opcode: any;\n\n    constructor(opcode: any) {\n        this.name = 'INVALID';\n        this.wrapped = true;\n        this.opcode = opcode;\n    }\n\n    toString() {\n        return 'revert(\"Invalid instruction (0x' + this.opcode.toString(16) + ')\");';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.halted = true;\n    state.instructions.push(new INVALID(opcode.opcode));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { LT } from './lt';\nimport { GT } from './gt';\nimport stringify from '../utils/stringify';\n\nexport class ISZERO {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly item: any;\n\n    constructor(item: any) {\n        this.name = 'ISZERO';\n        this.wrapped = true;\n        this.item = item;\n    }\n\n    toString() {\n        if (this.item.name === 'EQ') {\n            return stringify(this.item.left) + ' != ' + stringify(this.item.right);\n        } else {\n            return stringify(this.item) + ' == 0';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const item = state.stack.pop();\n    if (typeof item === 'bigint') {\n        state.stack.push(item === 0n ? 1n : 0n);\n    } else if (item.name === 'LT') {\n        if (item.equal) {\n            state.stack.push(new GT(item.left, item.right));\n        } else {\n            state.stack.push(new GT(item.left, item.right, true));\n        }\n    } else if (item.name === 'GT') {\n        if (item.equal) {\n            state.stack.push(new LT(item.left, item.right));\n        } else {\n            state.stack.push(new LT(item.left, item.right, true));\n        }\n    } else if (item instanceof ISZERO) {\n        state.stack.push(item.item);\n    } else {\n        state.stack.push(new ISZERO(item));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class JUMP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly valid: boolean;\n    readonly location: any;\n\n    constructor(location: any, bad?: boolean) {\n        this.name = 'JUMP';\n        this.wrapped = false;\n        this.location = location;\n        this.valid = true;\n        if (bad) {\n            this.valid = false;\n        }\n    }\n\n    toString() {\n        if (!this.valid) {\n            return 'revert(\"Bad jump destination\");';\n        } else {\n            return 'goto(' + stringify(this.location) + ');';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const jumpLocation = state.stack.pop();\n    if (typeof jumpLocation !== 'bigint') {\n        state.halted = true;\n        state.instructions.push(new JUMP(jumpLocation, true));\n    } else {\n        const opcodes = state.getOpcodes();\n        const jumpLocationData = opcodes.find((o: any) => o.pc === Number(jumpLocation));\n        if (!jumpLocationData) {\n            state.halted = true;\n            state.instructions.push(new JUMP(jumpLocation, true));\n        } else {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (!(opcode.pc + ':' + Number(jumpLocation) in state.jumps)) {\n                if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\n                    state.halted = true;\n                    state.instructions.push(new JUMP(jumpLocation, true));\n                } else if (\n                    jumpLocationData &&\n                    jumpIndex >= 0 &&\n                    jumpLocationData.name === 'JUMPDEST'\n                ) {\n                    state.jumps[opcode.pc + ':' + Number(jumpLocation)] = true;\n                    state.pc = jumpIndex;\n                } else {\n                    state.halted = true;\n                    state.instructions.push(new JUMP(jumpLocation, true));\n                }\n            } else {\n                state.halted = true;\n                state.instructions.push(new JUMP(jumpLocation));\n            }\n        }\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport default (_opcode: Opcode, _state: EVM): void => {\n    /* Empty */\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nconst updateCallDataLoad = (item: any, types: any) => {\n    for (const i in item) {\n        if (Object.prototype.hasOwnProperty.call(item, i)) {\n            if (\n                typeof item[i] === 'object' &&\n                item[i].name === 'CALLDATALOAD' &&\n                typeof item[i].location === 'bigint'\n            ) {\n                const argNumber = ((item[i].location - 4n) / 32n).toString();\n                item[i].type = types[argNumber];\n            }\n            if (typeof item[i] === 'object') {\n                updateCallDataLoad(item[i], types);\n            }\n        }\n    }\n};\n\nconst findReturns = (item: any) => {\n    const returns = [];\n    for (const i in item) {\n        if (Object.prototype.hasOwnProperty.call(item, i)) {\n            if (\n                typeof item[i] === 'object' &&\n                item[i].name === 'RETURN' &&\n                item[i].items &&\n                item[i].items.length > 0\n            ) {\n                returns.push(item[i].items);\n            }\n            if (typeof item[i] === 'object') {\n                const deepReturns: any = findReturns(item[i]);\n                if (deepReturns.length > 0) {\n                    returns.push(...deepReturns);\n                }\n            }\n        }\n    }\n    return returns;\n};\n\nexport class TopLevelFunction {\n    readonly name: string;\n    readonly type?: string;\n    readonly label: string;\n    readonly hash: any;\n    readonly gasUsed: number;\n    readonly payable: boolean;\n    readonly visibility: string;\n    readonly constant: boolean;\n    readonly items: any;\n    readonly returns: any;\n\n    constructor(items: any, hash: any, gasUsed: number, functionHashes: { [s: string]: string }) {\n        this.name = 'Function';\n        this.hash = hash;\n        this.gasUsed = gasUsed;\n        this.items = items;\n        this.payable = true;\n        this.visibility = 'public';\n        this.constant = false;\n        this.returns = [];\n        if (this.hash in functionHashes) {\n            this.label = (functionHashes as any)[this.hash];\n        } else {\n            this.label = this.hash + '()';\n        }\n        if (\n            this.items.length > 0 &&\n            this.items[0] instanceof REQUIRE &&\n            this.items[0].condition.name === 'ISZERO' &&\n            this.items[0].condition.item.name === 'CALLVALUE'\n        ) {\n            this.payable = false;\n            this.items.shift();\n        }\n        if (this.items.length === 1 && this.items[0].name === 'RETURN') {\n            this.constant = true;\n        }\n        if (this.hash in functionHashes) {\n            const functionName = (functionHashes as any)[this.hash].split('(')[0];\n            const argumentTypes = (functionHashes as any)[this.hash]\n                .replace(functionName, '')\n                .substr(1)\n                .slice(0, -1)\n                .split(',');\n            if (\n                argumentTypes.length > 1 ||\n                (argumentTypes.length === 1 && argumentTypes[0] !== '')\n            ) {\n                this.items.forEach((item: any) => updateCallDataLoad(item, argumentTypes));\n            }\n        }\n        const returns: any = [];\n        this.items.forEach((item: any) => {\n            const deepReturns = findReturns(item);\n            if (deepReturns.length > 0) {\n                returns.push(...deepReturns);\n            }\n        });\n        if (\n            returns.length > 0 &&\n            returns.every(\n                (returnItem: any) =>\n                    returnItem.length === returns[0].length &&\n                    returnItem.map((item: any) => item.type).join('') ===\n                        returns[0].map((item: any) => item.type).join('')\n            )\n        ) {\n            returns[0].forEach((item: any) => {\n                if (typeof item === 'bigint') {\n                    this.returns.push('uint256');\n                } else if (item.type) {\n                    this.returns.push(item.type);\n                } else {\n                    this.returns.push('unknown');\n                }\n            });\n        } else if (returns.length > 0) {\n            this.returns.push('<unknown>');\n        }\n    }\n}\n\nexport class Variable {\n    readonly name: string;\n    readonly label: string | false;\n    readonly types: any;\n\n    constructor(label: string | false, types: any) {\n        this.name = 'Variable';\n        this.label = label;\n        this.types = types;\n    }\n}\n\nexport class REQUIRE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly condition: any;\n\n    constructor(condition: any) {\n        this.name = 'REQUIRE';\n        this.wrapped = true;\n        this.condition = condition;\n    }\n\n    toString() {\n        return 'require(' + stringify(this.condition) + ');';\n    }\n}\n\nexport class JUMPI {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly condition: any;\n    readonly location: any;\n    readonly valid: boolean;\n    readonly true?: any;\n    readonly false?: any;\n    readonly payable?: boolean;\n\n    constructor(condition: any, location: any, ifTrue?: any, ifFalse?: any, skipped?: boolean) {\n        this.name = 'JUMPI';\n        this.wrapped = true;\n        this.condition = condition;\n        this.location = location;\n        if (skipped) {\n            this.valid = true;\n        } else if (ifTrue && ifFalse) {\n            this.valid = true;\n            this.true = ifTrue;\n            this.false = ifFalse;\n            if (\n                this.true.length >= 1 &&\n                this.true[0] instanceof REQUIRE &&\n                this.true[0].condition.name === 'ISZERO' &&\n                this.true[0].condition.item.name === 'CALLVALUE'\n            ) {\n                this.payable = false;\n                this.true.shift();\n            } else {\n                this.payable = true;\n            }\n        } else {\n            this.valid = false;\n        }\n    }\n\n    toString() {\n        if (this.valid && this.true && this.false) {\n            return stringify(this.condition);\n        } else if (this.valid) {\n            return 'if' + stringify(this.condition) + ' goto(' + stringify(this.location) + ');';\n        } else {\n            return 'revert(\"Bad jump destination\");';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const jumpLocation = state.stack.pop();\n    const jumpCondition = state.stack.pop();\n    const opcodes = state.getOpcodes();\n    if (typeof jumpLocation !== 'bigint') {\n        state.halted = true;\n        state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n    } else {\n        const jumpLocationData = opcodes.find((o: any) => o.pc === Number(jumpLocation));\n        if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\n            //state.halted = true;\n            //state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            state.instructions.push(new REQUIRE(jumpCondition));\n        } else if (typeof jumpCondition === 'bigint') {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (\n                jumpIndex >= 0 &&\n                jumpCondition !== 0n &&\n                !(opcode.pc + ':' + Number(jumpLocation) in state.jumps)\n            ) {\n                state.jumps[opcode.pc + ':' + Number(jumpLocation)] = true;\n                state.pc = jumpIndex;\n            }\n        } else if (\n            !(opcode.pc + ':' + Number(jumpLocation) in state.jumps) &&\n            jumpCondition.name === 'SIG'\n        ) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (jumpIndex >= 0) {\n                const functionClone: any = state.clone();\n                functionClone.pc = jumpIndex;\n                const functionCloneTree = functionClone.parse();\n                state.functions[jumpCondition.hash] = new TopLevelFunction(\n                    functionCloneTree,\n                    jumpCondition.hash,\n                    functionClone.gasUsed,\n                    state.functionHashes\n                );\n                if (\n                    jumpCondition.hash in state.functionHashes &&\n                    functionCloneTree.length === 1 &&\n                    functionCloneTree[0].name === 'RETURN' &&\n                    functionCloneTree[0].items.every((item: any) => item.name === 'MappingLoad')\n                ) {\n                    functionCloneTree[0].items.forEach((item: any) => {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.mappings[item.location].name = fullFunction.split('(')[0];\n                        if (\n                            item.structlocation &&\n                            !state.mappings[item.location].structs.includes(item.structlocation)\n                        ) {\n                            state.mappings[item.location].structs.push(item.structlocation);\n                        }\n                    });\n                    delete state.functions[jumpCondition.hash];\n                } else if (\n                    jumpCondition.hash in state.functionHashes &&\n                    state.functions[jumpCondition.hash].items.length === 1 &&\n                    state.functions[jumpCondition.hash].items[0].name === 'RETURN' &&\n                    state.functions[jumpCondition.hash].items[0].items.length === 1 &&\n                    state.functions[jumpCondition.hash].items[0].items[0].name === 'SLOAD' &&\n                    typeof state.functions[jumpCondition.hash].items[0].items[0].location ===\n                        'bigint'\n                ) {\n                    if (\n                        !(\n                            state.functions[jumpCondition.hash].items[0].items[0].location in\n                            state.variables\n                        )\n                    ) {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.variables[\n                            state.functions[jumpCondition.hash].items[0].items[0].location\n                        ] = new Variable(fullFunction.split('(')[0], []);\n                        delete state.functions[jumpCondition.hash];\n                    } else {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.variables[\n                            state.functions[jumpCondition.hash].items[0].items[0].location\n                        ].label = fullFunction.split('(')[0];\n                        delete state.functions[jumpCondition.hash];\n                    }\n                }\n            }\n        } else if (\n            !(opcode.pc + ':' + Number(jumpLocation) in state.jumps) &&\n            ((jumpCondition.name === 'LT' &&\n                jumpCondition.left.name === 'CALLDATASIZE' &&\n                typeof jumpCondition.right === 'bigint' &&\n                jumpCondition.right === 4n) ||\n                (jumpCondition.name === 'ISZERO' && jumpCondition.item.name === 'CALLDATASIZE'))\n        ) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (jumpIndex >= 0) {\n                state.halted = true;\n                const trueClone: any = state.clone();\n                trueClone.pc = jumpIndex;\n                trueClone.conditions.push(jumpCondition);\n                const trueCloneTree = trueClone.parse();\n                const falseClone = state.clone();\n                falseClone.pc = state.pc + 1;\n                const falseCloneTree: any = falseClone.parse();\n                if (\n                    trueCloneTree.length > 0 &&\n                    trueCloneTree.length === falseCloneTree.length &&\n                    trueCloneTree[0].name !== 'REVERT' &&\n                    trueCloneTree[0].name !== 'INVALID' &&\n                    trueCloneTree.map((item: any) => stringify(item)).join('') ===\n                        falseCloneTree.map((item: any) => stringify(item)).join('')\n                ) {\n                    state.functions[''] = new TopLevelFunction(\n                        trueCloneTree,\n                        '',\n                        trueCloneTree.gasUsed,\n                        state.functionHashes\n                    );\n                } else if (\n                    trueCloneTree.length > 0 &&\n                    trueCloneTree[0].name !== 'REVERT' &&\n                    trueCloneTree[0].name !== 'INVALID'\n                ) {\n                    state.instructions.push(\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\n                    );\n                }\n            } else {\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            }\n        } else if (!(opcode.pc + ':' + Number(jumpLocation) in state.jumps)) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            state.jumps[opcode.pc + ':' + Number(jumpLocation)] = true;\n            if (jumpIndex >= 0) {\n                state.halted = true;\n                const trueClone: any = state.clone();\n                trueClone.pc = jumpIndex;\n                trueClone.conditions.push(jumpCondition);\n                const trueCloneTree = trueClone.parse();\n                const falseClone = state.clone();\n                falseClone.pc = state.pc + 1;\n                const falseCloneTree: any = falseClone.parse();\n                if (\n                    (falseCloneTree.length === 1 &&\n                        'name' in falseCloneTree[0] &&\n                        falseCloneTree[0].name === 'REVERT' &&\n                        falseCloneTree[0].items &&\n                        falseCloneTree[0].items.length === 0) ||\n                    falseCloneTree[0].name === 'INVALID'\n                ) {\n                    if (\n                        jumpCondition.name === 'CALL' &&\n                        typeof jumpCondition.memoryLength === 'bigint' &&\n                        jumpCondition.memoryLength === 0n &&\n                        typeof jumpCondition.outputLength === 'bigint' &&\n                        jumpCondition.outputLength === 0n &&\n                        jumpCondition.gas.name === 'MUL' &&\n                        jumpCondition.gas.left.name === 'ISZERO' &&\n                        typeof jumpCondition.gas.right === 'bigint' &&\n                        jumpCondition.gas.right === 2300n\n                    ) {\n                        jumpCondition.throwOnFail = true;\n                        state.instructions.push(jumpCondition);\n                        state.instructions.push(...trueCloneTree);\n                    } else {\n                        state.instructions.push(new REQUIRE(jumpCondition));\n                        state.instructions.push(...trueCloneTree);\n                    }\n                } else {\n                    state.instructions.push(\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\n                    );\n                }\n            } else {\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            }\n        } else {\n            state.instructions.push(new JUMPI(jumpCondition, jumpLocation, null, null, true));\n        }\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { MLOAD } from './mload';\n// import * as eventHashes from '../../data/eventHashes.json';\n\nexport class LOG {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items?: any;\n    readonly topics: any;\n    readonly eventName?: string;\n\n    constructor(\n        eventHashes: { [s: string]: string },\n        topics: any,\n        items?: any,\n        memoryStart?: any,\n        memoryLength?: any\n    ) {\n        this.name = 'LOG';\n        this.wrapped = true;\n        this.topics = topics;\n        if (\n            this.topics.length > 0 &&\n            typeof this.topics[0] === 'bigint' &&\n            this.topics[0].toString(16) in eventHashes\n        ) {\n            this.eventName = (eventHashes as any)[this.topics[0].toString(16)].split('(')[0];\n            this.topics.shift();\n        }\n        if (this.memoryStart && this.memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.eventName) {\n            return (\n                'emit ' + this.eventName + '(' + [...this.topics, ...this.items].join(', ') + ');'\n            );\n        } else {\n            return 'log(' + [...this.topics, ...this.items].join(', ') + ');';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const topicsCount = parseInt(opcode.name.replace('LOG', ''), 10);\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const topics = [];\n    for (let i = 0; i < topicsCount; i++) {\n        topics.push(state.stack.pop());\n    }\n    if (topics.length > 0) {\n        const eventTopic = topics[0].toString(16);\n        if (!(eventTopic in state.events)) {\n            state.events[eventTopic] = {};\n            state.events[eventTopic].indexedCount = topics.length - 1;\n            if (eventTopic in state.eventHashes) {\n                state.events[eventTopic].label = (state.eventHashes as any)[eventTopic];\n            }\n        }\n    }\n    if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n        const items = [];\n        for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        if (topics.length === 0) {\n            if (!('anonymous' in state.events)) {\n                state.events['anonymous'] = [];\n            }\n            state.events['anonymous'].push({ items });\n        }\n        state.instructions.push(new LOG(state.eventHashes, topics, items));\n    } else {\n        state.instructions.push(new LOG(state.eventHashes, topics, [], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class LT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n    readonly equal: boolean;\n\n    constructor(left: any, right: any, equal = false) {\n        this.name = 'LT';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n        this.equal = equal;\n    }\n\n    toString() {\n        if (this.equal) {\n            return stringify(this.left) + ' <= ' + stringify(this.right);\n        } else {\n            return stringify(this.left) + ' < ' + stringify(this.right);\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left < right ? 1n : 0n);\n    } else {\n        state.stack.push(new LT(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class MLOAD {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n\n    constructor(location: any) {\n        this.name = 'MLOAD';\n        this.wrapped = true;\n        this.location = location;\n    }\n\n    toString() {\n        return 'memory[' + stringify(this.location) + ']';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    if (typeof memoryLocation === 'bigint' && Number(memoryLocation) in state.memory) {\n        state.stack.push(state.memory[Number(memoryLocation)]);\n    } else {\n        state.stack.push(new MLOAD(memoryLocation));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class MOD {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'MOD';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' % ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left % right);\n    } else {\n        state.stack.push(new MOD(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class MSIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'MSIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'memory.length';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new MSIZE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class MSTORE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly data: any;\n\n    constructor(location: any, data: any) {\n        this.name = 'MSTORE';\n        this.wrapped = true;\n        this.location = location;\n        this.data = data;\n    }\n\n    toString() {\n        return 'memory[' + stringify(this.location) + '] = ' + stringify(this.data) + ';';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    const storeData = state.stack.pop();\n    if (typeof storeLocation === 'bigint') {\n        state.memory[Number(storeLocation)] = storeData;\n    } else {\n        state.instructions.push(new MSTORE(storeLocation, storeData));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class MUL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'MUL';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' * ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left * right);\n    } else if (\n        (typeof left === 'bigint' && left === 0n) ||\n        (typeof right === 'bigint' && right === 0n)\n    ) {\n        state.stack.push(0n);\n    } else {\n        state.stack.push(new MUL(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { MUL } from './mul';\nimport { MOD } from './mod';\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    const mod = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint' && typeof mod === 'bigint') {\n        state.stack.push((left * right) % mod);\n    } else if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(new MOD(left * right, mod));\n    } else {\n        state.stack.push(new MOD(new MUL(left, right), mod));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class NOT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly item: any;\n\n    constructor(item: any) {\n        this.name = 'AND';\n        this.wrapped = true;\n        this.item = item;\n    }\n\n    toString() {\n        return '~' + stringify(this.item);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const item = state.stack.pop();\n    if (typeof item === 'bigint') {\n        state.stack.push(!item);\n    } else {\n        state.stack.push(new NOT(item));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class NUMBER {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'NUMBER';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.number';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new NUMBER());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class OR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'OR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' || ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left | right);\n    } else {\n        state.stack.push(new OR(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class ORIGIN {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'ORIGIN';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'tx.origin';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new ORIGIN());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(BigInt(opcode.pc));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.pop();\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(BigInt('0x' + opcode.pushData!.toString('hex')));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { MLOAD } from './mload';\nimport { hex2a } from '../utils/hex';\nimport stringify from '../utils/stringify';\n\nexport class RETURN {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'RETURN';\n        this.wrapped = true;\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.memoryStart && this.memoryLength) {\n            return (\n                'return memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')];'\n            );\n        } else if (this.items.length === 0) {\n            return 'return;';\n        } else if (\n            this.items.length === 1 &&\n            (typeof this.items[0] === 'bigint' || this.items[0].static)\n        ) {\n            return 'return ' + this.items[0] + ';';\n        } else if (\n            this.items.length === 3 &&\n            this.items.every((item: any) => typeof item === 'bigint') &&\n            this.items[0] === 32n\n        ) {\n            return 'return \"' + hex2a(this.items[2].toString(16)) + '\";';\n        } else {\n            return 'return(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.halted = true;\n    if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n        const items = [];\n        for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.instructions.push(new RETURN(items));\n    } else {\n        state.instructions.push(new RETURN([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class RETURNDATACOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly returnDataPosition: any;\n    readonly returnDataSize: any;\n\n    constructor(returnDataPosition: any, returnDataSize: any) {\n        this.name = 'RETURNDATACOPY';\n        this.wrapped = true;\n        this.returnDataPosition = returnDataPosition;\n        this.returnDataSize = returnDataSize;\n    }\n\n    toString() {\n        return (\n            'output[' +\n            stringify(this.returnDataPosition) +\n            ':(' +\n            stringify(this.returnDataPosition) +\n            '+' +\n            stringify(this.returnDataSize) +\n            ')]'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryPosition = state.stack.pop();\n    const returnDataPosition = state.stack.pop();\n    const returnDataSize = state.stack.pop();\n    state.memory[memoryPosition] = new RETURNDATACOPY(returnDataPosition, returnDataSize);\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class RETURNDATASIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'RETURNDATASIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'output.length';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new RETURNDATASIZE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { MLOAD } from './mload';\nimport stringify from '../utils/stringify';\n\nexport class REVERT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'REVERT';\n        this.wrapped = true;\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.items) {\n            return 'revert(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\n        } else {\n            return (\n                'revert(memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')]);'\n            );\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.halted = true;\n    if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n        const items = [];\n        for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.instructions.push(new REVERT(items));\n    } else {\n        state.instructions.push(new REVERT([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SAR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SAR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' >> ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left >> right);\n    } else {\n        state.stack.push(new SAR(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SELFDESTRUCT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'SELFDESTRUCT';\n        this.wrapped = true;\n        this.address = address;\n    }\n\n    toString() {\n        return 'selfdestruct(' + stringify(this.address) + ');';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.halted = true;\n    state.instructions.push(new SELFDESTRUCT(address));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { MLOAD } from './mload';\nimport stringify from '../utils/stringify';\n\nexport class SHA3 {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'SHA3';\n        this.wrapped = false;\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.items) {\n            return 'keccak256(' + this.items.map((item: any) => stringify(item)).join(', ') + ')';\n        } else {\n            return (\n                'keccak256(memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')])'\n            );\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n        const items = [];\n        for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.stack.push(new SHA3(items));\n    } else {\n        state.stack.push(new SHA3([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SHL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SHL';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' << ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left << right);\n    } else {\n        state.stack.push(new SHL(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SHR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SHR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' >>> ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left >> right);\n    } else {\n        state.stack.push(new SHR(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { SHL } from './shl';\nimport { SAR } from './sar';\nimport { SUB } from './sub';\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push((right << (32n - left)) >> (32n - left));\n    } else if (typeof left === 'bigint') {\n        state.stack.push(new SAR(new SHL(right, 32n - left), 32n - left));\n    } else {\n        state.stack.push(new SAR(new SHL(right, new SUB(32n, left)), new SUB(32n, left)));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nconst parseMapping = (...items: any[]) => {\n    const mappings: any = [];\n    items.forEach((item2: any) => {\n        if (item2.name === 'SHA3' && item2.items) {\n            mappings.push(...parseMapping(...item2.items));\n        } else {\n            mappings.push(item2);\n        }\n    });\n    return mappings;\n};\n\nexport class MappingLoad {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly count: any;\n    readonly items: any;\n    readonly structlocation?: any;\n    readonly mappings: any;\n\n    constructor(mappings: any, location: any, items: any, count: any, structlocation?: any) {\n        this.name = 'MappingLoad';\n        this.wrapped = false;\n        this.location = location;\n        this.count = count;\n        this.items = items;\n        this.structlocation = structlocation;\n        this.mappings = mappings;\n    }\n\n    toString() {\n        let mappingName = 'mapping' + (this.count + 1);\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\n            mappingName = this.mappings()[this.location].name;\n        }\n        if (this.structlocation) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                '[' +\n                this.structlocation.toString() +\n                ']'\n            );\n        } else {\n            return (\n                mappingName + this.items.map((item: any) => '[' + stringify(item) + ']').join('')\n            );\n        }\n    }\n}\n\nexport class SLOAD {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly variables: any;\n\n    constructor(location: any, variables: any) {\n        this.name = 'SLOAD';\n        this.wrapped = false;\n        this.location = location;\n        this.variables = variables;\n    }\n\n    toString() {\n        if (typeof this.location === 'bigint' && this.location.toString() in this.variables()) {\n            if (this.variables()[this.location.toString()].label) {\n                return this.variables()[this.location.toString()].label;\n            } else {\n                return (\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1)\n                );\n            }\n        } else {\n            return 'storage[' + stringify(this.location) + ']';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    if (storeLocation.name === 'SHA3') {\n        const mappingItems = parseMapping(...storeLocation.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        storeLocation.left.name === 'SHA3' &&\n        typeof storeLocation.right === 'bigint'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.left.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.right\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        typeof storeLocation.left === 'bigint' &&\n        storeLocation.right.name === 'SHA3'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.right.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.left\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else {\n        state.stack.push(new SLOAD(storeLocation, () => state.variables));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\nimport { Variable } from './jumpi';\n\nconst parseMapping = (...items: any[]) => {\n    const mappings: any = [];\n    items.forEach((item2: any) => {\n        if (item2.name === 'SHA3' && item2.items) {\n            mappings.push(...parseMapping(...item2.items));\n        } else {\n            mappings.push(item2);\n        }\n    });\n    return mappings;\n};\n\nexport class MappingStore {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly count: any;\n    readonly items: any;\n    readonly data: any;\n    readonly structlocation?: any;\n    readonly mappings: any;\n\n    constructor(\n        mappings: any,\n        location: any,\n        items: any,\n        data: any,\n        count: any,\n        structlocation?: any\n    ) {\n        this.name = 'MappingStore';\n        this.wrapped = false;\n        this.location = location;\n        this.items = items;\n        this.data = data;\n        this.count = count;\n        this.structlocation = structlocation;\n        this.mappings = mappings;\n    }\n\n    toString() {\n        let mappingName = 'mapping' + (this.count + 1);\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\n            mappingName = this.mappings()[this.location].name;\n        }\n        if (\n            this.data.name === 'ADD' &&\n            this.data.right.name === 'MappingLoad' &&\n            stringify(this.data.right.location) === stringify(this.location)\n        ) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' += ' +\n                stringify(this.data.left) +\n                ';'\n            );\n        } else if (\n            this.data.name === 'ADD' &&\n            this.data.left.name === 'MappingLoad' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' += ' +\n                stringify(this.data.right) +\n                ';'\n            );\n        } else if (\n            this.data.name === 'SUB' &&\n            this.data.left.name === 'MappingLoad' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' -= ' +\n                stringify(this.data.right) +\n                ';'\n            );\n        } else {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' = ' +\n                stringify(this.data) +\n                ';'\n            );\n        }\n    }\n}\n\nexport class SSTORE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly data: any;\n    readonly variables: any;\n\n    constructor(location: any, data: any, variables: any) {\n        this.name = 'SSTORE';\n        this.wrapped = true;\n        this.location = location;\n        this.data = data;\n        this.variables = variables;\n        if (typeof this.location === 'bigint' && this.location.toString() in this.variables()) {\n            this.variables()[this.location.toString()].types.push(() => this.data.type);\n        } else if (\n            typeof this.location === 'bigint' &&\n            !(this.location.toString() in this.variables())\n        ) {\n            this.variables()[this.location.toString()] = new Variable(false, [\n                () => this.data.type,\n            ]);\n        }\n    }\n\n    toString() {\n        let variableName = 'storage[' + stringify(this.location) + ']';\n        if (typeof this.location === 'bigint' && this.location.toString() in this.variables()) {\n            if (this.variables()[this.location.toString()].label) {\n                variableName = this.variables()[this.location.toString()].label;\n            } else {\n                variableName =\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1);\n            }\n        }\n        if (\n            this.data.name === 'ADD' &&\n            this.data.right.name === 'SLOAD' &&\n            stringify(this.data.right.location) === stringify(this.location)\n        ) {\n            return variableName + ' += ' + stringify(this.data.left) + ';';\n        } else if (\n            this.data.name === 'SUB' &&\n            this.data.left.name === 'SLOAD' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return variableName + ' -= ' + stringify(this.data.right) + ';';\n        } else {\n            return variableName + ' = ' + stringify(this.data) + ';';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    const storeData = state.stack.pop();\n    if (storeLocation.name === 'SHA3') {\n        const mappingItems = parseMapping(...storeLocation.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.mappings[mappingLocation].values.push(storeData);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        storeLocation.left.name === 'SHA3' &&\n        typeof storeLocation.right === 'bigint'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.left.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.right\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        typeof storeLocation.left === 'bigint' &&\n        storeLocation.right.name === 'SHA3'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.right.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.left\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        // eslint-disable-next-line no-constant-condition\n        false &&\n        typeof storeLocation === 'bigint' &&\n        storeLocation.toString() in state.variables &&\n        storeData.type &&\n        !state.variables[storeLocation.toString()].types.includes(storeData.type)\n    ) {\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        state.variables[storeLocation.toString()].types.push(storeData.type);\n    } else {\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class STATICCALL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n\n    constructor(\n        gas: any,\n        address: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'STATICCALL';\n        this.wrapped = true;\n        this.gas = gas;\n        this.address = address;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n    }\n\n    toString() {\n        return (\n            'staticcall(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new STATICCALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class STOP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'STOP';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'return;';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.halted = true;\n    state.instructions.push(new STOP());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SUB {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SUB';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' - ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left - right);\n    } else {\n        state.stack.push(new SUB(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const swapLocation = parseInt(opcode.name.replace('SWAP', ''), 10);\n    state.stack.swap(swapLocation);\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class TIMESTAMP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'TIMESTAMP';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.timestamp';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new TIMESTAMP());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class XOR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'XOR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' ^ ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left ^ right);\n    } else {\n        state.stack.push(new XOR(left, right));\n    }\n};\n","export function hex2a(hexx: any) {\n    const hex = hexx.toString();\n    let str = '';\n    for (let i = 0; i < hex.length && hex.substr(i, 2) !== '00'; i += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    }\n    return str;\n}\n\nexport function pad32(data: string) {\n    if (data.length >= 64) {\n        return data;\n    } else {\n        return '0'.repeat(64 - data.length) + data;\n    }\n}\n\nexport function isHex(h: any) {\n    return /^[0-9a-f-]+$/.test(h);\n}\n\nexport default (data: any) => {\n    if (isHex(data)) {\n        const pieces = data.match(/.{1,64}/g);\n        if (pieces.length === 3 && parseInt(pieces[0], 16) === 32) {\n            const stringLength = parseInt(pieces[1], 16) * 2;\n            const stringData = hex2a(pieces[2].substr(0, stringLength));\n            return '\"' + stringData + '\"';\n        } else if (!isNaN(parseInt(data, 16))) {\n            return parseInt(data, 16).toString();\n        } else {\n            return data;\n        }\n    } else {\n        return data;\n    }\n};\n","import STOP from '../opcodes/stop';\nimport ADD from '../opcodes/add';\nimport MUL from '../opcodes/mul';\nimport SUB from '../opcodes/sub';\nimport DIV from '../opcodes/div';\nimport MOD from '../opcodes/mod';\nimport ADDMOD from '../opcodes/addmod';\nimport MULMOD from '../opcodes/mulmod';\nimport EXP from '../opcodes/exp';\nimport SIGNEXTEND from '../opcodes/signextend';\nimport LT from '../opcodes/lt';\nimport GT from '../opcodes/gt';\nimport EQ from '../opcodes/eq';\nimport ISZERO from '../opcodes/iszero';\nimport AND from '../opcodes/and';\nimport OR from '../opcodes/or';\nimport XOR from '../opcodes/xor';\nimport NOT from '../opcodes/not';\nimport BYTE from '../opcodes/byte';\nimport SHL from '../opcodes/shl';\nimport SHR from '../opcodes/shr';\nimport SAR from '../opcodes/sar';\nimport SHA3 from '../opcodes/sha3';\nimport ADDRESS from '../opcodes/address';\nimport BALANCE from '../opcodes/balance';\nimport ORIGIN from '../opcodes/origin';\nimport CALLER from '../opcodes/caller';\nimport CALLVALUE from '../opcodes/callvalue';\nimport CALLDATALOAD from '../opcodes/calldataload';\nimport CALLDATASIZE from '../opcodes/calldatasize';\nimport CALLDATACOPY from '../opcodes/calldatacopy';\nimport CODESIZE from '../opcodes/codesize';\nimport CODECOPY from '../opcodes/codecopy';\nimport GASPRICE from '../opcodes/gasprice';\nimport EXTCODESIZE from '../opcodes/extcodesize';\nimport EXTCODECOPY from '../opcodes/extcodecopy';\nimport RETURNDATASIZE from '../opcodes/returndatasize';\nimport RETURNDATACOPY from '../opcodes/returndatacopy';\nimport EXTCODEHASH from '../opcodes/extcodehash';\nimport BLOCKHASH from '../opcodes/blockhash';\nimport COINBASE from '../opcodes/coinbase';\nimport TIMESTAMP from '../opcodes/timestamp';\nimport NUMBER from '../opcodes/number';\nimport DIFFICULTY from '../opcodes/difficulty';\nimport GASLIMIT from '../opcodes/gaslimit';\nimport POP from '../opcodes/pop';\nimport MLOAD from '../opcodes/mload';\nimport MSTORE from '../opcodes/mstore';\nimport SLOAD from '../opcodes/sload';\nimport SSTORE from '../opcodes/sstore';\nimport JUMP from '../opcodes/jump';\nimport JUMPI from '../opcodes/jumpi';\nimport PC from '../opcodes/pc';\nimport MSIZE from '../opcodes/msize';\nimport GAS from '../opcodes/gas';\nimport JUMPDEST from '../opcodes/jumpdest';\nimport PUSH from '../opcodes/push';\nimport DUP from '../opcodes/dup';\nimport SWAP from '../opcodes/swap';\nimport LOG from '../opcodes/log';\nimport CREATE from '../opcodes/create';\nimport CALL from '../opcodes/call';\nimport CALLCODE from '../opcodes/callcode';\nimport RETURN from '../opcodes/return';\nimport DELEGATECALL from '../opcodes/delegatecall';\nimport CREATE2 from '../opcodes/create2';\nimport STATICCALL from '../opcodes/staticcall';\nimport REVERT from '../opcodes/revert';\nimport INVALID from '../opcodes/invalid';\nimport SELFDESTRUCT from '../opcodes/selfdestruct';\n\nexport default {\n    STOP,\n    ADD,\n    MUL,\n    SUB,\n    DIV,\n    SDIV: DIV,\n    MOD,\n    SMOD: MOD,\n    ADDMOD,\n    MULMOD,\n    EXP,\n    SIGNEXTEND,\n    LT,\n    GT,\n    SLT: LT,\n    SGT: GT,\n    EQ,\n    ISZERO,\n    AND,\n    OR,\n    XOR,\n    NOT,\n    BYTE,\n    SHL,\n    SHR,\n    SAR,\n    SHA3,\n    ADDRESS,\n    BALANCE,\n    ORIGIN,\n    CALLER,\n    CALLVALUE,\n    CALLDATALOAD,\n    CALLDATASIZE,\n    CALLDATACOPY,\n    CODESIZE,\n    CODECOPY,\n    GASPRICE,\n    EXTCODESIZE,\n    EXTCODECOPY,\n    RETURNDATASIZE,\n    RETURNDATACOPY,\n    EXTCODEHASH,\n    BLOCKHASH,\n    COINBASE,\n    TIMESTAMP,\n    NUMBER,\n    DIFFICULTY,\n    GASLIMIT,\n    POP,\n    MLOAD,\n    MSTORE,\n    MSTORE8: MSTORE,\n    SLOAD,\n    SSTORE,\n    JUMP,\n    JUMPI,\n    PC,\n    MSIZE,\n    GAS,\n    JUMPDEST,\n    PUSH1: PUSH,\n    PUSH2: PUSH,\n    PUSH3: PUSH,\n    PUSH4: PUSH,\n    PUSH5: PUSH,\n    PUSH6: PUSH,\n    PUSH7: PUSH,\n    PUSH8: PUSH,\n    PUSH9: PUSH,\n    PUSH10: PUSH,\n    PUSH11: PUSH,\n    PUSH12: PUSH,\n    PUSH13: PUSH,\n    PUSH14: PUSH,\n    PUSH15: PUSH,\n    PUSH16: PUSH,\n    PUSH17: PUSH,\n    PUSH18: PUSH,\n    PUSH19: PUSH,\n    PUSH20: PUSH,\n    PUSH21: PUSH,\n    PUSH22: PUSH,\n    PUSH23: PUSH,\n    PUSH24: PUSH,\n    PUSH25: PUSH,\n    PUSH26: PUSH,\n    PUSH27: PUSH,\n    PUSH28: PUSH,\n    PUSH29: PUSH,\n    PUSH30: PUSH,\n    PUSH31: PUSH,\n    PUSH32: PUSH,\n    DUP1: DUP,\n    DUP2: DUP,\n    DUP3: DUP,\n    DUP4: DUP,\n    DUP5: DUP,\n    DUP6: DUP,\n    DUP7: DUP,\n    DUP8: DUP,\n    DUP9: DUP,\n    DUP10: DUP,\n    DUP11: DUP,\n    DUP12: DUP,\n    DUP13: DUP,\n    DUP14: DUP,\n    DUP15: DUP,\n    DUP16: DUP,\n    SWAP1: SWAP,\n    SWAP2: SWAP,\n    SWAP3: SWAP,\n    SWAP4: SWAP,\n    SWAP5: SWAP,\n    SWAP6: SWAP,\n    SWAP7: SWAP,\n    SWAP8: SWAP,\n    SWAP9: SWAP,\n    SWAP10: SWAP,\n    SWAP11: SWAP,\n    SWAP12: SWAP,\n    SWAP13: SWAP,\n    SWAP14: SWAP,\n    SWAP15: SWAP,\n    SWAP16: SWAP,\n    LOG0: LOG,\n    LOG1: LOG,\n    LOG2: LOG,\n    LOG3: LOG,\n    LOG4: LOG,\n    CREATE,\n    CALL,\n    CALLCODE,\n    RETURN,\n    DELEGATECALL,\n    CREATE2,\n    STATICCALL,\n    REVERT,\n    INVALID,\n    SELFDESTRUCT,\n};\n","export default (item: any) => {\n    if (typeof item === 'bigint') {\n        return item.toString(16);\n    } else if (!item.wrapped) {\n        return item.toString();\n    } else {\n        return '(' + item.toString() + ')';\n    }\n};\n","export default (stateEvents: any, events: string[]) => {\n    const stateEventValues = Object.keys(stateEvents).map((key: string) => stateEvents[key]);\n    let output = '';\n\n    events.forEach((event: string) => {\n        const eventName = event.split('(')[0];\n        const eventArguments = event.replace(eventName, '').substring(1).slice(0, -1);\n        output += 'event ';\n        if (eventArguments) {\n            output += eventName + '(';\n            output += eventArguments\n                .split(',')\n                .map((a: string, i: number) => {\n                    const stateEvent = stateEventValues.find((e: any) => e.label === event);\n                    if (stateEvent && i < stateEvent.indexedCount) {\n                        return a + ' indexed _arg' + i;\n                    } else {\n                        return a + ' _arg' + i;\n                    }\n                })\n                .join(', ');\n            output += ');';\n        } else {\n            output += event;\n        }\n        output += '\\n';\n    });\n\n    if (events.length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","import stringifyInstructions from './stringifyInstructions';\n// import * as functionHashes from '../../data/functionHashes.json';\n\nexport default (\n    functionName: string,\n    functionInstance: any,\n    functionHashes: { [s: string]: string }\n): string => {\n    let output = '';\n    output += 'function ';\n    if (functionName in functionHashes) {\n        const fullFunction = (functionHashes as any)[functionName];\n        const fullFunctionName = fullFunction.split('(')[0];\n        const fullFunctionArguments = fullFunction\n            .replace(fullFunctionName, '')\n            .substring(1)\n            .slice(0, -1);\n        if (fullFunctionArguments) {\n            output += fullFunctionName + '(';\n            output += fullFunctionArguments\n                .split(',')\n                .map((a: string, i: number) => a + ' _arg' + i)\n                .join(', ');\n            output += ')';\n        } else {\n            output += fullFunction;\n        }\n    } else {\n        output += functionName + '()';\n    }\n    output += ' ' + functionInstance.visibility;\n    if (functionInstance.constant) {\n        output += ' view';\n    }\n    if (functionInstance.payable) {\n        output += ' payable';\n    }\n    if (functionInstance.returns.length > 0) {\n        output += ' returns (' + functionInstance.returns.join(', ') + ')';\n    }\n    output += ' {\\n';\n    output += stringifyInstructions(functionInstance.items, 4);\n    output += '}\\n\\n';\n    return output;\n};\n","export const stringifyInstructions = (instructionTree: any, indentation = 0): string => {\n    let instructionLines = '';\n    instructionTree.forEach((instruction: any) => {\n        if (instruction.name === 'JUMPI' && instruction.false) {\n            const condition = instruction.toString();\n            const falseInstructions = instruction.false.filter((i: any) => i.debugLevel > 0);\n            if (falseInstructions.length === 1 && falseInstructions[0].name === 'JUMPI') {\n                instructionLines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\n                instructionLines += stringifyInstructions(instruction.true, indentation + 4);\n                instructionLines += ' '.repeat(indentation) + '} else ';\n                const elseOrElseIf = stringifyInstructions(instruction.false, indentation);\n                if (elseOrElseIf.trim().startsWith('if')) {\n                    instructionLines += elseOrElseIf.trim() + '\\n';\n                } else {\n                    instructionLines +=\n                        '{\\n' +\n                        elseOrElseIf\n                            .split('\\n')\n                            .filter(l => l)\n                            .map(l => ' '.repeat(4) + l)\n                            .join('\\n');\n                    instructionLines += '\\n' + ' '.repeat(indentation) + '}\\n';\n                }\n            } else {\n                instructionLines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\n                instructionLines += stringifyInstructions(instruction.true, indentation + 4);\n                instructionLines += ' '.repeat(indentation) + '} else {\\n';\n                instructionLines += stringifyInstructions(instruction.false, indentation + 4);\n                instructionLines += ' '.repeat(indentation) + '}\\n';\n            }\n        } else {\n            instructionLines += ' '.repeat(indentation) + instruction.toString() + '\\n';\n        }\n    });\n    return instructionLines;\n};\n\nexport default stringifyInstructions;\n","const stringifyMapping = (mapping: any) => {\n    const mappingKey: string[] = [];\n    const mappingValue: string[] = [];\n    let deepMapping = false;\n    mapping.keys\n        .filter((mappingChild: any) => mappingChild.length > 0)\n        .forEach((mappingChild: any) => {\n            if (\n                mappingChild.length > 0 &&\n                mappingChild[0].type &&\n                !mappingKey.includes(mappingChild[0].type)\n            ) {\n                mappingKey.push(mappingChild[0].type);\n            }\n            if (mappingChild.length > 1 && !deepMapping) {\n                deepMapping = true;\n                mappingValue.push(\n                    stringifyMapping({\n                        name: mapping.name,\n                        structs: mapping.structs,\n                        keys: mapping.keys.map((items: any) => {\n                            items.shift();\n                            return items;\n                        }),\n                        values: mapping.values,\n                    })\n                );\n            } else if (mappingChild.length === 1 && !deepMapping) {\n                mapping.values.forEach((mappingChild2: any) => {\n                    if (mappingChild2.type && !mappingValue.includes(mappingChild2.type)) {\n                        mappingValue.push(mappingChild2.type);\n                    }\n                });\n            }\n        });\n    if (mappingKey.length === 0) {\n        mappingKey.push('unknown');\n    }\n    if (mapping.structs.length > 0 && mappingValue.length === 0) {\n        mappingValue.push(mapping.name + 'Struct');\n    } else if (mappingValue.length === 0) {\n        mappingValue.push('unknown');\n    }\n    return 'mapping (' + mappingKey.join('|') + ' => ' + mappingValue.join('|') + ')';\n};\n\nexport default (mappings: any) => {\n    let output = '';\n\n    Object.keys(mappings).forEach((key: string, index: number) => {\n        const mapping = mappings[key];\n        if (mapping.name) {\n            output += stringifyMapping(mapping) + ' public ' + mapping.name + ';';\n        } else {\n            output += stringifyMapping(mapping) + ' mapping' + (index + 1) + ';';\n        }\n        output += '\\n';\n    });\n\n    if (Object.keys(mappings).length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","export default (mappings: any) => {\n    let output = '';\n\n    Object.keys(mappings)\n        .filter((key: any) => mappings[key].structs.length > 0)\n        .forEach((key: string, _index: number) => {\n            const mapping = mappings[key];\n            output += 'struct ' + mapping.name + 'Struct {\\n';\n            mapping.structs.forEach((struct: any) => {\n                output += '    ' + struct.toString() + ';\\n';\n            });\n            output += '}\\n\\n';\n        });\n\n    return output;\n};\n","export default (variables: any) => {\n    let output = '';\n\n    Object.keys(variables).forEach((key: string, index: number) => {\n        const variable = variables[key];\n        const types = variable.types\n            .map((type: any) => {\n                if (typeof type === 'function') {\n                    return type();\n                } else {\n                    return type;\n                }\n            })\n            .filter((type: any) => type);\n        if (types.length === 0) {\n            types.push('unknown');\n        }\n        if (variable.label) {\n            output += [...new Set(types)].join('|') + ' public ' + variable.label + ';';\n        } else {\n            output += [...new Set(types)].join('|') + ' var' + (index + 1).toString() + ';';\n            index++;\n        }\n        output += '\\n';\n    });\n\n    if (Object.keys(variables).length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(341);\n"],"names":["root","factory","exports","module","define","amd","a","i","self","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","length","extraBytes","parts","maxChunkLength","len2","push","encodeChunk","lookup","join","Uint8Array","Array","code","Error","indexOf","start","end","num","output","base64","ieee754","customInspectSymbol","Symbol","Buffer","K_MAX_LENGTH","createBuffer","RangeError","buf","Object","setPrototypeOf","prototype","arg","encodingOrOffset","TypeError","allocUnsafe","from","value","string","encoding","isEncoding","actual","write","slice","fromString","ArrayBuffer","isView","arrayView","isInstance","copy","fromArrayBuffer","buffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","b","obj","isBuffer","checked","undefined","numberIsNaN","type","isArray","data","fromObject","toPrimitive","assertSize","size","array","toString","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","this","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","m","bidirectionalIndexOf","val","dir","arrayIndexOf","call","lastIndexOf","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","c","hi","lo","utf16leToBytes","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","e","typedArraySupport","console","error","defineProperty","enumerable","get","poolSize","alloc","fill","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","constructor","super","writable","configurable","name","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","floor","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","isNaN","log","LN2","EVM","functionHashes","eventHashes","pc","Stack","memory","opcodes","instructions","storage","jumps","mappings","layer","halted","functions","variables","events","gasUsed","conditions","clone","getBytecode","getOpcodes","index","currentOp","opcode","codes","startsWith","pushDataLength","pushData","getFunctions","Set","filter","map","hash","getEvents","containsOpcode","names","currentOpcode","JUMPDEST","STOP","RETURN","REVERT","INVALID","SELFDESTRUCT","PUSH1","PUSH32","getJumpDestinations","getSwarmHash","match","getABI","abi","parse","keys","forEach","key","item","label","payable","constant","reset","decompile","instructionTree","functionName","isERC165","every","v","elements","unshift","pop","shift","duplicate","position","secondPosition","firstValue","secondValue","parseSingle","substring","transactionObject","blockHash","blockNumber","gas","gasPrice","to","setInput","getFunctionHash","getFunction","functionHash","getFunctionName","rawFunction","getRawArguments","getArguments","_descriptive","functionArguments","rawFunctionArguments","result","functionArgumentType","functionArgument","location","isContractCreation","Transaction","ADD","MUL","SUB","DIV","SDIV","MOD","SMOD","ADDMOD","MULMOD","EXP","SIGNEXTEND","LT","GT","SLT","SGT","EQ","ISZERO","AND","OR","XOR","NOT","BYTE","SHL","SHR","SAR","SHA3","ADDRESS","BALANCE","ORIGIN","CALLER","CALLVALUE","CALLDATALOAD","CALLDATASIZE","CALLDATACOPY","CODESIZE","CODECOPY","GASPRICE","EXTCODESIZE","EXTCODECOPY","RETURNDATASIZE","RETURNDATACOPY","EXTCODEHASH","BLOCKHASH","COINBASE","TIMESTAMP","NUMBER","DIFFICULTY","GASLIMIT","POP","MLOAD","MSTORE","MSTORE8","SLOAD","SSTORE","JUMP","JUMPI","PC","MSIZE","GAS","PUSH2","PUSH3","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH30","PUSH31","DUP1","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","SWAP1","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","LOG0","LOG1","LOG2","LOG3","LOG4","CREATE","CALL","CALLCODE","DELEGATECALL","CREATE2","STATICCALL","left","right","wrapped","_opcode","state","mod","test","address","number","memoryStart","memoryLength","outputStart","outputLength","throwOnFail","startLocation","copyLength","memoryLocation","duplicateLocation","SIG","repeat","equal","bad","valid","jumpLocation","jumpLocationData","find","o","jumpIndex","_state","updateCallDataLoad","types","hasOwnProperty","argNumber","findReturns","returns","items","deepReturns","TopLevelFunction","visibility","REQUIRE","condition","argumentTypes","returnItem","Variable","ifTrue","ifFalse","skipped","true","false","jumpCondition","trueClone","trueCloneTree","falseClone","falseCloneTree","functionClone","functionCloneTree","fullFunction","structlocation","structs","LOG","topics","eventName","topicsCount","eventTopic","indexedCount","storeLocation","storeData","static","hex2a","returnDataPosition","returnDataSize","memoryPosition","parseMapping","item2","MappingLoad","count","mappingName","mappingItems","mappingLocation","mappingItem","mappingParts","values","MappingStore","variableName","swapLocation","hexx","hex","isHex","h","pieces","stringLength","stateEvents","stateEventValues","event","eventArguments","stateEvent","functionInstance","fullFunctionName","fullFunctionArguments","stringifyInstructions","indentation","instructionLines","instruction","falseInstructions","debugLevel","elseOrElseIf","l","stringifyMapping","mapping","mappingKey","mappingValue","deepMapping","mappingChild","mappingChild2","_index","struct","variable","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}