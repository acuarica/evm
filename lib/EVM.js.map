{"version":3,"file":"EVM.js","mappings":"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,IACf,EAAAC,QAAU,IACV,EAAAC,WAAa,IACb,EAAAC,OAAS,IACT,EAAAC,QAAU,IACV,EAAAC,aAAe,IAEf,EAAAC,MAAQ,CACjB,EAAM,OACN,EAAM,MACN,EAAM,MACN,EAAM,MACN,EAAM,MACN,EAAM,OACN,EAAM,MACN,EAAM,OACN,EAAM,SACN,EAAM,SACN,GAAM,MACN,GAAM,aACN,GAAM,KACN,GAAM,KACN,GAAM,MACN,GAAM,MACN,GAAM,KACN,GAAM,SACN,GAAM,MACN,GAAM,KACN,GAAM,MACN,GAAM,MACN,GAAM,OACN,GAAM,MACN,GAAM,MACN,GAAM,MACN,GAAM,OACN,GAAM,UACN,GAAM,UACN,GAAM,SACN,GAAM,SACN,GAAM,YACN,GAAM,eACN,GAAM,eACN,GAAM,eACN,GAAM,WACN,GAAM,WACN,GAAM,WACN,GAAM,cACN,GAAM,cACN,GAAM,iBACN,GAAM,iBACN,GAAM,cACN,GAAM,YACN,GAAM,WACN,GAAM,YACN,GAAM,SACN,GAAM,aACN,GAAM,WACN,GAAM,MACN,GAAM,QACN,GAAM,SACN,GAAM,UACN,GAAM,QACN,GAAM,SACN,GAAM,OACN,GAAM,QACN,GAAM,KACN,GAAM,QACN,GAAM,MACN,GAAM,WACN,GAAM,QACN,GAAM,QACN,GAAM,QACN,GAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,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","sources":["webpack://evm/webpack/universalModuleDefinition","webpack://evm/./src/codes.ts","webpack://evm/./src/evm.ts","webpack://evm/./src/hex.ts","webpack://evm/./src/index.ts","webpack://evm/./src/inst/block.ts","webpack://evm/./src/inst/info.ts","webpack://evm/./src/inst/logic.ts","webpack://evm/./src/inst/math.ts","webpack://evm/./src/inst/system.ts","webpack://evm/./src/opcodes/and.ts","webpack://evm/./src/opcodes/call.ts","webpack://evm/./src/opcodes/callcode.ts","webpack://evm/./src/opcodes/calldatacopy.ts","webpack://evm/./src/opcodes/codecopy.ts","webpack://evm/./src/opcodes/create.ts","webpack://evm/./src/opcodes/create2.ts","webpack://evm/./src/opcodes/delegatecall.ts","webpack://evm/./src/opcodes/eq.ts","webpack://evm/./src/opcodes/extcodecopy.ts","webpack://evm/./src/opcodes/extcodehash.ts","webpack://evm/./src/opcodes/extcodesize.ts","webpack://evm/./src/opcodes/index.ts","webpack://evm/./src/opcodes/iszero.ts","webpack://evm/./src/opcodes/jump.ts","webpack://evm/./src/opcodes/jumpi.ts","webpack://evm/./src/opcodes/log.ts","webpack://evm/./src/opcodes/mload.ts","webpack://evm/./src/opcodes/mstore.ts","webpack://evm/./src/opcodes/or.ts","webpack://evm/./src/opcodes/return.ts","webpack://evm/./src/opcodes/returndatacopy.ts","webpack://evm/./src/opcodes/returndatasize.ts","webpack://evm/./src/opcodes/revert.ts","webpack://evm/./src/opcodes/sha3.ts","webpack://evm/./src/opcodes/sload.ts","webpack://evm/./src/opcodes/sstore.ts","webpack://evm/./src/opcodes/staticcall.ts","webpack://evm/./src/stack.ts","webpack://evm/./src/tx.ts","webpack://evm/./src/utils/stringify.ts","webpack://evm/./src/utils/stringifyEvents.ts","webpack://evm/./src/utils/stringifyFunctions.ts","webpack://evm/./src/utils/stringifyInstructions.ts","webpack://evm/./src/utils/stringifyMappings.ts","webpack://evm/./src/utils/stringifyStructs.ts","webpack://evm/./src/utils/stringifyVariables.ts","webpack://evm/webpack/bootstrap","webpack://evm/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","export const STOP = 0x00;\nexport const ADD = 0x01;\nexport const MUL = 0x02;\nexport const SUB = 0x03;\nexport const DIV = 0x04;\nexport const SDIV = 0x05;\nexport const MOD = 0x06;\nexport const SMOD = 0x07;\nexport const ADDMOD = 0x08;\nexport const MULMOD = 0x09;\nexport const EXP = 0x0a;\nexport const SIGNEXTEND = 0x0b;\nexport const LT = 0x10;\nexport const GT = 0x11;\nexport const SLT = 0x12;\nexport const SGT = 0x13;\nexport const EQ = 0x14;\nexport const ISZERO = 0x15;\nexport const AND = 0x16;\nexport const OR = 0x17;\nexport const XOR = 0x18;\nexport const NOT = 0x19;\nexport const BYTE = 0x1a;\nexport const SHL = 0x1b;\nexport const SHR = 0x1c;\nexport const SAR = 0x1d;\nexport const SHA3 = 0x20;\nexport const ADDRESS = 0x30;\nexport const BALANCE = 0x31;\nexport const ORIGIN = 0x32;\nexport const CALLER = 0x33;\nexport const CALLVALUE = 0x34;\nexport const CALLDATALOAD = 0x35;\nexport const CALLDATASIZE = 0x36;\nexport const CALLDATACOPY = 0x37;\nexport const CODESIZE = 0x38;\nexport const CODECOPY = 0x39;\nexport const GASPRICE = 0x3a;\nexport const EXTCODESIZE = 0x3b;\nexport const EXTCODECOPY = 0x3c;\nexport const RETURNDATASIZE = 0x3d;\nexport const RETURNDATACOPY = 0x3e;\nexport const EXTCODEHASH = 0x3f;\nexport const BLOCKHASH = 0x40;\nexport const COINBASE = 0x41;\nexport const TIMESTAMP = 0x42;\nexport const NUMBER = 0x43;\nexport const DIFFICULTY = 0x44;\nexport const GASLIMIT = 0x45;\nexport const POP = 0x50;\nexport const MLOAD = 0x51;\nexport const MSTORE = 0x52;\nexport const MSTORE8 = 0x53;\nexport const SLOAD = 0x54;\nexport const SSTORE = 0x55;\nexport const JUMP = 0x56;\nexport const JUMPI = 0x57;\nexport const PC = 0x58;\nexport const MSIZE = 0x59;\nexport const GAS = 0x5a;\nexport const JUMPDEST = 0x5b;\nexport const PUSH1 = 0x60;\nexport const PUSH2 = 0x61;\nexport const PUSH3 = 0x62;\nexport const PUSH4 = 0x63;\nexport const PUSH5 = 0x64;\nexport const PUSH6 = 0x65;\nexport const PUSH7 = 0x66;\nexport const PUSH8 = 0x67;\nexport const PUSH9 = 0x68;\nexport const PUSH10 = 0x69;\nexport const PUSH11 = 0x6a;\nexport const PUSH12 = 0x6b;\nexport const PUSH13 = 0x6c;\nexport const PUSH14 = 0x6d;\nexport const PUSH15 = 0x6e;\nexport const PUSH16 = 0x6f;\nexport const PUSH17 = 0x70;\nexport const PUSH18 = 0x71;\nexport const PUSH19 = 0x72;\nexport const PUSH20 = 0x73;\nexport const PUSH21 = 0x74;\nexport const PUSH22 = 0x75;\nexport const PUSH23 = 0x76;\nexport const PUSH24 = 0x77;\nexport const PUSH25 = 0x78;\nexport const PUSH26 = 0x79;\nexport const PUSH27 = 0x7a;\nexport const PUSH28 = 0x7b;\nexport const PUSH29 = 0x7c;\nexport const PUSH30 = 0x7d;\nexport const PUSH31 = 0x7e;\nexport const PUSH32 = 0x7f;\nexport const DUP1 = 0x80;\nexport const DUP2 = 0x81;\nexport const DUP3 = 0x82;\nexport const DUP4 = 0x83;\nexport const DUP5 = 0x84;\nexport const DUP6 = 0x85;\nexport const DUP7 = 0x86;\nexport const DUP8 = 0x87;\nexport const DUP9 = 0x88;\nexport const DUP10 = 0x89;\nexport const DUP11 = 0x8a;\nexport const DUP12 = 0x8b;\nexport const DUP13 = 0x8c;\nexport const DUP14 = 0x8d;\nexport const DUP15 = 0x8e;\nexport const DUP16 = 0x8f;\nexport const SWAP1 = 0x90;\nexport const SWAP2 = 0x91;\nexport const SWAP3 = 0x92;\nexport const SWAP4 = 0x93;\nexport const SWAP5 = 0x94;\nexport const SWAP6 = 0x95;\nexport const SWAP7 = 0x96;\nexport const SWAP8 = 0x97;\nexport const SWAP9 = 0x98;\nexport const SWAP10 = 0x99;\nexport const SWAP11 = 0x9a;\nexport const SWAP12 = 0x9b;\nexport const SWAP13 = 0x9c;\nexport const SWAP14 = 0x9d;\nexport const SWAP15 = 0x9e;\nexport const SWAP16 = 0x9f;\nexport const LOG0 = 0xa0;\nexport const LOG1 = 0xa1;\nexport const LOG2 = 0xa2;\nexport const LOG3 = 0xa3;\nexport const LOG4 = 0xa4;\nexport const CREATE = 0xf0;\nexport const CALL = 0xf1;\nexport const CALLCODE = 0xf2;\nexport const RETURN = 0xf3;\nexport const DELEGATECALL = 0xf4;\nexport const CREATE2 = 0xf5;\nexport const STATICCALL = 0xfa;\nexport const REVERT = 0xfd;\nexport const INVALID = 0xfe;\nexport const SELFDESTRUCT = 0xff;\n\nexport const codes = {\n    0x00: 'STOP',\n    0x01: 'ADD',\n    0x02: 'MUL',\n    0x03: 'SUB',\n    0x04: 'DIV',\n    0x05: 'SDIV',\n    0x06: 'MOD',\n    0x07: 'SMOD',\n    0x08: 'ADDMOD',\n    0x09: 'MULMOD',\n    0x0a: 'EXP',\n    0x0b: 'SIGNEXTEND',\n    0x10: 'LT',\n    0x11: 'GT',\n    0x12: 'SLT',\n    0x13: 'SGT',\n    0x14: 'EQ',\n    0x15: 'ISZERO',\n    0x16: 'AND',\n    0x17: 'OR',\n    0x18: 'XOR',\n    0x19: 'NOT',\n    0x1a: 'BYTE',\n    0x1b: 'SHL',\n    0x1c: 'SHR',\n    0x1d: 'SAR',\n    0x20: 'SHA3',\n    0x30: 'ADDRESS',\n    0x31: 'BALANCE',\n    0x32: 'ORIGIN',\n    0x33: 'CALLER',\n    0x34: 'CALLVALUE',\n    0x35: 'CALLDATALOAD',\n    0x36: 'CALLDATASIZE',\n    0x37: 'CALLDATACOPY',\n    0x38: 'CODESIZE',\n    0x39: 'CODECOPY',\n    0x3a: 'GASPRICE',\n    0x3b: 'EXTCODESIZE',\n    0x3c: 'EXTCODECOPY',\n    0x3d: 'RETURNDATASIZE',\n    0x3e: 'RETURNDATACOPY',\n    0x3f: 'EXTCODEHASH',\n    0x40: 'BLOCKHASH',\n    0x41: 'COINBASE',\n    0x42: 'TIMESTAMP',\n    0x43: 'NUMBER',\n    0x44: 'DIFFICULTY',\n    0x45: 'GASLIMIT',\n    0x50: 'POP',\n    0x51: 'MLOAD',\n    0x52: 'MSTORE',\n    0x53: 'MSTORE8',\n    0x54: 'SLOAD',\n    0x55: 'SSTORE',\n    0x56: 'JUMP',\n    0x57: 'JUMPI',\n    0x58: 'PC',\n    0x59: 'MSIZE',\n    0x5a: 'GAS',\n    0x5b: 'JUMPDEST',\n    0x60: 'PUSH1',\n    0x61: 'PUSH2',\n    0x62: 'PUSH3',\n    0x63: 'PUSH4',\n    0x64: 'PUSH5',\n    0x65: 'PUSH6',\n    0x66: 'PUSH7',\n    0x67: 'PUSH8',\n    0x68: 'PUSH9',\n    0x69: 'PUSH10',\n    0x6a: 'PUSH11',\n    0x6b: 'PUSH12',\n    0x6c: 'PUSH13',\n    0x6d: 'PUSH14',\n    0x6e: 'PUSH15',\n    0x6f: 'PUSH16',\n    0x70: 'PUSH17',\n    0x71: 'PUSH18',\n    0x72: 'PUSH19',\n    0x73: 'PUSH20',\n    0x74: 'PUSH21',\n    0x75: 'PUSH22',\n    0x76: 'PUSH23',\n    0x77: 'PUSH24',\n    0x78: 'PUSH25',\n    0x79: 'PUSH26',\n    0x7a: 'PUSH27',\n    0x7b: 'PUSH28',\n    0x7c: 'PUSH29',\n    0x7d: 'PUSH30',\n    0x7e: 'PUSH31',\n    0x7f: 'PUSH32',\n    0x80: 'DUP1',\n    0x81: 'DUP2',\n    0x82: 'DUP3',\n    0x83: 'DUP4',\n    0x84: 'DUP5',\n    0x85: 'DUP6',\n    0x86: 'DUP7',\n    0x87: 'DUP8',\n    0x88: 'DUP9',\n    0x89: 'DUP10',\n    0x8a: 'DUP11',\n    0x8b: 'DUP12',\n    0x8c: 'DUP13',\n    0x8d: 'DUP14',\n    0x8e: 'DUP15',\n    0x8f: 'DUP16',\n    0x90: 'SWAP1',\n    0x91: 'SWAP2',\n    0x92: 'SWAP3',\n    0x93: 'SWAP4',\n    0x94: 'SWAP5',\n    0x95: 'SWAP6',\n    0x96: 'SWAP7',\n    0x97: 'SWAP8',\n    0x98: 'SWAP9',\n    0x99: 'SWAP10',\n    0x9a: 'SWAP11',\n    0x9b: 'SWAP12',\n    0x9c: 'SWAP13',\n    0x9d: 'SWAP14',\n    0x9e: 'SWAP15',\n    0x9f: 'SWAP16',\n    0xa0: 'LOG0',\n    0xa1: 'LOG1',\n    0xa2: 'LOG2',\n    0xa3: 'LOG3',\n    0xa4: 'LOG4',\n    0xf0: 'CREATE',\n    0xf1: 'CALL',\n    0xf2: 'CALLCODE',\n    0xf3: 'RETURN',\n    0xf4: 'DELEGATECALL',\n    0xf5: 'CREATE2',\n    0xfa: 'STATICCALL',\n    0xfd: 'REVERT',\n    0xfe: 'INVALID',\n    0xff: 'SELFDESTRUCT',\n};\n\nexport const names = {\n    STOP: 0x00,\n    ADD: 0x01,\n    MUL: 0x02,\n    SUB: 0x03,\n    DIV: 0x04,\n    SDIV: 0x05,\n    MOD: 0x06,\n    SMOD: 0x07,\n    ADDMOD: 0x08,\n    MULMOD: 0x09,\n    EXP: 0x0a,\n    SIGNEXTEND: 0x0b,\n    LT: 0x10,\n    GT: 0x11,\n    SLT: 0x12,\n    SGT: 0x13,\n    EQ: 0x14,\n    ISZERO: 0x15,\n    AND: 0x16,\n    OR: 0x17,\n    XOR: 0x18,\n    NOT: 0x19,\n    BYTE: 0x1a,\n    SHL: 0x1b,\n    SHR: 0x1c,\n    SAR: 0x1d,\n    SHA3: 0x20,\n    ADDRESS: 0x30,\n    BALANCE: 0x31,\n    ORIGIN: 0x32,\n    CALLER: 0x33,\n    CALLVALUE: 0x34,\n    CALLDATALOAD: 0x35,\n    CALLDATASIZE: 0x36,\n    CALLDATACOPY: 0x37,\n    CODESIZE: 0x38,\n    CODECOPY: 0x39,\n    GASPRICE: 0x3a,\n    EXTCODESIZE: 0x3b,\n    EXTCODECOPY: 0x3c,\n    RETURNDATASIZE: 0x3d,\n    RETURNDATACOPY: 0x3e,\n    EXTCODEHASH: 0x3f,\n    BLOCKHASH: 0x40,\n    COINBASE: 0x41,\n    TIMESTAMP: 0x42,\n    NUMBER: 0x43,\n    DIFFICULTY: 0x44,\n    GASLIMIT: 0x45,\n    POP: 0x50,\n    MLOAD: 0x51,\n    MSTORE: 0x52,\n    MSTORE8: 0x53,\n    SLOAD: 0x54,\n    SSTORE: 0x55,\n    JUMP: 0x56,\n    JUMPI: 0x57,\n    PC: 0x58,\n    MSIZE: 0x59,\n    GAS: 0x5a,\n    JUMPDEST: 0x5b,\n    PUSH1: 0x60,\n    PUSH2: 0x61,\n    PUSH3: 0x62,\n    PUSH4: 0x63,\n    PUSH5: 0x64,\n    PUSH6: 0x65,\n    PUSH7: 0x66,\n    PUSH8: 0x67,\n    PUSH9: 0x68,\n    PUSH10: 0x69,\n    PUSH11: 0x6a,\n    PUSH12: 0x6b,\n    PUSH13: 0x6c,\n    PUSH14: 0x6d,\n    PUSH15: 0x6e,\n    PUSH16: 0x6f,\n    PUSH17: 0x70,\n    PUSH18: 0x71,\n    PUSH19: 0x72,\n    PUSH20: 0x73,\n    PUSH21: 0x74,\n    PUSH22: 0x75,\n    PUSH23: 0x76,\n    PUSH24: 0x77,\n    PUSH25: 0x78,\n    PUSH26: 0x79,\n    PUSH27: 0x7a,\n    PUSH28: 0x7b,\n    PUSH29: 0x7c,\n    PUSH30: 0x7d,\n    PUSH31: 0x7e,\n    PUSH32: 0x7f,\n    DUP1: 0x80,\n    DUP2: 0x81,\n    DUP3: 0x82,\n    DUP4: 0x83,\n    DUP5: 0x84,\n    DUP6: 0x85,\n    DUP7: 0x86,\n    DUP8: 0x87,\n    DUP9: 0x88,\n    DUP10: 0x89,\n    DUP11: 0x8a,\n    DUP12: 0x8b,\n    DUP13: 0x8c,\n    DUP14: 0x8d,\n    DUP15: 0x8e,\n    DUP16: 0x8f,\n    SWAP1: 0x90,\n    SWAP2: 0x91,\n    SWAP3: 0x92,\n    SWAP4: 0x93,\n    SWAP5: 0x94,\n    SWAP6: 0x95,\n    SWAP7: 0x96,\n    SWAP8: 0x97,\n    SWAP9: 0x98,\n    SWAP10: 0x99,\n    SWAP11: 0x9a,\n    SWAP12: 0x9b,\n    SWAP13: 0x9c,\n    SWAP14: 0x9d,\n    SWAP15: 0x9e,\n    SWAP16: 0x9f,\n    LOG0: 0xa0,\n    LOG1: 0xa1,\n    LOG2: 0xa2,\n    LOG3: 0xa3,\n    LOG4: 0xa4,\n    CREATE: 0xf0,\n    CALL: 0xf1,\n    CALLCODE: 0xf2,\n    RETURN: 0xf3,\n    DELEGATECALL: 0xf4,\n    CREATE2: 0xf5,\n    STATICCALL: 0xfa,\n    REVERT: 0xfd,\n    INVALID: 0xfe,\n    SELFDESTRUCT: 0xff,\n};\n","import opcodeFunctions from './opcodes';\nimport stringifyEvents from './utils/stringifyEvents';\nimport stringifyStructs from './utils/stringifyStructs';\nimport stringifyMappings from './utils/stringifyMappings';\nimport stringifyVariables from './utils/stringifyVariables';\nimport stringifyFunctions from './utils/stringifyFunctions';\nimport { stringifyInstructions } from './utils/stringifyInstructions';\nimport { Stack } from './stack';\nimport { Opcode } from './opcode';\nimport {\n    STOP,\n    RETURN,\n    REVERT,\n    INVALID,\n    PUSH1,\n    PUSH32,\n    JUMPDEST,\n    SELFDESTRUCT,\n    codes,\n    names,\n} from './codes';\nimport { fromHex, toHex } from './hex';\nimport { LT, GT } from './inst/logic';\nimport { SHA3 } from './opcodes/sha3';\nimport { Add, Div } from './inst/math';\nimport { SIG } from './opcodes/eq';\nimport { IsZero } from './opcodes/iszero';\nimport { CALL } from './opcodes/call';\nimport { CallDataLoad } from './inst/info';\nimport { CALLDATACOPY } from './opcodes/calldatacopy';\nimport { Return } from './opcodes/return';\nimport { Revert } from './opcodes/revert';\nimport { TopLevelFunction, Variable } from './opcodes/jumpi';\n\ninterface Event {\n    [key: string]: any;\n}\n\ntype INST =\n    | GT\n    | LT\n    | SHA3\n    | Add\n    | SIG\n    | IsZero\n    | CALL\n    | Div\n    | CallDataLoad\n    | CALLDATACOPY\n    | Return\n    | Revert;\n\nexport type Instruction =\n    | {\n          name: Exclude<\n              | keyof typeof opcodeFunctions\n              | 'MappingStore'\n              | 'REQUIRE'\n              | 'MappingLoad'\n              | 'LOG'\n              | 'ReturnData'\n              | 'SYMBOL',\n              INST['name']\n          >;\n          type?: string;\n          wrapped: boolean;\n      }\n    | INST;\n\nexport type Operand = bigint | Instruction;\n\ninterface Mapping {\n    [key: string]: any;\n}\n\nexport class EVM {\n    pc = 0;\n    stack = new Stack<bigint | Instruction>();\n    memory: { [location: number]: Operand } = {};\n    opcodes: Opcode[] = [];\n    instructions: Instruction[] = [];\n    jumps: any = {};\n    code: Uint8Array;\n    mappings: Mapping = {};\n    layer = 0;\n    halted = false;\n    functions: { [hash: string]: TopLevelFunction } = {};\n    variables: { [key: string]: Variable } = {};\n    events: Event = {};\n    gasUsed = 0;\n    conditions: Instruction[] = [];\n\n    constructor(\n        code: string | Uint8Array,\n        readonly functionHashes: { [s: string]: string },\n        readonly eventHashes: { [s: string]: string }\n    ) {\n        if (code instanceof Uint8Array) {\n            this.code = code;\n        } else {\n            this.code = fromHex(code.replace('0x', ''));\n        }\n    }\n\n    clone(): EVM {\n        const clone = new EVM(this.code, this.functionHashes, this.eventHashes);\n        clone.pc = this.pc;\n        clone.opcodes = this.opcodes;\n        clone.stack = this.stack.clone();\n        clone.memory = { ...this.memory };\n        clone.jumps = { ...this.jumps };\n        clone.mappings = this.mappings;\n        clone.layer = this.layer + 1;\n        clone.functions = this.functions;\n        clone.variables = this.variables;\n        clone.events = this.events;\n        clone.gasUsed = this.gasUsed;\n        clone.conditions = [...this.conditions];\n        return clone;\n    }\n\n    getBytecode(): string {\n        return '0x' + toHex(this.code);\n    }\n\n    getOpcodes(): Opcode[] {\n        if (this.opcodes.length === 0) {\n            for (let index = 0; index < this.code.length; index++) {\n                const currentOp = {\n                    pc: index,\n                    opcode: this.code[index],\n                    name: 'INVALID',\n                    toString: function () {\n                        const pc = this.pc.toString(16).padStart(4, '0').toUpperCase();\n                        const opcode = this.opcode.toString(16).padStart(2, '0').toUpperCase();\n                        const pushData = this.pushData ? ' 0x' + toHex(this.pushData) : '';\n\n                        return `${pc}    ${opcode}    ${this.name}${pushData}`;\n                    },\n                } as Opcode;\n                if (currentOp.opcode in codes) {\n                    currentOp.name = codes[currentOp.opcode as keyof typeof codes];\n                }\n                this.opcodes.push(currentOp);\n                if (currentOp.name.startsWith('PUSH')) {\n                    const pushDataLength = this.code[index] - 0x5f;\n                    const pushData = this.code.subarray(index + 1, index + pushDataLength + 1);\n                    currentOp.pushData = pushData;\n                    index += pushDataLength;\n                }\n            }\n        }\n        return this.opcodes;\n    }\n\n    getFunctions(): string[] {\n        return [\n            ...new Set(\n                this.getOpcodes()\n                    .filter(opcode => opcode.name === 'PUSH4')\n                    .map(opcode => (opcode.pushData ? toHex(opcode.pushData) : ''))\n                    .filter(hash => hash in this.functionHashes)\n                    .map(hash => this.functionHashes[hash])\n            ),\n        ];\n    }\n\n    getEvents(): string[] {\n        return [\n            ...new Set(\n                this.getOpcodes()\n                    .filter(opcode => opcode.name === 'PUSH32')\n                    .map(opcode => (opcode.pushData ? toHex(opcode.pushData) : ''))\n                    .filter(hash => hash in this.eventHashes)\n                    .map(hash => this.eventHashes[hash])\n            ),\n        ];\n    }\n\n    containsOpcode(opcode: number | string): boolean {\n        let halted = false;\n        if (typeof opcode === 'string' && opcode in names) {\n            opcode = (names as any)[opcode];\n        } else if (typeof opcode === 'string') {\n            throw new Error('Invalid opcode provided');\n        }\n        for (let index = 0; index < this.code.length; index++) {\n            const currentOpcode = this.code[index];\n            if (currentOpcode === opcode && !halted) {\n                return true;\n            } else if (currentOpcode === JUMPDEST) {\n                halted = false;\n            } else if ([STOP, RETURN, REVERT, INVALID, SELFDESTRUCT].includes(currentOpcode)) {\n                halted = true;\n            } else if (currentOpcode >= PUSH1 && currentOpcode <= PUSH32) {\n                index += currentOpcode - PUSH1 + 0x01;\n            }\n        }\n        return false;\n    }\n\n    getJumpDestinations(): number[] {\n        return this.getOpcodes()\n            .filter(opcode => opcode.name === 'JUMPDEST')\n            .map(opcode => opcode.pc);\n    }\n\n    getSwarmHash(): string | false {\n        const regex = /a165627a7a72305820([a-f0-9]{64})0029$/;\n        const bytecode = this.getBytecode();\n        const match = bytecode.match(regex);\n        if (match && match[1]) {\n            return 'bzzr://' + match[1];\n        } else {\n            return false;\n        }\n    }\n\n    getABI(): any {\n        const abi: any = [];\n        if (this.instructions.length === 0) {\n            this.parse();\n        }\n        Object.keys(this.functions).forEach((key: string) => {\n            const item: any = abi.push({ type: 'function' });\n            item.name = this.functions[key].label.split('(')[0];\n            item.payable = this.functions[key].payable;\n            item.constant = this.functions[key].constant;\n        });\n    }\n\n    reset(): void {\n        this.pc = 0;\n        this.instructions = [];\n        this.stack.reset();\n        this.memory = {};\n        this.jumps = {};\n        this.mappings = {};\n        this.functions = {};\n        this.variables = {};\n        this.events = {};\n        this.gasUsed = 0;\n    }\n\n    parse(): Instruction[] {\n        if (this.instructions.length === 0) {\n            const opcodes = this.getOpcodes();\n            for (this.pc; this.pc < opcodes.length && !this.halted; this.pc++) {\n                const opcode = opcodes[this.pc];\n                if (opcode.name in opcodeFunctions) {\n                    opcodeFunctions[opcode.name as keyof typeof opcodeFunctions](opcode, this);\n                } else {\n                    throw new Error('Unknown OPCODE: ' + opcode.name);\n                }\n            }\n        }\n        return this.instructions;\n    }\n\n    decompile(): string {\n        const instructionTree = this.parse();\n        const events = stringifyEvents(this.events, this.getEvents());\n        const structs = stringifyStructs(this.mappings);\n        const mappings = stringifyMappings(this.mappings);\n        const variables = stringifyVariables(this.variables);\n        const functions = Object.keys(this.functions)\n            .map((functionName: string) =>\n                stringifyFunctions(functionName, this.functions[functionName], this.functionHashes)\n            )\n            .join('');\n        const code = stringifyInstructions(instructionTree);\n        return events + structs + mappings + variables + functions + code;\n    }\n\n    isERC165(): boolean {\n        return ['supportsInterface(bytes4)'].every(v => this.getFunctions().includes(v));\n    }\n}\n","export function hex2a(hexx: any) {\n    const hex = hexx.toString();\n    let str = '';\n    for (let i = 0; i < hex.length && hex.substr(i, 2) !== '00'; i += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    }\n    return str;\n}\n\nexport function pad32(data: string) {\n    if (data.length >= 64) {\n        return data;\n    } else {\n        return '0'.repeat(64 - data.length) + data;\n    }\n}\n\nexport function isHex(h: any) {\n    return /^[0-9a-f-]+$/.test(h);\n}\n\nexport default (data: any) => {\n    if (isHex(data)) {\n        const pieces = data.match(/.{1,64}/g);\n        if (pieces.length === 3 && parseInt(pieces[0], 16) === 32) {\n            const stringLength = parseInt(pieces[1], 16) * 2;\n            const stringData = hex2a(pieces[2].substr(0, stringLength));\n            return '\"' + stringData + '\"';\n        } else if (!isNaN(parseInt(data, 16))) {\n            return parseInt(data, 16).toString();\n        } else {\n            return data;\n        }\n    } else {\n        return data;\n    }\n};\n\n/**\n *\n * @param buffer\n * @returns\n */\nexport function toHex(buffer: Uint8Array): string {\n    return buffer.reduce((str, elem) => str + elem.toString(16).padStart(2, '0'), '');\n}\n\n/**\n *\n * @param str\n * @returns\n */\nexport function fromHex(str: string): Uint8Array {\n    const buffer = new Uint8Array(str.length / 2);\n    for (let i = 0; i < buffer.length; i++) {\n        buffer[i] = parseInt(str.substr(i * 2, 2), 16);\n    }\n\n    return buffer;\n}\n","export { Stack } from './stack';\nexport { Transaction } from './tx';\nexport { EVM } from './evm';\nexport * from './opcodes';\n","import { Operand } from '../evm';\nimport stringify from '../utils/stringify';\n\nexport class BlockHash {\n    readonly name = 'BLOCKHASH';\n    readonly wrapped = true;\n\n    constructor(readonly blockNumber: Operand) {}\n\n    toString = () => `block.blockhash(${stringify(this.blockNumber)})`;\n}\n\nexport class BlockNumber {\n    readonly name = 'NUMBER';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'block.number';\n    }\n}\n","import { Operand } from '../evm';\nimport stringify from '../utils/stringify';\n\n/**\n * https://www.evm.codes/#30\n */\nexport class Address {\n    readonly name = 'ADDRESS';\n    readonly type = 'address';\n    readonly wrapped = false;\n\n    toString = () => 'this';\n}\n\n/**\n * https://www.evm.codes/#31\n */\nexport class Balance {\n    readonly name = 'BALANCE';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    constructor(readonly address: Operand) {}\n\n    toString = () => `${stringify(this.address)}.balance`;\n}\n\n/**\n * https://www.evm.codes/#35\n */\nexport class CallDataLoad {\n    readonly name = 'CALLDATALOAD';\n    readonly type?: string;\n    readonly returntype?: string;\n    readonly wrapped = false;\n\n    constructor(readonly location: any) {}\n\n    toString() {\n        if (typeof this.location === 'bigint' && this.location === 0n) {\n            return 'msg.data';\n        } else if (typeof this.location === 'bigint' && (this.location - 4n) % 32n === 0n) {\n            return '_arg' + ((this.location - 4n) / 32n).toString();\n        } else {\n            return 'msg.data[' + stringify(this.location) + ']';\n        }\n    }\n}\n\nexport class CALLDATASIZE {\n    readonly name = 'CALLDATASIZE';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'msg.data.length';\n    }\n}\n\nexport class CallValue {\n    readonly name = 'CALLDATASIZE';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'msg.value';\n    }\n}\n","import { Operand } from '../evm';\nimport stringify from '../utils/stringify';\n\nexport class GT {\n    readonly name = 'GT';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any, readonly equal: boolean = false) {}\n\n    toString() {\n        return stringify(this.left) + (this.equal ? ' >= ' : ' > ') + stringify(this.right);\n    }\n}\n\nexport class LT {\n    readonly name = 'LT';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any, readonly equal: boolean = false) {}\n\n    toString() {\n        return stringify(this.left) + (this.equal ? ' <= ' : ' < ') + stringify(this.right);\n    }\n}\n\n/**\n * https://www.evm.codes/#18\n */\nexport class Xor {\n    readonly name = 'XOR';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: Operand, readonly right: Operand) {}\n\n    toString = () => `${stringify(this.left)} ^ ${stringify(this.right)}`;\n}\n\n/**\n * https://www.evm.codes/#19\n */\nexport class Not {\n    readonly name = 'NOT';\n    readonly wrapped = true;\n\n    constructor(readonly value: Operand) {}\n\n    toString = () => `~${stringify(this.value)}`;\n}\n\n/**\n * https://www.evm.codes/#1a\n */\nexport class Byte {\n    readonly name = 'BYTE';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly position: Operand, readonly data: Operand) {}\n\n    toString = () => `(${stringify(this.data)} >> ${stringify(this.position)}) & 1`;\n}\n\n/**\n * https://www.evm.codes/#1b\n */\nexport class Shl {\n    readonly name = 'SHL';\n    readonly type?: string;\n    readonly wrapped: boolean = true;\n\n    constructor(readonly value: Operand, readonly shift: Operand) {}\n\n    toString = () => `${stringify(this.value)} << ${stringify(this.shift)}`;\n}\n\n/**\n * https://www.evm.codes/#1c\n */\nexport class Shr {\n    readonly name = 'SHR';\n    readonly wrapped = true;\n\n    constructor(readonly value: Operand, readonly shift: Operand) {}\n\n    toString = () => `${stringify(this.value)} >>> ${stringify(this.shift)}`;\n}\n\n/**\n * https://www.evm.codes/#1d\n */\nexport class Sar {\n    readonly name = 'SAR';\n    readonly wrapped = true;\n\n    constructor(readonly value: Operand, readonly shift: Operand) {}\n\n    toString = () => `${stringify(this.value)} >> ${stringify(this.shift)}`;\n}\n","import { Operand } from '../evm';\nimport stringify from '../utils/stringify';\n\n/**\n * https://www.evm.codes/#00\n */\nexport class Stop {\n    readonly name = 'STOP';\n    readonly wrapped = false;\n\n    toString = () => 'return;';\n}\n\nexport class Add {\n    readonly name = 'ADD';\n    readonly wrapped = true;\n\n    constructor(readonly left: Operand, readonly right: Operand) {}\n\n    toString = () => `${stringify(this.left)} + ${stringify(this.right)}`;\n}\n\nexport class Mul {\n    readonly name = 'MUL';\n    readonly wrapped = true;\n\n    constructor(readonly left: Operand, readonly right: Operand) {}\n\n    toString = () => `${stringify(this.left)} * ${stringify(this.right)}`;\n}\n\nexport class Sub {\n    readonly name = 'SUB';\n    readonly wrapped = true;\n\n    constructor(readonly left: Operand, readonly right: Operand) {}\n\n    toString = () => `${stringify(this.left)} - ${stringify(this.right)}`;\n}\n\nexport class Div {\n    readonly name = 'DIV';\n    readonly wrapped = true;\n\n    constructor(readonly left: Operand, readonly right: Operand) {}\n\n    toString = () => `${stringify(this.left)} / ${stringify(this.right)}`;\n}\n\nexport class Mod {\n    readonly name = 'MOD';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: Operand, readonly right: Operand) {}\n\n    toString = () => `${stringify(this.left)} % ${stringify(this.right)}`;\n}\n\nexport class Exp {\n    readonly name = 'EXP';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: Operand, readonly right: Operand) {}\n\n    toString = () => stringify(this.left) + ' ** ' + stringify(this.right);\n}\n","import stringify from '../utils/stringify';\n\nexport class Invalid {\n    readonly name = 'INVALID';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly opcode: any) {}\n\n    toString = () => `revert(\"Invalid instruction (0x${this.opcode.toString(16)})\");`;\n}\n\nexport class SelfDestruct {\n    readonly name = 'SELFDESTRUCT';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly address: any) {}\n\n    toString = () => `selfdestruct(${stringify(this.address)});`;\n}\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class AND {\n    readonly name = 'AND';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any) {}\n\n    toString() {\n        return stringify(this.left) + ' && ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const left = stack.pop();\n    const right = stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        stack.push(left & right);\n    } else if (typeof left === 'bigint' && /^[f]+$/.test(left.toString(16))) {\n        (right as any).size = left.toString(16).length;\n        stack.push(right);\n    } else if (typeof right === 'bigint' && /^[f]+$/.test(right.toString(16))) {\n        (left as any).size = right.toString(16).length;\n        stack.push(left);\n        /*} else if (\n        typeof left === 'bigint' &&\n        left.equals('1461501637330902918203684832716283019655932542975')\n    ) {*/\n        /* 2 ** 160 */\n        /*    state.stack.push(right);\n    } else if (\n        typeof right === 'bigint' &&\n        right.equals('1461501637330902918203684832716283019655932542975')\n    ) {*/\n        /* 2 ** 160 */\n        /*    state.stack.push(left);*/\n    } else if (\n        typeof left === 'bigint' &&\n        right instanceof AND &&\n        typeof right.left === 'bigint' &&\n        left === right.left\n    ) {\n        stack.push(right.right);\n    } else {\n        stack.push(new AND(left, right));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class CALL {\n    readonly name = 'CALL';\n    readonly type?: string;\n    readonly wrapped = false;\n    throwOnFail = false;\n\n    constructor(\n        readonly gas: any,\n        readonly address: any,\n        readonly value: any,\n        readonly memoryStart: any,\n        readonly memoryLength: any,\n        readonly outputStart: any,\n        readonly outputLength: any\n    ) {}\n\n    toString() {\n        if (\n            typeof this.memoryLength === 'bigint' &&\n            this.memoryLength === 0n &&\n            typeof this.outputLength === 'bigint' &&\n            this.outputLength === 0n\n        ) {\n            if (\n                this.gas.name === 'MUL' &&\n                this.gas.left.name === 'ISZERO' &&\n                typeof this.gas.right === 'bigint' &&\n                this.gas.right === 2300n\n            ) {\n                if (this.throwOnFail) {\n                    return (\n                        'address(' +\n                        stringify(this.address) +\n                        ').transfer(' +\n                        stringify(this.value) +\n                        ')'\n                    );\n                } else {\n                    return (\n                        'address(' +\n                        stringify(this.address) +\n                        ').send(' +\n                        stringify(this.value) +\n                        ')'\n                    );\n                }\n            } else {\n                return (\n                    'address(' +\n                    stringify(this.address) +\n                    ').call.gas(' +\n                    stringify(this.gas) +\n                    ').value(' +\n                    stringify(this.value) +\n                    ')'\n                );\n            }\n        } else {\n            return (\n                'call(' +\n                stringify(this.gas) +\n                ',' +\n                stringify(this.address) +\n                ',' +\n                stringify(this.value) +\n                ',' +\n                stringify(this.memoryStart) +\n                ',' +\n                stringify(this.memoryLength) +\n                ',' +\n                stringify(this.outputStart) +\n                ',' +\n                stringify(this.outputLength) +\n                ')'\n            );\n        }\n    }\n}\n\nexport class ReturnData {\n    readonly name = 'ReturnData';\n    readonly wrapped = false;\n\n    constructor(readonly retOffset: any, readonly retSize: any) {}\n\n    toString() {\n        return `output:ReturnData:${this.retOffset}:${this.retSize}`;\n    }\n}\n\nexport default (_opcode: Opcode, { stack, memory }: EVM): void => {\n    const gas = stack.pop();\n    const address = stack.pop();\n    const value = stack.pop();\n    const memoryStart = stack.pop();\n    const memoryLength = stack.pop();\n    const outputStart = stack.pop();\n    const outputLength = stack.pop();\n    stack.push(new CALL(gas, address, value, memoryStart, memoryLength, outputStart, outputLength));\n\n    // if (typeof outputStart !== 'number') {\n    //     console.log('WARN:CALL outstart should be number');\n    // }\n\n    memory[outputStart as any as number] = new ReturnData(outputStart, outputLength);\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class CALLCODE {\n    readonly name = 'CALLCODE';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(\n        readonly gas: any,\n        readonly address: any,\n        readonly value: any,\n        readonly memoryStart: any,\n        readonly memoryLength: any,\n        readonly outputStart: any,\n        readonly outputLength: any\n    ) {}\n\n    toString() {\n        return (\n            'callcode(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.value) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const gas = stack.pop();\n    const address = stack.pop();\n    const value = stack.pop();\n    const memoryStart = stack.pop();\n    const memoryLength = stack.pop();\n    const outputStart = stack.pop();\n    const outputLength = stack.pop();\n\n    stack.push(\n        new CALLCODE(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","export class CALLDATACOPY {\n    readonly name = 'CALLDATACOPY';\n    readonly type?: string;\n    readonly wrapped: boolean = true;\n\n    constructor(readonly startLocation: any, readonly copyLength: any) {}\n\n    toString() {\n        return `msg.data[${this.startLocation}:(${this.startLocation}+${this.copyLength})];`;\n    }\n}\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class CODECOPY {\n    readonly name = 'CODECOPY';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly startLocation: any, readonly copyLength: any) {}\n\n    toString() {\n        return (\n            'this.code[' +\n            stringify(this.startLocation) +\n            ':(' +\n            stringify(this.startLocation) +\n            '+' +\n            stringify(this.copyLength) +\n            ')]'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack, memory }: EVM): void => {\n    const memoryLocation = stack.pop();\n    const startLocation = stack.pop();\n    const copyLength = stack.pop();\n\n    if (typeof memoryLocation !== 'number') {\n        // throw new Error('expected number for memory location on codecopy');\n    }\n\n    memory[memoryLocation as any] = new CODECOPY(startLocation, copyLength);\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class CREATE {\n    readonly name = 'CREATE';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly memoryStart: any, readonly memoryLength: any, readonly value: any) {\n        // this.name = 'address';\n    }\n\n    toString() {\n        return (\n            '(new Contract(memory[' +\n            stringify(this.memoryStart) +\n            ':(' +\n            stringify(this.memoryStart) +\n            '+' +\n            stringify(this.memoryLength) +\n            ')]).value(' +\n            stringify(this.value) +\n            ')).address'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.stack.push(new CREATE(memoryStart, memoryLength, value));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class CREATE2 {\n    readonly name = 'CREATE2';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly memoryStart: any, readonly memoryLength: any, readonly value: any) {}\n\n    toString() {\n        return (\n            '(new Contract(memory[' +\n            stringify(this.memoryStart) +\n            ':(' +\n            stringify(this.memoryStart) +\n            '+' +\n            stringify(this.memoryLength) +\n            ')]).value(' +\n            stringify(this.value) +\n            ')).address'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const value = stack.pop();\n    const memoryStart = stack.pop();\n    const memoryLength = stack.pop();\n    stack.push(new CREATE2(memoryStart, memoryLength, value));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class DELEGATECALL {\n    readonly name = 'DELEGATECALL';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(\n        readonly gas: any,\n        readonly address: any,\n        readonly memoryStart: any,\n        readonly memoryLength: any,\n        readonly outputStart: any,\n        readonly outputLength: any\n    ) {}\n\n    toString() {\n        return (\n            'delegatecall(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const gas = stack.pop();\n    const address = stack.pop();\n    const memoryStart = stack.pop();\n    const memoryLength = stack.pop();\n    const outputStart = stack.pop();\n    const outputLength = stack.pop();\n    stack.push(\n        new DELEGATECALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import { EVM, Operand } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class SIG {\n    readonly name = 'SIG';\n    readonly wrapped = false;\n\n    constructor(readonly hash: string) {}\n\n    toString = () => `msg.sig == ${this.hash}`;\n}\n\nexport class EQ {\n    readonly name = 'EQ';\n    readonly wrapped = true;\n\n    constructor(readonly left: Operand, readonly right: Operand) {}\n\n    toString = () => `${stringify(this.left)} == ${stringify(this.right)}`;\n}\n\nfunction isSHRCallData(inst: any) {\n    return (\n        inst.name === 'SHR' &&\n        typeof inst.shift === 'bigint' &&\n        inst.shift === 0xe0n &&\n        typeof inst.value !== 'bigint' &&\n        inst.value.name === 'CALLDATALOAD' &&\n        inst.value.location === 0n\n    );\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    let left = stack.pop();\n    let right = stack.pop();\n\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        stack.push(left === right ? 1n : 0n);\n    } else {\n        if (\n            typeof left === 'bigint' &&\n            typeof right !== 'bigint' &&\n            right.name === 'DIV' &&\n            typeof right.right === 'bigint'\n        ) {\n            left = left * right.right;\n            right = right.left;\n        }\n        if (\n            typeof right === 'bigint' &&\n            typeof left !== 'bigint' &&\n            left.name === 'DIV' &&\n            typeof left.right === 'bigint'\n        ) {\n            right = right * left.right;\n            left = left.left;\n        }\n        if (\n            typeof left === 'bigint' &&\n            /^[0]+$/.test(left.toString(16).substring(8)) &&\n            typeof right !== 'bigint' &&\n            right.name === 'CALLDATALOAD' &&\n            right.location === 0n\n        ) {\n            stack.push(\n                new SIG(\n                    '0'.repeat(64 - left.toString(16).length) +\n                        left.toString(16).substring(0, 8 - (64 - left.toString(16).length))\n                )\n            );\n        } else if (\n            typeof right === 'bigint' &&\n            /^[0]+$/.test(right.toString(16).substring(8)) &&\n            typeof left !== 'bigint' &&\n            left.name === 'CALLDATALOAD' &&\n            left.location === 0\n        ) {\n            stack.push(\n                new SIG(\n                    '0'.repeat(64 - right.toString(16).length) +\n                        right.toString(16).substring(0, 8 - (64 - right.toString(16).length))\n                )\n            );\n        } else if (typeof left === 'bigint' && isSHRCallData(right)) {\n            stack.push(new SIG(left.toString(16)));\n        } else {\n            stack.push(new EQ(left, right));\n        }\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODECOPY {\n    readonly name = 'EXTCODECOPY';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly address: any, readonly startLocation: any, readonly copyLength: any) {}\n\n    toString() {\n        return (\n            'address(' +\n            stringify(this.address) +\n            ').code[' +\n            stringify(this.startLocation) +\n            ':(' +\n            stringify(this.startLocation) +\n            '+' +\n            stringify(this.copyLength) +\n            ')]'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack, memory }: EVM): void => {\n    const address = stack.pop();\n    const memoryLocation = stack.pop();\n    const startLocation = stack.pop();\n    const copyLength = stack.pop();\n\n    if (typeof memoryLocation !== 'number') {\n        throw new Error('expected number extcodecopy');\n    }\n\n    memory[memoryLocation] = new EXTCODECOPY(address, startLocation, copyLength);\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODEHASH {\n    readonly name = 'EXTCODEHASH';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly address: any) {}\n\n    toString() {\n        return 'keccak256(address(' + stringify(this.address) + ').code)';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const address = stack.pop();\n    stack.push(new EXTCODEHASH(address));\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODESIZE {\n    readonly name = 'EXTCODESIZE';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly address: any) {}\n\n    toString() {\n        return 'address(' + stringify(this.address) + ').code.length';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const address = stack.pop();\n    stack.push(new EXTCODESIZE(address));\n};\n","import { EVM, Operand } from '../evm';\nimport { Opcode } from '../opcode';\nimport { toHex } from '../hex';\n\nimport { Stop, Add, Mul, Sub, Div, Mod, Exp } from '../inst/math';\nimport { LT, GT, Xor, Not, Byte, Shl, Shr, Sar } from '../inst/logic';\nimport { Address, Balance, CallDataLoad, CALLDATASIZE, CallValue } from '../inst/info';\nimport { BlockHash } from '../inst/block';\nimport { Invalid, SelfDestruct } from '../inst/system';\n\nimport EQ from './eq';\nimport ISZERO from './iszero';\nimport AND from './and';\nimport OR from './or';\nimport SHA3 from './sha3';\nimport { CALLDATACOPY } from './calldatacopy';\nimport CODECOPY from './codecopy';\nimport EXTCODESIZE from './extcodesize';\nimport EXTCODECOPY from './extcodecopy';\nimport RETURNDATASIZE from './returndatasize';\nimport RETURNDATACOPY from './returndatacopy';\nimport EXTCODEHASH from './extcodehash';\nimport { MLOAD } from './mload';\nimport { MSTORE } from './mstore';\nimport SLOAD from './sload';\nimport SSTORE from './sstore';\nimport JUMP from './jump';\nimport JUMPI from './jumpi';\nimport LOG from './log';\nimport CREATE from './create';\nimport CALL from './call';\nimport CALLCODE from './callcode';\nimport { Return } from './return';\nimport DELEGATECALL from './delegatecall';\nimport CREATE2 from './create2';\nimport STATICCALL from './staticcall';\nimport { Revert } from './revert';\n\nexport default {\n    // Stop and Arithmetic Operations (since Frontier)\n    STOP: (_opcode: Opcode, state: EVM) => {\n        state.halted = true;\n        state.instructions.push(new Stop());\n    },\n    ADD: (_opcode: Opcode, { stack }: EVM) => {\n        const left = stack.pop();\n        const right = stack.pop();\n        stack.push(\n            isBigInt(left) && isBigInt(right)\n                ? left + right\n                : isBigInt(left) && left === 0n\n                ? right\n                : isBigInt(right) && right === 0n\n                ? left\n                : new Add(left, right)\n        );\n    },\n    MUL: (_opcode: Opcode, { stack }: EVM) => {\n        const left = stack.pop();\n        const right = stack.pop();\n        stack.push(\n            isBigInt(left) && isBigInt(right)\n                ? left * right\n                : (isBigInt(left) && left === 0n) || (isBigInt(right) && right === 0n)\n                ? 0n\n                : new Mul(left, right)\n        );\n    },\n    SUB: (_opcode: Opcode, { stack }: EVM) => {\n        const left = stack.pop();\n        const right = stack.pop();\n        stack.push(isBigInt(left) && isBigInt(right) ? left - right : new Sub(left, right));\n    },\n    DIV: div,\n    SDIV: div,\n    MOD: mod,\n    SMOD: mod,\n    ADDMOD: (_opcode: Opcode, { stack }: EVM) => {\n        const left = stack.pop();\n        const right = stack.pop();\n        const mod = stack.pop();\n        stack.push(\n            isBigInt(left) && isBigInt(right) && isBigInt(mod)\n                ? (left + right) % mod\n                : isBigInt(left) && isBigInt(right)\n                ? new Mod(left + right, mod)\n                : new Mod(new Add(left, right), mod)\n        );\n    },\n    MULMOD: (_opcode: Opcode, { stack }: EVM) => {\n        const left = stack.pop();\n        const right = stack.pop();\n        const mod = stack.pop();\n        stack.push(\n            isBigInt(left) && isBigInt(right) && isBigInt(mod)\n                ? (left * right) % mod\n                : isBigInt(left) && isBigInt(right)\n                ? new Mod(left * right, mod)\n                : new Mod(new Mul(left, right), mod)\n        );\n    },\n    EXP: (_opcode: Opcode, { stack }: EVM) => {\n        const left = stack.pop();\n        const right = stack.pop();\n        stack.push(isBigInt(left) && isBigInt(right) ? left ** right : new Exp(left, right));\n    },\n    SIGNEXTEND: (_opcode: Opcode, { stack }: EVM) => {\n        const left = stack.pop();\n        const right = stack.pop();\n        stack.push(\n            isBigInt(left) && isBigInt(right)\n                ? (right << (32n - left)) >> (32n - left)\n                : isBigInt(left)\n                ? new Sar(new Shl(right, 32n - left), 32n - left)\n                : new Sar(new Shl(right, new Sub(32n, left)), new Sub(32n, left))\n        );\n    },\n\n    // Comparison & Bitwise Logic Operations (since Constantinople)\n    LT: lt,\n    GT: gt,\n    SLT: lt,\n    SGT: gt,\n    EQ,\n    ISZERO,\n    AND,\n    OR,\n    XOR: (_opcode: Opcode, { stack }: EVM) => {\n        const left = stack.pop();\n        const right = stack.pop();\n        stack.push(isBigInt(left) && isBigInt(right) ? left ^ right : new Xor(left, right));\n    },\n    NOT: (_opcode: Opcode, { stack }: EVM) => {\n        const value = stack.pop();\n        stack.push(isBigInt(value) ? ~value : new Not(value));\n    },\n    BYTE: (_opcode: Opcode, { stack }: EVM) => {\n        const position = stack.pop();\n        const data = stack.pop();\n        stack.push(\n            isBigInt(data) && isBigInt(position)\n                ? (data >> position) & 1n\n                : new Byte(position, data)\n        );\n    },\n    SHL: (_opcode: Opcode, { stack }: EVM) => {\n        const shift = stack.pop();\n        const value = stack.pop();\n        stack.push(isBigInt(value) && isBigInt(shift) ? value << shift : new Shl(value, shift));\n    },\n    SHR: (_opcode: Opcode, { stack }: EVM) => {\n        const shift = stack.pop();\n        const value = stack.pop();\n        stack.push(isBigInt(value) && isBigInt(shift) ? value >> shift : new Shr(value, shift));\n    },\n    SAR: (_opcode: Opcode, { stack }: EVM) => {\n        const shift = stack.pop();\n        const value = stack.pop();\n        stack.push(isBigInt(value) && isBigInt(shift) ? value >> shift : new Sar(value, shift));\n    },\n    SHA3,\n\n    // Environmental Information (since Frontier)\n    ADDRESS: (_opcode: Opcode, { stack }: EVM) => {\n        stack.push(new Address());\n    },\n    BALANCE: (_opcode: Opcode, { stack }: EVM) => {\n        const address = stack.pop();\n        stack.push(new Balance(address));\n    },\n    ORIGIN: symbol('tx.origin'),\n    CALLER: symbol('msg.sender'),\n    CALLVALUE: (_opcode: Opcode, { stack }: EVM) => {\n        stack.push(new CallValue());\n    },\n    CALLDATALOAD: (_opcode: Opcode, { stack }: EVM) => {\n        const location = stack.pop();\n        stack.push(new CallDataLoad(location));\n    },\n    CALLDATASIZE: (_opcode: Opcode, { stack }: EVM) => {\n        stack.push(new CALLDATASIZE());\n    },\n    CALLDATACOPY: (_opcode: Opcode, { stack, memory }: EVM) => {\n        const memoryLocation = stack.pop();\n        const startLocation = stack.pop();\n        const copyLength = stack.pop();\n        if (typeof memoryLocation !== 'number') {\n            // throw new Error('expected number in returndatacopy');\n        }\n        memory[memoryLocation as any] = new CALLDATACOPY(startLocation, copyLength);\n    },\n    CODESIZE: symbol('this.code.length'),\n    CODECOPY,\n    GASPRICE: symbol('tx.gasprice'),\n    EXTCODESIZE,\n    EXTCODECOPY,\n    RETURNDATASIZE,\n    RETURNDATACOPY,\n    EXTCODEHASH,\n\n    // Block Information\n    BLOCKHASH: (_opcode: Opcode, { stack }: EVM) => {\n        const blockNumber = stack.pop();\n        stack.push(new BlockHash(blockNumber));\n    },\n    COINBASE: symbol('block.coinbase'),\n    TIMESTAMP: symbol('block.timestamp'),\n    NUMBER: symbol('block.number'),\n    DIFFICULTY: symbol('block.difficulty'),\n    GASLIMIT: symbol('block.gaslimit'),\n\n    POP: (_opcode: Opcode, { stack }: EVM) => {\n        stack.pop();\n    },\n    MLOAD: (_opcode: Opcode, { stack, memory }: EVM) => {\n        const memoryLocation = stack.pop();\n        stack.push(\n            isBigInt(memoryLocation) && Number(memoryLocation) in memory\n                ? memory[Number(memoryLocation)]\n                : new MLOAD(memoryLocation)\n        );\n    },\n    MSTORE: mstore,\n    MSTORE8: mstore,\n    SLOAD,\n    SSTORE,\n    JUMP,\n    JUMPI,\n    PC: (opcode: Opcode, { stack }: EVM) => {\n        stack.push(BigInt(opcode.pc));\n    },\n    MSIZE: symbol('memory.length'),\n    GAS: symbol('gasleft()'),\n    JUMPDEST: (_opcode: Opcode, _state: EVM) => {\n        /* Empty */\n    },\n    PUSH1: push,\n    PUSH2: push,\n    PUSH3: push,\n    PUSH4: push,\n    PUSH5: push,\n    PUSH6: push,\n    PUSH7: push,\n    PUSH8: push,\n    PUSH9: push,\n    PUSH10: push,\n    PUSH11: push,\n    PUSH12: push,\n    PUSH13: push,\n    PUSH14: push,\n    PUSH15: push,\n    PUSH16: push,\n    PUSH17: push,\n    PUSH18: push,\n    PUSH19: push,\n    PUSH20: push,\n    PUSH21: push,\n    PUSH22: push,\n    PUSH23: push,\n    PUSH24: push,\n    PUSH25: push,\n    PUSH26: push,\n    PUSH27: push,\n    PUSH28: push,\n    PUSH29: push,\n    PUSH30: push,\n    PUSH31: push,\n    PUSH32: push,\n    DUP1: dup(0),\n    DUP2: dup(1),\n    DUP3: dup(2),\n    DUP4: dup(3),\n    DUP5: dup(4),\n    DUP6: dup(5),\n    DUP7: dup(6),\n    DUP8: dup(7),\n    DUP9: dup(8),\n    DUP10: dup(9),\n    DUP11: dup(10),\n    DUP12: dup(11),\n    DUP13: dup(12),\n    DUP14: dup(13),\n    DUP15: dup(14),\n    DUP16: dup(15),\n    SWAP1: swap(1),\n    SWAP2: swap(2),\n    SWAP3: swap(3),\n    SWAP4: swap(4),\n    SWAP5: swap(5),\n    SWAP6: swap(6),\n    SWAP7: swap(7),\n    SWAP8: swap(8),\n    SWAP9: swap(9),\n    SWAP10: swap(10),\n    SWAP11: swap(11),\n    SWAP12: swap(12),\n    SWAP13: swap(13),\n    SWAP14: swap(14),\n    SWAP15: swap(15),\n    SWAP16: swap(16),\n    LOG0: LOG(0),\n    LOG1: LOG(1),\n    LOG2: LOG(2),\n    LOG3: LOG(3),\n    LOG4: LOG(4),\n    CREATE,\n    CALL,\n    CALLCODE,\n    RETURN: (_opcode: Opcode, state: EVM) => {\n        const memoryStart = state.stack.pop();\n        const memoryLength = state.stack.pop();\n        state.halted = true;\n        if (isBigInt(memoryStart) && isBigInt(memoryLength)) {\n            const items = [];\n            for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n                items.push(i in state.memory ? state.memory[i] : new MLOAD(i));\n            }\n            state.instructions.push(new Return(items));\n        } else {\n            state.instructions.push(new Return([], memoryStart, memoryLength));\n        }\n    },\n    DELEGATECALL,\n    CREATE2,\n    STATICCALL,\n    REVERT: (_opcode: Opcode, state: EVM) => {\n        const memoryStart = state.stack.pop();\n        const memoryLength = state.stack.pop();\n        state.halted = true;\n        if (isBigInt(memoryStart) && isBigInt(memoryLength)) {\n            const items = [];\n            for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n                items.push(i in state.memory ? state.memory[i] : new MLOAD(i));\n            }\n            state.instructions.push(new Revert(items));\n        } else {\n            state.instructions.push(new Revert([], memoryStart, memoryLength));\n        }\n    },\n    INVALID: (opcode: Opcode, state: EVM) => {\n        state.halted = true;\n        state.instructions.push(new Invalid(opcode.opcode));\n    },\n    SELFDESTRUCT: (_opcode: Opcode, state: EVM) => {\n        const address = state.stack.pop();\n        state.halted = true;\n        state.instructions.push(new SelfDestruct(address));\n    },\n};\n\nclass Symbol {\n    readonly name = 'SYMBOL';\n    readonly wrapped = false;\n    constructor(readonly symbol: string) {}\n    toString = () => this.symbol;\n}\n\nfunction symbol(value: string) {\n    return (_opcode: Opcode, { stack }: EVM) => {\n        stack.push(new Symbol(value));\n    };\n}\n\nfunction div(_opcode: Opcode, { stack }: EVM) {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(\n        isBigInt(left) && isBigInt(right)\n            ? left / right\n            : isBigInt(right) && right === 1n\n            ? left\n            : new Div(left, right)\n    );\n}\n\nfunction mod(_opcode: Opcode, { stack }: EVM) {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(isBigInt(left) && isBigInt(right) ? left % right : new Mod(left, right));\n}\n\nfunction lt(_opcode: Opcode, { stack }: EVM) {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(isBigInt(left) && isBigInt(right) ? (left < right ? 1n : 0n) : new LT(left, right));\n}\n\nfunction gt(_opcode: Opcode, { stack }: EVM) {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(isBigInt(left) && isBigInt(right) ? (left > right ? 1n : 0n) : new GT(left, right));\n}\n\nfunction push(opcode: Opcode, { stack }: EVM) {\n    stack.push(BigInt('0x' + toHex(opcode.pushData!)));\n}\n\nfunction dup(position: number) {\n    return (_opcode: Opcode, { stack }: EVM): void => {\n        stack.dup(position);\n    };\n}\n\nfunction swap(position: number) {\n    return (_opcode: Opcode, { stack }: EVM): void => {\n        stack.swap(position);\n    };\n}\n\nfunction mstore(_opcode: Opcode, { stack, memory, instructions }: EVM) {\n    const storeLocation = stack.pop();\n    const storeData = stack.pop();\n    if (isBigInt(storeLocation)) {\n        memory[Number(storeLocation)] = storeData;\n    } else {\n        instructions.push(new MSTORE(storeLocation, storeData));\n    }\n}\n\nfunction isBigInt(value: Operand): value is bigint {\n    return typeof value === 'bigint';\n}\n","import { EVM, Operand } from '../evm';\nimport { Opcode } from '../opcode';\nimport { LT, GT } from '../inst/logic';\nimport stringify from '../utils/stringify';\nimport { EQ } from './eq';\n\nexport class IsZero {\n    readonly name = 'ISZERO';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly value: Operand) {}\n\n    toString() {\n        return this.value instanceof EQ\n            ? stringify(this.value.left) + ' != ' + stringify(this.value.right)\n            : stringify(this.value) + ' == 0';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const value = stack.pop();\n    stack.push(\n        typeof value === 'bigint'\n            ? value === 0n\n                ? 1n\n                : 0n\n            : value.name === 'LT'\n            ? new GT(value.left, value.right, !value.equal)\n            : value.name === 'GT'\n            ? new LT(value.left, value.right, !value.equal)\n            : value instanceof IsZero\n            ? value.value\n            : new IsZero(value)\n    );\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class JUMP {\n    readonly name = 'JUMP';\n    readonly type?: string;\n    readonly wrapped: boolean = false;\n    readonly valid: boolean;\n\n    constructor(readonly location: any, bad?: boolean) {\n        this.valid = !bad;\n    }\n\n    toString() {\n        return this.valid\n            ? 'goto(' + stringify(this.location) + ');'\n            : 'revert(\"Bad jump destination\");';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const jumpLocation = state.stack.pop();\n    if (typeof jumpLocation !== 'bigint') {\n        state.halted = true;\n        state.instructions.push(new JUMP(jumpLocation, true));\n    } else {\n        const opcodes = state.getOpcodes();\n        const jumpLocationData = opcodes.find(op => op.pc === Number(jumpLocation));\n        if (!jumpLocationData) {\n            state.halted = true;\n            state.instructions.push(new JUMP(jumpLocation, true));\n        } else {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (!(opcode.pc + ':' + Number(jumpLocation) in state.jumps)) {\n                if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\n                    state.halted = true;\n                    state.instructions.push(new JUMP(jumpLocation, true));\n                } else if (\n                    jumpLocationData &&\n                    jumpIndex >= 0 &&\n                    jumpLocationData.name === 'JUMPDEST'\n                ) {\n                    state.jumps[opcode.pc + ':' + Number(jumpLocation)] = true;\n                    state.pc = jumpIndex;\n                } else {\n                    state.halted = true;\n                    state.instructions.push(new JUMP(jumpLocation, true));\n                }\n            } else {\n                state.halted = true;\n                state.instructions.push(new JUMP(jumpLocation));\n            }\n        }\n    }\n};\n","import { EVM, Instruction, Operand } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\nimport { CALLDATASIZE } from '../inst/info';\nimport { CallValue } from '../inst/info';\nimport { IsZero } from './iszero';\nimport { Return } from './return';\nimport { SLOAD } from './sload';\n\nconst updateCallDataLoad = (item: any, types: any) => {\n    for (const i in item) {\n        if (Object.prototype.hasOwnProperty.call(item, i)) {\n            if (\n                typeof item[i] === 'object' &&\n                item[i].name === 'CALLDATALOAD' &&\n                typeof item[i].location === 'bigint'\n            ) {\n                const argNumber = ((item[i].location - 4n) / 32n).toString();\n                item[i].type = types[argNumber];\n            }\n            if (typeof item[i] === 'object') {\n                updateCallDataLoad(item[i], types);\n            }\n        }\n    }\n};\n\nconst findReturns = (item: any) => {\n    const returns = [];\n    for (const i in item) {\n        if (Object.prototype.hasOwnProperty.call(item, i)) {\n            if (\n                typeof item[i] === 'object' &&\n                item[i].name === 'RETURN' &&\n                item[i].items &&\n                item[i].items.length > 0\n            ) {\n                returns.push(item[i].items);\n            }\n            if (typeof item[i] === 'object') {\n                const deepReturns: any = findReturns(item[i]);\n                if (deepReturns.length > 0) {\n                    returns.push(...deepReturns);\n                }\n            }\n        }\n    }\n    return returns;\n};\n\nexport class TopLevelFunction {\n    readonly label: string;\n    readonly payable: boolean;\n    readonly visibility: string;\n    readonly constant: boolean;\n    readonly returns: any;\n\n    constructor(\n        readonly items: Instruction[],\n        readonly hash: string,\n        readonly gasUsed: number,\n        functionHashes: { [s: string]: string }\n    ) {\n        this.payable = true;\n        this.visibility = 'public';\n        this.constant = false;\n        this.returns = [];\n        if (this.hash in functionHashes) {\n            this.label = (functionHashes as any)[this.hash];\n        } else {\n            this.label = this.hash + '()';\n        }\n        if (\n            this.items.length > 0 &&\n            this.items[0] instanceof Require &&\n            this.items[0].condition instanceof IsZero &&\n            this.items[0].condition.value instanceof CallValue\n        ) {\n            this.payable = false;\n            this.items.shift();\n        }\n        if (this.items.length === 1 && this.items[0].name === 'RETURN') {\n            this.constant = true;\n        }\n        if (this.hash in functionHashes) {\n            const functionName = (functionHashes as any)[this.hash].split('(')[0];\n            const argumentTypes = (functionHashes as any)[this.hash]\n                .replace(functionName, '')\n                .substr(1)\n                .slice(0, -1)\n                .split(',');\n            if (\n                argumentTypes.length > 1 ||\n                (argumentTypes.length === 1 && argumentTypes[0] !== '')\n            ) {\n                this.items.forEach((item: any) => updateCallDataLoad(item, argumentTypes));\n            }\n        }\n        const returns: any = [];\n        this.items.forEach(item => {\n            const deepReturns = findReturns(item);\n            if (deepReturns.length > 0) {\n                returns.push(...deepReturns);\n            }\n        });\n        if (\n            returns.length > 0 &&\n            returns.every(\n                (returnItem: any) =>\n                    returnItem.length === returns[0].length &&\n                    returnItem.map((item: any) => item.type).join('') ===\n                        returns[0].map((item: any) => item.type).join('')\n            )\n        ) {\n            returns[0].forEach((item: any) => {\n                if (typeof item === 'bigint') {\n                    this.returns.push('uint256');\n                } else if (item.type) {\n                    this.returns.push(item.type);\n                } else {\n                    this.returns.push('unknown');\n                }\n            });\n        } else if (returns.length > 0) {\n            this.returns.push('<unknown>');\n        }\n    }\n}\n\nexport class Variable {\n    constructor(public label: string | false, readonly types: any) {}\n}\n\nexport class Require {\n    readonly name = 'REQUIRE';\n    readonly type?: string;\n    readonly wrapped: boolean = true;\n\n    constructor(readonly condition: Operand) {}\n\n    toString() {\n        return 'require(' + stringify(this.condition) + ');';\n    }\n}\n\nexport class JUMPI {\n    readonly name = 'JUMPI';\n    readonly wrapped = true;\n    readonly valid: boolean;\n    readonly true?: any;\n    readonly false?: any;\n    readonly payable?: boolean;\n\n    constructor(\n        readonly condition: any,\n        readonly location: any,\n        ifTrue?: any,\n        ifFalse?: any,\n        skipped?: boolean\n    ) {\n        if (skipped) {\n            this.valid = true;\n        } else if (ifTrue && ifFalse) {\n            this.valid = true;\n            this.true = ifTrue;\n            this.false = ifFalse;\n            if (\n                this.true.length >= 1 &&\n                this.true[0] instanceof Require &&\n                this.true[0].condition instanceof IsZero &&\n                this.true[0].condition.value instanceof CallValue\n            ) {\n                this.payable = false;\n                this.true.shift();\n            } else {\n                this.payable = true;\n            }\n        } else {\n            this.valid = false;\n        }\n    }\n\n    toString() {\n        if (this.valid && this.true && this.false) {\n            return stringify(this.condition);\n        } else if (this.valid) {\n            return 'if' + stringify(this.condition) + ' goto(' + stringify(this.location) + ');';\n        } else {\n            return 'revert(\"Bad jump destination\");';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const jumpLocation = state.stack.pop();\n    const jumpCondition = state.stack.pop();\n    const opcodes = state.getOpcodes();\n    if (typeof jumpLocation !== 'bigint') {\n        state.halted = true;\n        state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n    } else {\n        const jumpLocationData = opcodes.find((o: any) => o.pc === Number(jumpLocation));\n        if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\n            //state.halted = true;\n            //state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            state.instructions.push(new Require(jumpCondition));\n        } else if (typeof jumpCondition === 'bigint') {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (\n                jumpIndex >= 0 &&\n                jumpCondition !== 0n &&\n                !(opcode.pc + ':' + Number(jumpLocation) in state.jumps)\n            ) {\n                state.jumps[opcode.pc + ':' + Number(jumpLocation)] = true;\n                state.pc = jumpIndex;\n            }\n        } else if (\n            !(opcode.pc + ':' + Number(jumpLocation) in state.jumps) &&\n            jumpCondition.name === 'SIG'\n        ) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (jumpIndex >= 0) {\n                const functionClone = state.clone();\n                functionClone.pc = jumpIndex;\n                const functionCloneTree = functionClone.parse();\n                state.functions[jumpCondition.hash] = new TopLevelFunction(\n                    functionCloneTree,\n                    jumpCondition.hash,\n                    functionClone.gasUsed,\n                    state.functionHashes\n                );\n                if (\n                    jumpCondition.hash in state.functionHashes &&\n                    functionCloneTree.length === 1 &&\n                    functionCloneTree[0].name === 'RETURN' &&\n                    functionCloneTree[0].items.every((item: any) => item.name === 'MappingLoad')\n                ) {\n                    functionCloneTree[0].items.forEach((item: any) => {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.mappings[item.location].name = fullFunction.split('(')[0];\n                        if (\n                            item.structlocation &&\n                            !state.mappings[item.location].structs.includes(item.structlocation)\n                        ) {\n                            state.mappings[item.location].structs.push(item.structlocation);\n                        }\n                    });\n                    delete state.functions[jumpCondition.hash];\n                } else if (\n                    jumpCondition.hash in state.functionHashes &&\n                    (items =>\n                        items.length === 1 &&\n                        items[0].name === 'RETURN' &&\n                        items[0].items.length === 1 &&\n                        items[0].items[0] instanceof SLOAD &&\n                        typeof items[0].items[0].location === 'bigint')(\n                        state.functions[jumpCondition.hash].items\n                    )\n                ) {\n                    const item = (state.functions[jumpCondition.hash].items[0] as Return)\n                        .items[0] as SLOAD;\n                    if (!(item.location in state.variables)) {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.variables[item.location] = new Variable(\n                            fullFunction.split('(')[0],\n                            []\n                        );\n                        delete state.functions[jumpCondition.hash];\n                    } else {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.variables[item.location].label = fullFunction.split('(')[0];\n                        delete state.functions[jumpCondition.hash];\n                    }\n                }\n            }\n        } else if (\n            !(opcode.pc + ':' + Number(jumpLocation) in state.jumps) &&\n            ((jumpCondition.name === 'LT' &&\n                jumpCondition.left.name === 'CALLDATASIZE' &&\n                typeof jumpCondition.right === 'bigint' &&\n                jumpCondition.right === 4n) ||\n                (jumpCondition.name === 'ISZERO' && jumpCondition.value instanceof CALLDATASIZE))\n        ) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (jumpIndex >= 0) {\n                state.halted = true;\n                const trueClone = state.clone();\n                trueClone.pc = jumpIndex;\n                trueClone.conditions.push(jumpCondition);\n                const trueCloneTree = trueClone.parse();\n                const falseClone = state.clone();\n                falseClone.pc = state.pc + 1;\n                const falseCloneTree = falseClone.parse();\n                if (\n                    trueCloneTree.length > 0 &&\n                    trueCloneTree.length === falseCloneTree.length &&\n                    trueCloneTree[0].name !== 'REVERT' &&\n                    trueCloneTree[0].name !== 'INVALID' &&\n                    trueCloneTree.map(item => stringify(item)).join('') ===\n                        falseCloneTree.map(item => stringify(item)).join('')\n                ) {\n                    state.functions[''] = new TopLevelFunction(\n                        trueCloneTree,\n                        '',\n                        trueClone.gasUsed,\n                        state.functionHashes\n                    );\n                } else if (\n                    trueCloneTree.length > 0 &&\n                    trueCloneTree[0].name !== 'REVERT' &&\n                    trueCloneTree[0].name !== 'INVALID'\n                ) {\n                    state.instructions.push(\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\n                    );\n                }\n            } else {\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            }\n        } else if (!(opcode.pc + ':' + Number(jumpLocation) in state.jumps)) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            state.jumps[opcode.pc + ':' + Number(jumpLocation)] = true;\n            if (jumpIndex >= 0) {\n                state.halted = true;\n                const trueClone = state.clone();\n                trueClone.pc = jumpIndex;\n                trueClone.conditions.push(jumpCondition);\n                const trueCloneTree = trueClone.parse();\n                const falseClone = state.clone();\n                falseClone.pc = state.pc + 1;\n                const falseCloneTree = falseClone.parse();\n                if (\n                    (falseCloneTree.length === 1 &&\n                        'name' in falseCloneTree[0] &&\n                        falseCloneTree[0].name === 'REVERT' &&\n                        falseCloneTree[0].items &&\n                        falseCloneTree[0].items.length === 0) ||\n                    falseCloneTree[0].name === 'INVALID'\n                ) {\n                    if (\n                        jumpCondition.name === 'CALL' &&\n                        typeof jumpCondition.memoryLength === 'bigint' &&\n                        jumpCondition.memoryLength === 0n &&\n                        typeof jumpCondition.outputLength === 'bigint' &&\n                        jumpCondition.outputLength === 0n &&\n                        jumpCondition.gas.name === 'MUL' &&\n                        jumpCondition.gas.left.name === 'ISZERO' &&\n                        typeof jumpCondition.gas.right === 'bigint' &&\n                        jumpCondition.gas.right === 2300n\n                    ) {\n                        jumpCondition.throwOnFail = true;\n                        state.instructions.push(jumpCondition);\n                        state.instructions.push(...trueCloneTree);\n                    } else {\n                        state.instructions.push(new Require(jumpCondition));\n                        state.instructions.push(...trueCloneTree);\n                    }\n                } else {\n                    state.instructions.push(\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\n                    );\n                }\n            } else {\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            }\n        } else {\n            state.instructions.push(new JUMPI(jumpCondition, jumpLocation, null, null, true));\n        }\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport { MLOAD } from './mload';\n\nexport class LOG {\n    readonly name = 'LOG';\n    readonly type?: string;\n    readonly wrapped = true;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items?: any;\n    readonly eventName?: string;\n\n    constructor(\n        eventHashes: { [s: string]: string },\n        readonly topics: any,\n        items?: any,\n        memoryStart?: any,\n        memoryLength?: any\n    ) {\n        if (\n            this.topics.length > 0 &&\n            typeof this.topics[0] === 'bigint' &&\n            this.topics[0].toString(16) in eventHashes\n        ) {\n            this.eventName = (eventHashes as any)[this.topics[0].toString(16)].split('(')[0];\n            this.topics.shift();\n        }\n        if (this.memoryStart && this.memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.eventName) {\n            return (\n                'emit ' + this.eventName + '(' + [...this.topics, ...this.items].join(', ') + ');'\n            );\n        } else {\n            return 'log(' + [...this.topics, ...this.items].join(', ') + ');';\n        }\n    }\n}\n\nexport default (topicsCount: number) => {\n    return (_opcode: Opcode, state: EVM): void => {\n        const memoryStart = state.stack.pop();\n        const memoryLength = state.stack.pop();\n        const topics = [];\n        for (let i = 0; i < topicsCount; i++) {\n            topics.push(state.stack.pop());\n        }\n        if (topics.length > 0) {\n            const eventTopic = topics[0].toString(16);\n            if (!(eventTopic in state.events)) {\n                state.events[eventTopic] = {};\n                state.events[eventTopic].indexedCount = topics.length - 1;\n                if (eventTopic in state.eventHashes) {\n                    state.events[eventTopic].label = (state.eventHashes as any)[eventTopic];\n                }\n            }\n        }\n        if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n            const items = [];\n            for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n                if (i in state.memory) {\n                    items.push(state.memory[i]);\n                } else {\n                    items.push(new MLOAD(i));\n                }\n            }\n            if (topics.length === 0) {\n                if (!('anonymous' in state.events)) {\n                    state.events['anonymous'] = [];\n                }\n                state.events['anonymous'].push({ items });\n            }\n            state.instructions.push(new LOG(state.eventHashes, topics, items));\n        } else {\n            state.instructions.push(\n                new LOG(state.eventHashes, topics, [], memoryStart, memoryLength)\n            );\n        }\n    };\n};\n","import stringify from '../utils/stringify';\n\nexport class MLOAD {\n    readonly name = 'MLOAD';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly location: any) {}\n\n    toString() {\n        return 'memory[' + stringify(this.location) + ']';\n    }\n}\n","import stringify from '../utils/stringify';\n\nexport class MSTORE {\n    readonly name = 'MSTORE';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly location: any, readonly data: any) {}\n\n    toString() {\n        return 'memory[' + stringify(this.location) + '] = ' + stringify(this.data) + ';';\n    }\n}\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class OR {\n    readonly name = 'OR';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly left: any, readonly right: any) {}\n\n    toString() {\n        return stringify(this.left) + ' || ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const left = stack.pop();\n    const right = stack.pop();\n    stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint' ? left | right : new OR(left, right)\n    );\n};\n","import { Operand } from '../evm';\nimport { hex2a } from '../hex';\nimport stringify from '../utils/stringify';\n\nexport class Return {\n    readonly name = 'RETURN';\n    readonly type?: string;\n    readonly wrapped = true;\n    readonly memoryStart?: Operand;\n    readonly memoryLength?: Operand;\n\n    constructor(readonly items: Operand[], memoryStart?: Operand, memoryLength?: Operand) {\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        }\n    }\n\n    toString(): string {\n        if (this.memoryStart && this.memoryLength) {\n            return (\n                'return memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')];'\n            );\n        } else if (this.items.length === 0) {\n            return 'return;';\n        } else if (\n            this.items.length === 1 &&\n            (typeof this.items[0] === 'bigint' || (this.items[0] as any).static)\n        ) {\n            return 'return ' + this.items[0] + ';';\n        } else if (\n            this.items.length === 3 &&\n            this.items.every((item: any) => typeof item === 'bigint') &&\n            this.items[0] === 32n\n        ) {\n            return 'return \"' + hex2a(this.items[2].toString(16)) + '\";';\n        } else {\n            return 'return(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\n        }\n    }\n}\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class RETURNDATACOPY {\n    readonly name = 'RETURNDATACOPY';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly returnDataPosition: any, readonly returnDataSize: any) {}\n\n    toString() {\n        return (\n            'output[' +\n            stringify(this.returnDataPosition) +\n            ':(' +\n            stringify(this.returnDataPosition) +\n            '+' +\n            stringify(this.returnDataSize) +\n            ')]'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack, memory }: EVM): void => {\n    const memoryPosition = stack.pop();\n    const returnDataPosition = stack.pop();\n    const returnDataSize = stack.pop();\n\n    if (typeof memoryPosition !== 'number') {\n        // throw new Error('expected number in returndatacopy');\n    }\n\n    memory[memoryPosition as any] = new RETURNDATACOPY(returnDataPosition, returnDataSize);\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\n\nexport class RETURNDATASIZE {\n    readonly name = 'RETURNDATASIZE';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    toString() {\n        return 'output.length';\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    stack.push(new RETURNDATASIZE());\n};\n","import stringify from '../utils/stringify';\n\nexport class Revert {\n    readonly name = 'REVERT';\n    readonly type?: string;\n    readonly wrapped = true;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.items) {\n            return 'revert(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\n        } else {\n            return (\n                'revert(memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')]);'\n            );\n        }\n    }\n}\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport { MLOAD } from './mload';\nimport stringify from '../utils/stringify';\n\nexport class SHA3 {\n    readonly name = 'SHA3';\n    readonly type?: string;\n    readonly wrapped = false;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.items) {\n            return 'keccak256(' + this.items.map((item: any) => stringify(item)).join(', ') + ')';\n        } else {\n            return (\n                'keccak256(memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')])'\n            );\n        }\n    }\n}\n\nexport default (_opcode: Opcode, { stack, memory }: EVM): void => {\n    const memoryStart = stack.pop();\n    const memoryLength = stack.pop();\n    if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n        const items = [];\n        for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n            items.push(i in memory ? memory[i] : new MLOAD(i));\n        }\n        stack.push(new SHA3(items));\n    } else {\n        stack.push(new SHA3([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\nimport { SHA3 } from './sha3';\n\nconst parseMapping = (...items: any[]) => {\n    const mappings: any = [];\n    items.forEach((item2: any) => {\n        if (item2.name === 'SHA3' && item2.items) {\n            mappings.push(...parseMapping(...item2.items));\n        } else {\n            mappings.push(item2);\n        }\n    });\n    return mappings;\n};\n\nexport class MappingLoad {\n    readonly name = 'MappingLoad';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    constructor(\n        readonly mappings: any,\n        readonly location: any,\n        readonly items: any,\n        readonly count: any,\n        readonly structlocation?: any\n    ) {}\n\n    toString() {\n        let mappingName = 'mapping' + (this.count + 1);\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\n            mappingName = this.mappings()[this.location].name;\n        }\n        if (this.structlocation) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                '[' +\n                this.structlocation.toString() +\n                ']'\n            );\n        } else {\n            return (\n                mappingName + this.items.map((item: any) => '[' + stringify(item) + ']').join('')\n            );\n        }\n    }\n}\n\nexport class SLOAD {\n    readonly name = 'SLOAD';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    constructor(readonly location: any, readonly variables: any) {}\n\n    toString() {\n        if (typeof this.location === 'bigint' && this.location.toString() in this.variables()) {\n            if (this.variables()[this.location.toString()].label) {\n                return this.variables()[this.location.toString()].label;\n            } else {\n                return (\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1)\n                );\n            }\n        } else {\n            return 'storage[' + stringify(this.location) + ']';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    if (typeof storeLocation !== 'bigint' && storeLocation.name === 'SHA3') {\n        const mappingItems = parseMapping(...storeLocation.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else if (\n        typeof storeLocation !== 'bigint' &&\n        storeLocation.name === 'ADD' &&\n        storeLocation.left instanceof SHA3 &&\n        typeof storeLocation.right === 'bigint'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.left.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.right\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else if (\n        typeof storeLocation !== 'bigint' &&\n        storeLocation.name === 'ADD' &&\n        typeof storeLocation.left === 'bigint' &&\n        storeLocation.right instanceof SHA3\n    ) {\n        const mappingItems = parseMapping(...storeLocation.right.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.left\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else {\n        state.stack.push(new SLOAD(storeLocation, () => state.variables));\n    }\n};\n","import { EVM, Operand } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\nimport { Variable } from './jumpi';\nimport { SHA3 } from './sha3';\n\nconst parseMapping = (...items: any[]) => {\n    const mappings: any = [];\n    items.forEach((item2: any) => {\n        if (item2.name === 'SHA3' && item2.items) {\n            mappings.push(...parseMapping(...item2.items));\n        } else {\n            mappings.push(item2);\n        }\n    });\n    return mappings;\n};\n\nexport class MappingStore {\n    readonly name = 'MappingStore';\n    readonly type?: string;\n    readonly wrapped = false;\n\n    constructor(\n        readonly mappings: any,\n        readonly location: any,\n        readonly items: any,\n        readonly data: any,\n        readonly count: any,\n        readonly structlocation?: any\n    ) {}\n\n    toString() {\n        let mappingName = 'mapping' + (this.count + 1);\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\n            mappingName = this.mappings()[this.location].name;\n        }\n        if (\n            this.data.name === 'ADD' &&\n            this.data.right.name === 'MappingLoad' &&\n            stringify(this.data.right.location) === stringify(this.location)\n        ) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' += ' +\n                stringify(this.data.left) +\n                ';'\n            );\n        } else if (\n            this.data.name === 'ADD' &&\n            this.data.left.name === 'MappingLoad' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' += ' +\n                stringify(this.data.right) +\n                ';'\n            );\n        } else if (\n            this.data.name === 'SUB' &&\n            this.data.left.name === 'MappingLoad' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' -= ' +\n                stringify(this.data.right) +\n                ';'\n            );\n        } else {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' = ' +\n                stringify(this.data) +\n                ';'\n            );\n        }\n    }\n}\n\nexport class SSTORE {\n    readonly name = 'SSTORE';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(readonly location: Operand, readonly data: any, readonly variables: any) {\n        if (typeof this.location === 'bigint' && this.location.toString() in this.variables()) {\n            this.variables()[this.location.toString()].types.push(() => this.data.type);\n        } else if (\n            typeof this.location === 'bigint' &&\n            !(this.location.toString() in this.variables())\n        ) {\n            this.variables()[this.location.toString()] = new Variable(false, [\n                () => this.data.type,\n            ]);\n        }\n    }\n\n    toString() {\n        let variableName = 'storage[' + stringify(this.location) + ']';\n        if (typeof this.location === 'bigint' && this.location.toString() in this.variables()) {\n            if (this.variables()[this.location.toString()].label) {\n                variableName = this.variables()[this.location.toString()].label;\n            } else {\n                variableName =\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1);\n            }\n        }\n        if (\n            this.data.name === 'ADD' &&\n            this.data.right.name === 'SLOAD' &&\n            stringify(this.data.right.location) === stringify(this.location)\n        ) {\n            return variableName + ' += ' + stringify(this.data.left) + ';';\n        } else if (\n            this.data.name === 'SUB' &&\n            this.data.left.name === 'SLOAD' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return variableName + ' -= ' + stringify(this.data.right) + ';';\n        } else {\n            return variableName + ' = ' + stringify(this.data) + ';';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    const storeData = state.stack.pop();\n    if (typeof storeLocation === 'bigint') {\n        // throw new Error('bigint not expected in sstore');\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n    } else if (storeLocation.name === 'SHA3') {\n        const mappingItems = parseMapping(...storeLocation.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.mappings[mappingLocation].values.push(storeData);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        storeLocation.left instanceof SHA3 &&\n        typeof storeLocation.right === 'bigint'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.left.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.right\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        typeof storeLocation.left === 'bigint' &&\n        storeLocation.right instanceof SHA3\n    ) {\n        const mappingItems = parseMapping(...storeLocation.right.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.left\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        // eslint-disable-next-line no-constant-condition\n        false &&\n        // typeof storeLocation === 'bigint' &&\n        storeLocation.toString() in state.variables //&&\n        // storeData.type &&\n        // (!)state.variables[storeLocation.toString()].types.includes(storeData.type)\n    ) {\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        // state.variables[storeLocation.toString()].types.push(storeData.type);\n    } else {\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n    }\n};\n","import { EVM } from '../evm';\nimport { Opcode } from '../opcode';\nimport stringify from '../utils/stringify';\n\nexport class STATICCALL {\n    readonly name = 'STATICCALL';\n    readonly type?: string;\n    readonly wrapped = true;\n\n    constructor(\n        readonly gas: any,\n        readonly address: any,\n        readonly memoryStart: any,\n        readonly memoryLength: any,\n        readonly outputStart: any,\n        readonly outputLength: any\n    ) {}\n\n    toString() {\n        return (\n            'staticcall(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, { stack }: EVM): void => {\n    const gas = stack.pop();\n    const address = stack.pop();\n    const memoryStart = stack.pop();\n    const memoryLength = stack.pop();\n    const outputStart = stack.pop();\n    const outputLength = stack.pop();\n    stack.push(new STATICCALL(gas, address, memoryStart, memoryLength, outputStart, outputLength));\n};\n","export class Stack<T> {\n    elements: T[];\n\n    constructor() {\n        this.elements = [];\n    }\n\n    push(item: T): void {\n        if (this.elements.length >= 1024) {\n            throw new Error('Stack too deep');\n        } else {\n            this.elements.unshift(item);\n        }\n    }\n\n    pop(): T | never {\n        if (this.elements.length === 0) {\n            throw new Error('POP with empty stack');\n        } else {\n            return this.elements.shift()!;\n        }\n    }\n\n    dup(position: number): void | never {\n        if (position < 0 || position > 15) {\n            throw new Error('Unsupported position for duplication operation');\n        } else if (!(position in this.elements)) {\n            throw new Error(\n                \"Invalid duplication operation, provided position wasn't found in stack\"\n            );\n        } else {\n            this.push(this.elements[position]);\n        }\n    }\n\n    swap(secondPosition: number): void | never {\n        if (secondPosition < 1 || secondPosition > 16) {\n            throw new Error('Unsupported position for swap operation');\n        } else if (!(secondPosition in this.elements)) {\n            throw new Error(\"Invalid swap operation, provided position wasn't found in stack\");\n        } else {\n            const firstValue = this.elements[0];\n            const secondValue = this.elements[secondPosition];\n            this.elements[0] = secondValue;\n            this.elements[secondPosition] = firstValue;\n        }\n    }\n\n    clone(): Stack<T> {\n        const stack = new Stack<T>();\n        stack.elements = [...this.elements];\n        return stack;\n    }\n\n    reset(): void {\n        this.elements = [];\n    }\n}\n","const parseSingle = (data: any, type: any) => {\n    if (type === 'string') {\n        return '\"' + Buffer.from(data, 'hex').toString('utf8') + '\"';\n    } else if (type === 'address') {\n        return '0x' + data.substring(24);\n    } else if (type === 'uint256' || type === 'uint8') {\n        return BigInt('0x' + data).toString();\n    } else if (type === 'bool') {\n        return (BigInt('0x' + data) !== 0n).toString();\n    } else {\n        return data;\n    }\n};\n\nexport class Transaction {\n    blockHash?: string;\n    blockNumber?: number;\n    from?: string;\n    gas?: number;\n    gasPrice?: number;\n    input?: string;\n    to?: string;\n    value?: number;\n\n    constructor(transactionObject?: any) {\n        if (transactionObject) {\n            if ('blockHash' in transactionObject) {\n                this.blockHash = transactionObject.blockHash;\n            }\n            if ('blockNumber' in transactionObject) {\n                this.blockNumber = transactionObject.blockNumber;\n            }\n            if ('from' in transactionObject) {\n                this.from = transactionObject.from;\n            }\n            if ('gas' in transactionObject) {\n                this.gas = transactionObject.gas;\n            }\n            if ('gasPrice' in transactionObject) {\n                this.gasPrice = transactionObject.gasPrice;\n            }\n            if ('input' in transactionObject) {\n                this.input = transactionObject.input.replace('0x', '');\n            }\n            if ('to' in transactionObject) {\n                this.to = transactionObject.to;\n            }\n            if ('value' in transactionObject) {\n                this.value = transactionObject.value;\n            }\n        }\n    }\n\n    setInput(input: string): void {\n        this.input = input.replace('0x', '');\n    }\n\n    getFunctionHash(): string | false {\n        if (this.input && this.input.length >= 8) {\n            return this.input.substr(0, 8);\n        } else {\n            return false;\n        }\n    }\n\n    getFunction(functionHashes: { [s: string]: string }): string | false {\n        const functionHash = this.getFunctionHash();\n        if (functionHash && functionHash in functionHashes) {\n            return (functionHashes as any)[functionHash];\n        } else {\n            return false;\n        }\n    }\n\n    getFunctionName(functionHashes: { [s: string]: string }): string | false {\n        const rawFunction = this.getFunction(functionHashes);\n        if (rawFunction) {\n            return rawFunction.split('(')[0];\n        } else {\n            return false;\n        }\n    }\n\n    getRawArguments(): string[] {\n        if (this.input && this.input.length >= 70) {\n            return this.input.substr(8).match(/.{1,64}/g)!;\n        } else {\n            return [];\n        }\n    }\n\n    getArguments(functionHashes: { [s: string]: string }, _descriptive = true): string[] {\n        const functionName = this.getFunction(functionHashes);\n        const functionArguments = this.getRawArguments();\n        if (functionName && this.input) {\n            const rawFunctionArguments = functionName.split('(')[1].slice(0, -1).split(',');\n            if (\n                rawFunctionArguments.length === 1 &&\n                rawFunctionArguments[0] === '' &&\n                functionArguments.length === 0\n            ) {\n                return [];\n            } else {\n                const result: string[] = [];\n                for (let i = 0; i < rawFunctionArguments.length; i++) {\n                    const functionArgumentType = rawFunctionArguments[i] || 'unknown';\n                    const functionArgument = functionArguments[i];\n                    if (functionArgumentType === 'string') {\n                        const location = Number(BigInt('0x' + functionArgument) / 32n);\n                        const length = Number(BigInt('0x' + functionArguments[location]) * 2n);\n                        const data = this.input.substring(8).substr((location + 1) * 64, length);\n                        result.push(parseSingle(data, functionArgumentType));\n                    } else {\n                        result.push(parseSingle(functionArgument, functionArgumentType));\n                    }\n                }\n                return result;\n            }\n        } else {\n            return functionArguments;\n        }\n    }\n\n    isContractCreation(): boolean {\n        return this.to === null;\n    }\n}\n","export default (value: bigint | { wrapped: boolean }): string => {\n    return typeof value === 'bigint'\n        ? value.toString(16)\n        : !value.wrapped\n        ? value.toString()\n        : `(${value.toString()})`;\n};\n","export default (stateEvents: any, events: string[]) => {\n    const stateEventValues = Object.keys(stateEvents).map((key: string) => stateEvents[key]);\n    let output = '';\n\n    events.forEach((event: string) => {\n        const eventName = event.split('(')[0];\n        const eventArguments = event.replace(eventName, '').substring(1).slice(0, -1);\n        output += 'event ';\n        if (eventArguments) {\n            output += eventName + '(';\n            output += eventArguments\n                .split(',')\n                .map((a: string, i: number) => {\n                    const stateEvent = stateEventValues.find((e: any) => e.label === event);\n                    if (stateEvent && i < stateEvent.indexedCount) {\n                        return a + ' indexed _arg' + i;\n                    } else {\n                        return a + ' _arg' + i;\n                    }\n                })\n                .join(', ');\n            output += ');';\n        } else {\n            output += event;\n        }\n        output += '\\n';\n    });\n\n    if (events.length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","import { stringifyInstructions } from './stringifyInstructions';\n\nexport default (\n    functionName: string,\n    functionInstance: any,\n    functionHashes: { [s: string]: string }\n): string => {\n    let output = '';\n    output += 'function ';\n    if (functionName in functionHashes) {\n        const fullFunction = (functionHashes as any)[functionName];\n        const fullFunctionName = fullFunction.split('(')[0];\n        const fullFunctionArguments = fullFunction\n            .replace(fullFunctionName, '')\n            .substring(1)\n            .slice(0, -1);\n        if (fullFunctionArguments) {\n            output += fullFunctionName + '(';\n            output += fullFunctionArguments\n                .split(',')\n                .map((a: string, i: number) => a + ' _arg' + i)\n                .join(', ');\n            output += ')';\n        } else {\n            output += fullFunction;\n        }\n    } else {\n        output += functionName + '()';\n    }\n    output += ' ' + functionInstance.visibility;\n    if (functionInstance.constant) {\n        output += ' view';\n    }\n    if (functionInstance.payable) {\n        output += ' payable';\n    }\n    if (functionInstance.returns.length > 0) {\n        output += ' returns (' + functionInstance.returns.join(', ') + ')';\n    }\n    output += ' {\\n';\n    output += stringifyInstructions(functionInstance.items, 4);\n    output += '}\\n\\n';\n    return output;\n};\n","/**\n *\n * @param instructionTree\n * @param indentation\n * @returns\n */\nexport function stringifyInstructions(instructionTree: any, indentation = 0): string {\n    let lines = '';\n    instructionTree.forEach((instruction: any) => {\n        if (instruction.name === 'JUMPI' && instruction.false) {\n            const condition = instruction.toString();\n            const falseInstructions = instruction.false.filter((i: any) => i.debugLevel > 0);\n            if (falseInstructions.length === 1 && falseInstructions[0].name === 'JUMPI') {\n                lines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\n                lines += stringifyInstructions(instruction.true, indentation + 4);\n                lines += ' '.repeat(indentation) + '} else ';\n                const elseOrElseIf = stringifyInstructions(instruction.false, indentation);\n                if (elseOrElseIf.trim().startsWith('if')) {\n                    lines += elseOrElseIf.trim() + '\\n';\n                } else {\n                    lines +=\n                        '{\\n' +\n                        elseOrElseIf\n                            .split('\\n')\n                            .filter(l => l)\n                            .map(l => ' '.repeat(4) + l)\n                            .join('\\n');\n                    lines += '\\n' + ' '.repeat(indentation) + '}\\n';\n                }\n            } else {\n                lines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\n                lines += stringifyInstructions(instruction.true, indentation + 4);\n                lines += ' '.repeat(indentation) + '} else {\\n';\n                lines += stringifyInstructions(instruction.false, indentation + 4);\n                lines += ' '.repeat(indentation) + '}\\n';\n            }\n        } else {\n            lines += ' '.repeat(indentation) + instruction.toString() + '\\n';\n        }\n    });\n    return lines;\n}\n","const stringifyMapping = (mapping: any) => {\n    const mappingKey: string[] = [];\n    const mappingValue: string[] = [];\n    let deepMapping = false;\n    mapping.keys\n        .filter((mappingChild: any) => mappingChild.length > 0)\n        .forEach((mappingChild: any) => {\n            if (\n                mappingChild.length > 0 &&\n                mappingChild[0].type &&\n                !mappingKey.includes(mappingChild[0].type)\n            ) {\n                mappingKey.push(mappingChild[0].type);\n            }\n            if (mappingChild.length > 1 && !deepMapping) {\n                deepMapping = true;\n                mappingValue.push(\n                    stringifyMapping({\n                        name: mapping.name,\n                        structs: mapping.structs,\n                        keys: mapping.keys.map((items: any) => {\n                            items.shift();\n                            return items;\n                        }),\n                        values: mapping.values,\n                    })\n                );\n            } else if (mappingChild.length === 1 && !deepMapping) {\n                mapping.values.forEach((mappingChild2: any) => {\n                    if (mappingChild2.type && !mappingValue.includes(mappingChild2.type)) {\n                        mappingValue.push(mappingChild2.type);\n                    }\n                });\n            }\n        });\n    if (mappingKey.length === 0) {\n        mappingKey.push('unknown');\n    }\n    if (mapping.structs.length > 0 && mappingValue.length === 0) {\n        mappingValue.push(mapping.name + 'Struct');\n    } else if (mappingValue.length === 0) {\n        mappingValue.push('unknown');\n    }\n    return 'mapping (' + mappingKey.join('|') + ' => ' + mappingValue.join('|') + ')';\n};\n\nexport default (mappings: any) => {\n    let output = '';\n\n    Object.keys(mappings).forEach((key: string, index: number) => {\n        const mapping = mappings[key];\n        if (mapping.name) {\n            output += stringifyMapping(mapping) + ' public ' + mapping.name + ';';\n        } else {\n            output += stringifyMapping(mapping) + ' mapping' + (index + 1) + ';';\n        }\n        output += '\\n';\n    });\n\n    if (Object.keys(mappings).length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","export default (mappings: any) => {\n    let output = '';\n\n    Object.keys(mappings)\n        .filter((key: any) => mappings[key].structs.length > 0)\n        .forEach((key: string, _index: number) => {\n            const mapping = mappings[key];\n            output += 'struct ' + mapping.name + 'Struct {\\n';\n            mapping.structs.forEach((struct: any) => {\n                output += '    ' + struct.toString() + ';\\n';\n            });\n            output += '}\\n\\n';\n        });\n\n    return output;\n};\n","export default (variables: any) => {\n    let output = '';\n\n    Object.keys(variables).forEach((key: string, index: number) => {\n        const variable = variables[key];\n        const types = variable.types\n            .map((type: any) => {\n                if (typeof type === 'function') {\n                    return type();\n                } else {\n                    return type;\n                }\n            })\n            .filter((type: any) => type);\n        if (types.length === 0) {\n            types.push('unknown');\n        }\n        if (variable.label) {\n            output += [...new Set(types)].join('|') + ' public ' + variable.label + ';';\n        } else {\n            output += [...new Set(types)].join('|') + ' var' + (index + 1).toString() + ';';\n            index++;\n        }\n        output += '\\n';\n    });\n\n    if (Object.keys(variables).length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(341);\n"],"names":["root","factory","exports","module","define","amd","a","i","self","STOP","ADD","MUL","SUB","DIV","SDIV","MOD","SMOD","ADDMOD","MULMOD","EXP","SIGNEXTEND","LT","GT","SLT","SGT","EQ","ISZERO","AND","OR","XOR","NOT","BYTE","SHL","SHR","SAR","SHA3","ADDRESS","BALANCE","ORIGIN","CALLER","CALLVALUE","CALLDATALOAD","CALLDATASIZE","CALLDATACOPY","CODESIZE","CODECOPY","GASPRICE","EXTCODESIZE","EXTCODECOPY","RETURNDATASIZE","RETURNDATACOPY","EXTCODEHASH","BLOCKHASH","COINBASE","TIMESTAMP","NUMBER","DIFFICULTY","GASLIMIT","POP","MLOAD","MSTORE","MSTORE8","SLOAD","SSTORE","JUMP","JUMPI","PC","MSIZE","GAS","JUMPDEST","PUSH1","PUSH2","PUSH3","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH30","PUSH31","PUSH32","DUP1","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","SWAP1","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","LOG0","LOG1","LOG2","LOG3","LOG4","CREATE","CALL","CALLCODE","RETURN","DELEGATECALL","CREATE2","STATICCALL","REVERT","INVALID","SELFDESTRUCT","codes","names","EVM","constructor","code","functionHashes","eventHashes","pc","stack","Stack","memory","opcodes","instructions","jumps","mappings","layer","halted","functions","variables","events","gasUsed","conditions","Uint8Array","this","fromHex","replace","clone","getBytecode","toHex","getOpcodes","length","index","currentOp","opcode","name","toString","padStart","toUpperCase","pushData","push","startsWith","pushDataLength","subarray","getFunctions","Set","filter","map","hash","getEvents","containsOpcode","Error","currentOpcode","includes","getJumpDestinations","getSwarmHash","match","getABI","abi","parse","Object","keys","forEach","key","item","type","label","split","payable","constant","reset","decompile","instructionTree","functionName","join","stringifyInstructions","isERC165","every","v","hex2a","hexx","hex","str","substr","String","fromCharCode","parseInt","isHex","h","test","data","repeat","pieces","stringLength","isNaN","buffer","reduce","elem","Transaction","blockNumber","wrapped","address","location","left","right","equal","value","position","shift","_opcode","pop","size","gas","memoryStart","memoryLength","outputStart","outputLength","throwOnFail","ReturnData","retOffset","retSize","startLocation","copyLength","memoryLocation","state","SIG","inst","substring","Stop","isBigInt","Add","Mul","Sub","div","mod","Mod","Exp","Sar","Shl","lt","gt","Xor","Not","Byte","Shr","Address","Balance","symbol","CallValue","CallDataLoad","BlockHash","Number","mstore","BigInt","_state","dup","swap","items","Return","Revert","Invalid","SelfDestruct","Symbol","Div","storeLocation","storeData","IsZero","bad","valid","jumpLocation","jumpLocationData","find","op","jumpIndex","indexOf","updateCallDataLoad","types","prototype","hasOwnProperty","call","argNumber","findReturns","returns","deepReturns","TopLevelFunction","visibility","Require","condition","argumentTypes","slice","returnItem","Variable","ifTrue","ifFalse","skipped","true","false","jumpCondition","o","trueClone","trueCloneTree","falseClone","falseCloneTree","functionClone","functionCloneTree","fullFunction","structlocation","structs","LOG","topics","eventName","topicsCount","eventTopic","indexedCount","static","returnDataPosition","returnDataSize","memoryPosition","parseMapping","item2","MappingLoad","count","mappingName","mappingItems","mappingLocation","mappingItem","mappingParts","values","MappingStore","variableName","elements","unshift","secondPosition","firstValue","secondValue","parseSingle","Buffer","from","transactionObject","blockHash","gasPrice","input","to","setInput","getFunctionHash","getFunction","functionHash","getFunctionName","rawFunction","getRawArguments","getArguments","_descriptive","functionArguments","rawFunctionArguments","result","functionArgumentType","functionArgument","isContractCreation","stateEvents","stateEventValues","output","event","eventArguments","stateEvent","e","functionInstance","fullFunctionName","fullFunctionArguments","indentation","lines","instruction","falseInstructions","debugLevel","elseOrElseIf","trim","l","stringifyMapping","mapping","mappingKey","mappingValue","deepMapping","mappingChild","mappingChild2","_index","struct","variable","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}