{"version":3,"file":"EVM.node.js","mappings":"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AAC,WAAa,IACb,EAAA3M,OAAS,IACT,EAAAC,QAAU,IACV,EAAAC,aAAe,IAEf,EAAArB,MAAQ,CACjB,EAAM,OACN,EAAM,MACN,EAAM,MACN,EAAM,MACN,EAAM,MACN,EAAM,OACN,EAAM,MACN,EAAM,OACN,EAAM,SACN,EAAM,SACN,GAAM,MACN,GAAM,aACN,GAAM,KACN,GAAM,KACN,GAAM,MACN,GAAM,MACN,GAAM,KACN,GAAM,SACN,GAAM,MACN,GAAM,KACN,GAAM,MACN,GAAM,MACN,GAAM,OACN,GAAM,MACN,GAAM,MACN,GAAM,MACN,GAAM,OACN,GAAM,UACN,GAAM,UACN,GAAM,SACN,GAAM,SACN,GAAM,YACN,GAAM,eACN,GAAM,eACN,GAAM,eACN,GAAM,WACN,GAAM,WACN,GAAM,WACN,GAAM,cACN,GAAM,cACN,GAAM,iBACN,GAAM,iBACN,GAAM,cACN,GAAM,YACN,GAAM,WACN,GAAM,YACN,GAAM,SACN,GAAM,aACN,GAAM,WACN,GAAM,MACN,GAAM,QACN,GAAM,SACN,GAAM,UACN,GAAM,QACN,GAAM,SACN,GAAM,OACN,GAAM,QACN,GAAM,KACN,GAAM,QACN,GAAM,MACN,GAAM,WACN,GAAM,QACN,GAAM,QACN,GAAM,QACN,GAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QA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EAAM,IAAInE,U,CAK9B,OAAOmE,C,mEClCf,gBACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,WACA,WAEA,UAAe,CACX3C,KAAA,UACA0E,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,KAAM,UACNC,IAAA,UACAC,KAAM,UACNC,OAAA,UACAC,OAAA,UACAC,IAAA,UACAC,WAAA,UACAC,GAAA,UACAC,GAAA,UACAC,IAAK,UACLC,IAAK,UACLC,GAAA,UACAC,OAAA,UACAC,IAAA,UACAC,GAAA,UACAC,IAAA,UACAC,IAAA,UACAC,KAAA,UACAC,IAAA,UACAC,IAAA,UACAC,IAAA,UACAC,KAAA,UACAC,QAAA,UACAC,QAAA,UACAC,OAAA,UACAC,OAAA,UACAC,UAAA,UACAC,aAAA,UACAC,aAAA,UACAC,aAAA,UACAC,SAAA,UACAC,SAAA,UACAC,SAAA,UACAC,YAAA,UACAC,YAAA,UACAC,eAAA,UACAC,eAAA,UACAC,YAAA,UACAC,UAAA,UACAC,SAAA,UACAC,UAAA,UACAC,OAAA,UACAC,WAAA,UACAC,SAAA,UACAC,IAAA,UACAC,MAAA,UACAC,OAAA,UACAC,QAAS,UACTC,MAAA,UACAC,OAAA,UACAC,KAAA,UACAC,MAAA,WACAC,GAAA,WACAC,MAAA,WACAC,IAAA,WACArI,SAAA,WACAO,MAAO,WACP+H,MAAO,WACPC,MAAO,WACPC,MAAO,WACPC,MAAO,WACPC,MAAO,WACPC,MAAO,WACPC,MAAO,WACPC,MAAO,WACPC,OAAQ,WACRC,OAAQ,WACRC,OAAQ,W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","sources":["webpack://evm/./src/classes/evm.class.ts","webpack://evm/./src/classes/stack.class.ts","webpack://evm/./src/classes/tx.class.ts","webpack://evm/./src/index.ts","webpack://evm/./src/opcodes.ts","webpack://evm/./src/opcodes/add.ts","webpack://evm/./src/opcodes/addmod.ts","webpack://evm/./src/opcodes/address.ts","webpack://evm/./src/opcodes/and.ts","webpack://evm/./src/opcodes/balance.ts","webpack://evm/./src/opcodes/blockhash.ts","webpack://evm/./src/opcodes/byte.ts","webpack://evm/./src/opcodes/call.ts","webpack://evm/./src/opcodes/callcode.ts","webpack://evm/./src/opcodes/calldatacopy.ts","webpack://evm/./src/opcodes/calldataload.ts","webpack://evm/./src/opcodes/calldatasize.ts","webpack://evm/./src/opcodes/caller.ts","webpack://evm/./src/opcodes/callvalue.ts","webpack://evm/./src/opcodes/codecopy.ts","webpack://evm/./src/opcodes/codesize.ts","webpack://evm/./src/opcodes/coinbase.ts","webpack://evm/./src/opcodes/create.ts","webpack://evm/./src/opcodes/create2.ts","webpack://evm/./src/opcodes/delegatecall.ts","webpack://evm/./src/opcodes/difficulty.ts","webpack://evm/./src/opcodes/div.ts","webpack://evm/./src/opcodes/dup.ts","webpack://evm/./src/opcodes/eq.ts","webpack://evm/./src/opcodes/exp.ts","webpack://evm/./src/opcodes/extcodecopy.ts","webpack://evm/./src/opcodes/extcodehash.ts","webpack://evm/./src/opcodes/extcodesize.ts","webpack://evm/./src/opcodes/gas.ts","webpack://evm/./src/opcodes/gaslimit.ts","webpack://evm/./src/opcodes/gasprice.ts","webpack://evm/./src/opcodes/gt.ts","webpack://evm/./src/opcodes/invalid.ts","webpack://evm/./src/opcodes/iszero.ts","webpack://evm/./src/opcodes/jump.ts","webpack://evm/./src/opcodes/jumpdest.ts","webpack://evm/./src/opcodes/jumpi.ts","webpack://evm/./src/opcodes/log.ts","webpack://evm/./src/opcodes/lt.ts","webpack://evm/./src/opcodes/mload.ts","webpack://evm/./src/opcodes/mod.ts","webpack://evm/./src/opcodes/msize.ts","webpack://evm/./src/opcodes/mstore.ts","webpack://evm/./src/opcodes/mul.ts","webpack://evm/./src/opcodes/mulmod.ts","webpack://evm/./src/opcodes/not.ts","webpack://evm/./src/opcodes/number.ts","webpack://evm/./src/opcodes/or.ts","webpack://evm/./src/opcodes/origin.ts","webpack://evm/./src/opcodes/pc.ts","webpack://evm/./src/opcodes/pop.ts","webpack://evm/./src/opcodes/push.ts","webpack://evm/./src/opcodes/return.ts","webpack://evm/./src/opcodes/returndatacopy.ts","webpack://evm/./src/opcodes/returndatasize.ts","webpack://evm/./src/opcodes/revert.ts","webpack://evm/./src/opcodes/sar.ts","webpack://evm/./src/opcodes/selfdestruct.ts","webpack://evm/./src/opcodes/sha3.ts","webpack://evm/./src/opcodes/shl.ts","webpack://evm/./src/opcodes/shr.ts","webpack://evm/./src/opcodes/signextend.ts","webpack://evm/./src/opcodes/sload.ts","webpack://evm/./src/opcodes/sstore.ts","webpack://evm/./src/opcodes/staticcall.ts","webpack://evm/./src/opcodes/stop.ts","webpack://evm/./src/opcodes/sub.ts","webpack://evm/./src/opcodes/swap.ts","webpack://evm/./src/opcodes/timestamp.ts","webpack://evm/./src/opcodes/xor.ts","webpack://evm/./src/utils/hex.ts","webpack://evm/./src/utils/opcodes.ts","webpack://evm/./src/utils/stringify.ts","webpack://evm/./src/utils/stringifyEvents.ts","webpack://evm/./src/utils/stringifyFunctions.ts","webpack://evm/./src/utils/stringifyInstructions.ts","webpack://evm/./src/utils/stringifyMappings.ts","webpack://evm/./src/utils/stringifyStructs.ts","webpack://evm/./src/utils/stringifyVariables.ts","webpack://evm/webpack/bootstrap","webpack://evm/webpack/startup"],"sourcesContent":["import opcodeFunctions from '../utils/opcodes';\nimport stringifyEvents from '../utils/stringifyEvents';\nimport stringifyStructs from '../utils/stringifyStructs';\nimport stringifyMappings from '../utils/stringifyMappings';\nimport stringifyVariables from '../utils/stringifyVariables';\nimport stringifyFunctions from '../utils/stringifyFunctions';\nimport stringifyInstructions from '../utils/stringifyInstructions';\nimport { Stack } from './stack.class';\nimport { Opcode } from '../opcode.interface';\nimport {\n    STOP,\n    RETURN,\n    REVERT,\n    INVALID,\n    PUSH1,\n    PUSH32,\n    JUMPDEST,\n    SELFDESTRUCT,\n    codes,\n    names,\n} from '../opcodes';\n\ninterface Event {\n    [key: string]: any;\n}\n\ninterface Instruction {\n    name: string;\n    type?: string;\n    wrapped?: boolean;\n}\ninterface Variable {\n    [key: string]: any;\n}\n\ninterface Mapping {\n    [key: string]: any;\n}\n\nexport class EVM {\n    pc = 0;\n    stack: Stack = new Stack();\n    memory: any = {};\n    opcodes: Opcode[] = [];\n    instructions: Instruction[] = [];\n    storage: any = {};\n    jumps: any = {};\n    code: Buffer;\n    mappings: Mapping = {};\n    layer = 0;\n    halted = false;\n    functions: any = {};\n    variables: Variable = {};\n    events: Event = {};\n    gasUsed = 0;\n    conditions: any = [];\n\n    constructor(\n        code: string | Buffer,\n        readonly functionHashes: { [s: string]: string },\n        readonly eventHashes: { [s: string]: string }\n    ) {\n        if (code instanceof Buffer) {\n            this.code = code;\n        } else {\n            this.code = Buffer.from(code.replace('0x', ''), 'hex');\n        }\n    }\n\n    clone(): EVM {\n        const clone = new EVM(this.code, this.functionHashes, this.eventHashes);\n        clone.pc = this.pc;\n        clone.opcodes = this.opcodes;\n        clone.stack = this.stack.clone();\n        clone.memory = { ...this.memory };\n        clone.storage = this.storage;\n        clone.jumps = { ...this.jumps };\n        clone.mappings = this.mappings;\n        clone.layer = this.layer + 1;\n        clone.functions = this.functions;\n        clone.variables = this.variables;\n        clone.events = this.events;\n        clone.gasUsed = this.gasUsed;\n        clone.conditions = [...this.conditions];\n        return clone;\n    }\n\n    getBytecode(): string {\n        return '0x' + this.code.toString('hex');\n    }\n\n    getOpcodes(): Opcode[] {\n        if (this.opcodes.length === 0) {\n            for (let index = 0; index < this.code.length; index++) {\n                const currentOp: Opcode = {\n                    pc: index,\n                    opcode: this.code[index],\n                    name: 'INVALID',\n                };\n                if (currentOp.opcode in codes) {\n                    currentOp.name = (codes as any)[this.code[index]];\n                }\n                this.opcodes.push(currentOp);\n                if (currentOp.name.startsWith('PUSH')) {\n                    const pushDataLength = this.code[index] - 0x5f;\n                    const pushData = this.code.slice(index + 1, index + pushDataLength + 1);\n                    currentOp.pushData = pushData;\n                    index += pushDataLength;\n                }\n            }\n        }\n        return this.opcodes;\n    }\n\n    getFunctions(): string[] {\n        return [\n            ...new Set(\n                this.getOpcodes()\n                    .filter(opcode => opcode.name === 'PUSH4')\n                    .map(opcode => (opcode.pushData ? opcode.pushData.toString('hex') : ''))\n                    .filter(hash => hash in this.functionHashes)\n                    .map(hash => this.functionHashes[hash])\n            ),\n        ];\n    }\n\n    getEvents(): string[] {\n        return [\n            ...new Set(\n                this.getOpcodes()\n                    .filter(opcode => opcode.name === 'PUSH32')\n                    .map(opcode => (opcode.pushData ? opcode.pushData.toString('hex') : ''))\n                    .filter(hash => hash in this.eventHashes)\n                    .map(hash => this.eventHashes[hash])\n            ),\n        ];\n    }\n\n    containsOpcode(opcode: number | string): boolean {\n        let halted = false;\n        if (typeof opcode === 'string' && opcode in names) {\n            opcode = (names as any)[opcode];\n        } else if (typeof opcode === 'string') {\n            throw new Error('Invalid opcode provided');\n        }\n        for (let index = 0; index < this.code.length; index++) {\n            const currentOpcode = this.code[index];\n            if (currentOpcode === opcode && !halted) {\n                return true;\n            } else if (currentOpcode === JUMPDEST) {\n                halted = false;\n            } else if ([STOP, RETURN, REVERT, INVALID, SELFDESTRUCT].includes(currentOpcode)) {\n                halted = true;\n            } else if (currentOpcode >= PUSH1 && currentOpcode <= PUSH32) {\n                index += currentOpcode - PUSH1 + 0x01;\n            }\n        }\n        return false;\n    }\n\n    getJumpDestinations(): number[] {\n        return this.getOpcodes()\n            .filter(opcode => opcode.name === 'JUMPDEST')\n            .map(opcode => opcode.pc);\n    }\n\n    getSwarmHash(): string | false {\n        const regex = /a165627a7a72305820([a-f0-9]{64})0029$/;\n        const bytecode = this.getBytecode();\n        const match = bytecode.match(regex);\n        if (match && match[1]) {\n            return 'bzzr://' + match[1];\n        } else {\n            return false;\n        }\n    }\n\n    getABI(): any {\n        const abi: any = [];\n        if (this.instructions.length === 0) {\n            this.parse();\n        }\n        Object.keys(this.functions).forEach((key: string) => {\n            const item: any = abi.push({ type: 'function' });\n            item.name = this.functions[key].label.split('(')[0];\n            item.payable = this.functions[key].payable;\n            item.constant = this.functions[key].constant;\n        });\n    }\n\n    reset(): void {\n        this.pc = 0;\n        this.instructions = [];\n        this.stack.reset();\n        this.memory = {};\n        this.storage = {};\n        this.jumps = {};\n        this.mappings = {};\n        this.functions = {};\n        this.variables = {};\n        this.events = {};\n        this.gasUsed = 0;\n    }\n\n    parse(): Instruction[] {\n        if (this.instructions.length === 0) {\n            const opcodes = this.getOpcodes();\n            for (this.pc; this.pc < opcodes.length && !this.halted; this.pc++) {\n                const opcode = opcodes[this.pc];\n                if (opcode.name in opcodeFunctions) {\n                    opcodeFunctions[opcode.name as keyof typeof opcodeFunctions](opcode, this);\n                } else {\n                    throw new Error('Unknown OPCODE: ' + opcode.name);\n                }\n            }\n        }\n        return this.instructions;\n    }\n\n    decompile(): string {\n        const instructionTree = this.parse();\n        const events = stringifyEvents(this.events, this.getEvents());\n        const structs = stringifyStructs(this.mappings);\n        const mappings = stringifyMappings(this.mappings);\n        const variables = stringifyVariables(this.variables);\n        const functions = Object.keys(this.functions)\n            .map((functionName: string) =>\n                stringifyFunctions(functionName, this.functions[functionName], this.functionHashes)\n            )\n            .join('');\n        const code = stringifyInstructions(instructionTree);\n        return events + structs + mappings + variables + functions + code;\n    }\n\n    isERC165(): boolean {\n        return ['supportsInterface(bytes4)'].every(v => this.getFunctions().includes(v));\n    }\n}\n","export class Stack {\n    elements: any[];\n\n    constructor() {\n        this.elements = [];\n    }\n\n    push(item: any): void {\n        if (this.elements.length >= 1024) {\n            throw new Error('Stack too deep');\n        } else {\n            this.elements.unshift(item);\n        }\n    }\n\n    pop(): any {\n        if (this.elements.length === 0) {\n            throw new Error('POP with empty stack');\n        } else {\n            return this.elements.shift();\n        }\n    }\n\n    duplicate(position: number): void {\n        if (position < 0 || position > 15) {\n            throw new Error('Unsupported position for duplication operation');\n        } else if (!(position in this.elements)) {\n            throw new Error(\n                \"Invalid duplication operation, provided position wasn't found in stack\"\n            );\n        } else {\n            this.push(this.elements[position]);\n        }\n    }\n\n    swap(secondPosition: number): void {\n        if (secondPosition < 1 || secondPosition > 16) {\n            throw new Error('Unsupported position for swap operation');\n        } else if (!(secondPosition in this.elements)) {\n            throw new Error(\"Invalid swap operation, provided position wasn't found in stack\");\n        } else {\n            const firstValue = this.elements[0];\n            const secondValue = this.elements[secondPosition];\n            this.elements[0] = secondValue;\n            this.elements[secondPosition] = firstValue;\n        }\n    }\n\n    clone(): Stack {\n        const stack = new Stack();\n        stack.elements = [...this.elements];\n        return stack;\n    }\n\n    reset(): void {\n        this.elements = [];\n    }\n}\n","const parseSingle = (data: any, type: any) => {\n    if (type === 'string') {\n        return '\"' + Buffer.from(data, 'hex').toString('utf8') + '\"';\n    } else if (type === 'address') {\n        return '0x' + data.substring(24);\n    } else if (type === 'uint256' || type === 'uint8') {\n        return BigInt('0x' + data).toString();\n    } else if (type === 'bool') {\n        return (BigInt('0x' + data) !== 0n).toString();\n    } else {\n        return data;\n    }\n};\n\nexport class Transaction {\n    blockHash?: string;\n    blockNumber?: number;\n    from?: string;\n    gas?: number;\n    gasPrice?: number;\n    input?: string;\n    to?: string;\n    value?: number;\n\n    constructor(transactionObject?: any) {\n        if (transactionObject) {\n            if ('blockHash' in transactionObject) {\n                this.blockHash = transactionObject.blockHash;\n            }\n            if ('blockNumber' in transactionObject) {\n                this.blockNumber = transactionObject.blockNumber;\n            }\n            if ('from' in transactionObject) {\n                this.from = transactionObject.from;\n            }\n            if ('gas' in transactionObject) {\n                this.gas = transactionObject.gas;\n            }\n            if ('gasPrice' in transactionObject) {\n                this.gasPrice = transactionObject.gasPrice;\n            }\n            if ('input' in transactionObject) {\n                this.input = transactionObject.input.replace('0x', '');\n            }\n            if ('to' in transactionObject) {\n                this.to = transactionObject.to;\n            }\n            if ('value' in transactionObject) {\n                this.value = transactionObject.value;\n            }\n        }\n    }\n\n    setInput(input: string): void {\n        this.input = input.replace('0x', '');\n    }\n\n    getFunctionHash(): string | false {\n        if (this.input && this.input.length >= 8) {\n            return this.input.substr(0, 8);\n        } else {\n            return false;\n        }\n    }\n\n    getFunction(functionHashes: { [s: string]: string }): string | false {\n        const functionHash = this.getFunctionHash();\n        if (functionHash && functionHash in functionHashes) {\n            return (functionHashes as any)[functionHash];\n        } else {\n            return false;\n        }\n    }\n\n    getFunctionName(functionHashes: { [s: string]: string }): string | false {\n        const rawFunction = this.getFunction(functionHashes);\n        if (rawFunction) {\n            return rawFunction.split('(')[0];\n        } else {\n            return false;\n        }\n    }\n\n    getRawArguments(): string[] {\n        if (this.input && this.input.length >= 70) {\n            return this.input.substr(8).match(/.{1,64}/g)!;\n        } else {\n            return [];\n        }\n    }\n\n    getArguments(functionHashes: { [s: string]: string }, _descriptive = true): string[] {\n        const functionName = this.getFunction(functionHashes);\n        const functionArguments = this.getRawArguments();\n        if (functionName && this.input) {\n            const rawFunctionArguments = functionName.split('(')[1].slice(0, -1).split(',');\n            if (\n                rawFunctionArguments.length === 1 &&\n                rawFunctionArguments[0] === '' &&\n                functionArguments.length === 0\n            ) {\n                return [];\n            } else {\n                const result: string[] = [];\n                for (let i = 0; i < rawFunctionArguments.length; i++) {\n                    const functionArgumentType = rawFunctionArguments[i] || 'unknown';\n                    const functionArgument = functionArguments[i];\n                    if (functionArgumentType === 'string') {\n                        const location = Number(BigInt('0x' + functionArgument) / 32n);\n                        const length = Number(BigInt('0x' + functionArguments[location]) * 2n);\n                        const data = this.input.substring(8).substr((location + 1) * 64, length);\n                        result.push(parseSingle(data, functionArgumentType));\n                    } else {\n                        result.push(parseSingle(functionArgument, functionArgumentType));\n                    }\n                }\n                return result;\n            }\n        } else {\n            return functionArguments;\n        }\n    }\n\n    isContractCreation(): boolean {\n        return this.to === null;\n    }\n}\n","export { Transaction } from './classes/tx.class';\nexport { EVM } from './classes/evm.class';\nexport * from './opcodes';\n","export const STOP = 0x00;\nexport const ADD = 0x01;\nexport const MUL = 0x02;\nexport const SUB = 0x03;\nexport const DIV = 0x04;\nexport const SDIV = 0x05;\nexport const MOD = 0x06;\nexport const SMOD = 0x07;\nexport const ADDMOD = 0x08;\nexport const MULMOD = 0x09;\nexport const EXP = 0x0a;\nexport const SIGNEXTEND = 0x0b;\nexport const LT = 0x10;\nexport const GT = 0x11;\nexport const SLT = 0x12;\nexport const SGT = 0x13;\nexport const EQ = 0x14;\nexport const ISZERO = 0x15;\nexport const AND = 0x16;\nexport const OR = 0x17;\nexport const XOR = 0x18;\nexport const NOT = 0x19;\nexport const BYTE = 0x1a;\nexport const SHL = 0x1b;\nexport const SHR = 0x1c;\nexport const SAR = 0x1d;\nexport const SHA3 = 0x20;\nexport const ADDRESS = 0x30;\nexport const BALANCE = 0x31;\nexport const ORIGIN = 0x32;\nexport const CALLER = 0x33;\nexport const CALLVALUE = 0x34;\nexport const CALLDATALOAD = 0x35;\nexport const CALLDATASIZE = 0x36;\nexport const CALLDATACOPY = 0x37;\nexport const CODESIZE = 0x38;\nexport const CODECOPY = 0x39;\nexport const GASPRICE = 0x3a;\nexport const EXTCODESIZE = 0x3b;\nexport const EXTCODECOPY = 0x3c;\nexport const RETURNDATASIZE = 0x3d;\nexport const RETURNDATACOPY = 0x3e;\nexport const EXTCODEHASH = 0x3f;\nexport const BLOCKHASH = 0x40;\nexport const COINBASE = 0x41;\nexport const TIMESTAMP = 0x42;\nexport const NUMBER = 0x43;\nexport const DIFFICULTY = 0x44;\nexport const GASLIMIT = 0x45;\nexport const POP = 0x50;\nexport const MLOAD = 0x51;\nexport const MSTORE = 0x52;\nexport const MSTORE8 = 0x53;\nexport const SLOAD = 0x54;\nexport const SSTORE = 0x55;\nexport const JUMP = 0x56;\nexport const JUMPI = 0x57;\nexport const PC = 0x58;\nexport const MSIZE = 0x59;\nexport const GAS = 0x5a;\nexport const JUMPDEST = 0x5b;\nexport const PUSH1 = 0x60;\nexport const PUSH2 = 0x61;\nexport const PUSH3 = 0x62;\nexport const PUSH4 = 0x63;\nexport const PUSH5 = 0x64;\nexport const PUSH6 = 0x65;\nexport const PUSH7 = 0x66;\nexport const PUSH8 = 0x67;\nexport const PUSH9 = 0x68;\nexport const PUSH10 = 0x69;\nexport const PUSH11 = 0x6a;\nexport const PUSH12 = 0x6b;\nexport const PUSH13 = 0x6c;\nexport const PUSH14 = 0x6d;\nexport const PUSH15 = 0x6e;\nexport const PUSH16 = 0x6f;\nexport const PUSH17 = 0x70;\nexport const PUSH18 = 0x71;\nexport const PUSH19 = 0x72;\nexport const PUSH20 = 0x73;\nexport const PUSH21 = 0x74;\nexport const PUSH22 = 0x75;\nexport const PUSH23 = 0x76;\nexport const PUSH24 = 0x77;\nexport const PUSH25 = 0x78;\nexport const PUSH26 = 0x79;\nexport const PUSH27 = 0x7a;\nexport const PUSH28 = 0x7b;\nexport const PUSH29 = 0x7c;\nexport const PUSH30 = 0x7d;\nexport const PUSH31 = 0x7e;\nexport const PUSH32 = 0x7f;\nexport const DUP1 = 0x80;\nexport const DUP2 = 0x81;\nexport const DUP3 = 0x82;\nexport const DUP4 = 0x83;\nexport const DUP5 = 0x84;\nexport const DUP6 = 0x85;\nexport const DUP7 = 0x86;\nexport const DUP8 = 0x87;\nexport const DUP9 = 0x88;\nexport const DUP10 = 0x89;\nexport const DUP11 = 0x8a;\nexport const DUP12 = 0x8b;\nexport const DUP13 = 0x8c;\nexport const DUP14 = 0x8d;\nexport const DUP15 = 0x8e;\nexport const DUP16 = 0x8f;\nexport const SWAP1 = 0x90;\nexport const SWAP2 = 0x91;\nexport const SWAP3 = 0x92;\nexport const SWAP4 = 0x93;\nexport const SWAP5 = 0x94;\nexport const SWAP6 = 0x95;\nexport const SWAP7 = 0x96;\nexport const SWAP8 = 0x97;\nexport const SWAP9 = 0x98;\nexport const SWAP10 = 0x99;\nexport const SWAP11 = 0x9a;\nexport const SWAP12 = 0x9b;\nexport const SWAP13 = 0x9c;\nexport const SWAP14 = 0x9d;\nexport const SWAP15 = 0x9e;\nexport const SWAP16 = 0x9f;\nexport const LOG0 = 0xa0;\nexport const LOG1 = 0xa1;\nexport const LOG2 = 0xa2;\nexport const LOG3 = 0xa3;\nexport const LOG4 = 0xa4;\nexport const CREATE = 0xf0;\nexport const CALL = 0xf1;\nexport const CALLCODE = 0xf2;\nexport const RETURN = 0xf3;\nexport const DELEGATECALL = 0xf4;\nexport const CREATE2 = 0xf5;\nexport const STATICCALL = 0xfa;\nexport const REVERT = 0xfd;\nexport const INVALID = 0xfe;\nexport const SELFDESTRUCT = 0xff;\n\nexport const codes = {\n    0x00: 'STOP',\n    0x01: 'ADD',\n    0x02: 'MUL',\n    0x03: 'SUB',\n    0x04: 'DIV',\n    0x05: 'SDIV',\n    0x06: 'MOD',\n    0x07: 'SMOD',\n    0x08: 'ADDMOD',\n    0x09: 'MULMOD',\n    0x0a: 'EXP',\n    0x0b: 'SIGNEXTEND',\n    0x10: 'LT',\n    0x11: 'GT',\n    0x12: 'SLT',\n    0x13: 'SGT',\n    0x14: 'EQ',\n    0x15: 'ISZERO',\n    0x16: 'AND',\n    0x17: 'OR',\n    0x18: 'XOR',\n    0x19: 'NOT',\n    0x1a: 'BYTE',\n    0x1b: 'SHL',\n    0x1c: 'SHR',\n    0x1d: 'SAR',\n    0x20: 'SHA3',\n    0x30: 'ADDRESS',\n    0x31: 'BALANCE',\n    0x32: 'ORIGIN',\n    0x33: 'CALLER',\n    0x34: 'CALLVALUE',\n    0x35: 'CALLDATALOAD',\n    0x36: 'CALLDATASIZE',\n    0x37: 'CALLDATACOPY',\n    0x38: 'CODESIZE',\n    0x39: 'CODECOPY',\n    0x3a: 'GASPRICE',\n    0x3b: 'EXTCODESIZE',\n    0x3c: 'EXTCODECOPY',\n    0x3d: 'RETURNDATASIZE',\n    0x3e: 'RETURNDATACOPY',\n    0x3f: 'EXTCODEHASH',\n    0x40: 'BLOCKHASH',\n    0x41: 'COINBASE',\n    0x42: 'TIMESTAMP',\n    0x43: 'NUMBER',\n    0x44: 'DIFFICULTY',\n    0x45: 'GASLIMIT',\n    0x50: 'POP',\n    0x51: 'MLOAD',\n    0x52: 'MSTORE',\n    0x53: 'MSTORE8',\n    0x54: 'SLOAD',\n    0x55: 'SSTORE',\n    0x56: 'JUMP',\n    0x57: 'JUMPI',\n    0x58: 'PC',\n    0x59: 'MSIZE',\n    0x5a: 'GAS',\n    0x5b: 'JUMPDEST',\n    0x60: 'PUSH1',\n    0x61: 'PUSH2',\n    0x62: 'PUSH3',\n    0x63: 'PUSH4',\n    0x64: 'PUSH5',\n    0x65: 'PUSH6',\n    0x66: 'PUSH7',\n    0x67: 'PUSH8',\n    0x68: 'PUSH9',\n    0x69: 'PUSH10',\n    0x6a: 'PUSH11',\n    0x6b: 'PUSH12',\n    0x6c: 'PUSH13',\n    0x6d: 'PUSH14',\n    0x6e: 'PUSH15',\n    0x6f: 'PUSH16',\n    0x70: 'PUSH17',\n    0x71: 'PUSH18',\n    0x72: 'PUSH19',\n    0x73: 'PUSH20',\n    0x74: 'PUSH21',\n    0x75: 'PUSH22',\n    0x76: 'PUSH23',\n    0x77: 'PUSH24',\n    0x78: 'PUSH25',\n    0x79: 'PUSH26',\n    0x7a: 'PUSH27',\n    0x7b: 'PUSH28',\n    0x7c: 'PUSH29',\n    0x7d: 'PUSH30',\n    0x7e: 'PUSH31',\n    0x7f: 'PUSH32',\n    0x80: 'DUP1',\n    0x81: 'DUP2',\n    0x82: 'DUP3',\n    0x83: 'DUP4',\n    0x84: 'DUP5',\n    0x85: 'DUP6',\n    0x86: 'DUP7',\n    0x87: 'DUP8',\n    0x88: 'DUP9',\n    0x89: 'DUP10',\n    0x8a: 'DUP11',\n    0x8b: 'DUP12',\n    0x8c: 'DUP13',\n    0x8d: 'DUP14',\n    0x8e: 'DUP15',\n    0x8f: 'DUP16',\n    0x90: 'SWAP1',\n    0x91: 'SWAP2',\n    0x92: 'SWAP3',\n    0x93: 'SWAP4',\n    0x94: 'SWAP5',\n    0x95: 'SWAP6',\n    0x96: 'SWAP7',\n    0x97: 'SWAP8',\n    0x98: 'SWAP9',\n    0x99: 'SWAP10',\n    0x9a: 'SWAP11',\n    0x9b: 'SWAP12',\n    0x9c: 'SWAP13',\n    0x9d: 'SWAP14',\n    0x9e: 'SWAP15',\n    0x9f: 'SWAP16',\n    0xa0: 'LOG0',\n    0xa1: 'LOG1',\n    0xa2: 'LOG2',\n    0xa3: 'LOG3',\n    0xa4: 'LOG4',\n    0xf0: 'CREATE',\n    0xf1: 'CALL',\n    0xf2: 'CALLCODE',\n    0xf3: 'RETURN',\n    0xf4: 'DELEGATECALL',\n    0xf5: 'CREATE2',\n    0xfa: 'STATICCALL',\n    0xfd: 'REVERT',\n    0xfe: 'INVALID',\n    0xff: 'SELFDESTRUCT',\n};\n\nexport const names = {\n    STOP: 0x00,\n    ADD: 0x01,\n    MUL: 0x02,\n    SUB: 0x03,\n    DIV: 0x04,\n    SDIV: 0x05,\n    MOD: 0x06,\n    SMOD: 0x07,\n    ADDMOD: 0x08,\n    MULMOD: 0x09,\n    EXP: 0x0a,\n    SIGNEXTEND: 0x0b,\n    LT: 0x10,\n    GT: 0x11,\n    SLT: 0x12,\n    SGT: 0x13,\n    EQ: 0x14,\n    ISZERO: 0x15,\n    AND: 0x16,\n    OR: 0x17,\n    XOR: 0x18,\n    NOT: 0x19,\n    BYTE: 0x1a,\n    SHL: 0x1b,\n    SHR: 0x1c,\n    SAR: 0x1d,\n    SHA3: 0x20,\n    ADDRESS: 0x30,\n    BALANCE: 0x31,\n    ORIGIN: 0x32,\n    CALLER: 0x33,\n    CALLVALUE: 0x34,\n    CALLDATALOAD: 0x35,\n    CALLDATASIZE: 0x36,\n    CALLDATACOPY: 0x37,\n    CODESIZE: 0x38,\n    CODECOPY: 0x39,\n    GASPRICE: 0x3a,\n    EXTCODESIZE: 0x3b,\n    EXTCODECOPY: 0x3c,\n    RETURNDATASIZE: 0x3d,\n    RETURNDATACOPY: 0x3e,\n    EXTCODEHASH: 0x3f,\n    BLOCKHASH: 0x40,\n    COINBASE: 0x41,\n    TIMESTAMP: 0x42,\n    NUMBER: 0x43,\n    DIFFICULTY: 0x44,\n    GASLIMIT: 0x45,\n    POP: 0x50,\n    MLOAD: 0x51,\n    MSTORE: 0x52,\n    MSTORE8: 0x53,\n    SLOAD: 0x54,\n    SSTORE: 0x55,\n    JUMP: 0x56,\n    JUMPI: 0x57,\n    PC: 0x58,\n    MSIZE: 0x59,\n    GAS: 0x5a,\n    JUMPDEST: 0x5b,\n    PUSH1: 0x60,\n    PUSH2: 0x61,\n    PUSH3: 0x62,\n    PUSH4: 0x63,\n    PUSH5: 0x64,\n    PUSH6: 0x65,\n    PUSH7: 0x66,\n    PUSH8: 0x67,\n    PUSH9: 0x68,\n    PUSH10: 0x69,\n    PUSH11: 0x6a,\n    PUSH12: 0x6b,\n    PUSH13: 0x6c,\n    PUSH14: 0x6d,\n    PUSH15: 0x6e,\n    PUSH16: 0x6f,\n    PUSH17: 0x70,\n    PUSH18: 0x71,\n    PUSH19: 0x72,\n    PUSH20: 0x73,\n    PUSH21: 0x74,\n    PUSH22: 0x75,\n    PUSH23: 0x76,\n    PUSH24: 0x77,\n    PUSH25: 0x78,\n    PUSH26: 0x79,\n    PUSH27: 0x7a,\n    PUSH28: 0x7b,\n    PUSH29: 0x7c,\n    PUSH30: 0x7d,\n    PUSH31: 0x7e,\n    PUSH32: 0x7f,\n    DUP1: 0x80,\n    DUP2: 0x81,\n    DUP3: 0x82,\n    DUP4: 0x83,\n    DUP5: 0x84,\n    DUP6: 0x85,\n    DUP7: 0x86,\n    DUP8: 0x87,\n    DUP9: 0x88,\n    DUP10: 0x89,\n    DUP11: 0x8a,\n    DUP12: 0x8b,\n    DUP13: 0x8c,\n    DUP14: 0x8d,\n    DUP15: 0x8e,\n    DUP16: 0x8f,\n    SWAP1: 0x90,\n    SWAP2: 0x91,\n    SWAP3: 0x92,\n    SWAP4: 0x93,\n    SWAP5: 0x94,\n    SWAP6: 0x95,\n    SWAP7: 0x96,\n    SWAP8: 0x97,\n    SWAP9: 0x98,\n    SWAP10: 0x99,\n    SWAP11: 0x9a,\n    SWAP12: 0x9b,\n    SWAP13: 0x9c,\n    SWAP14: 0x9d,\n    SWAP15: 0x9e,\n    SWAP16: 0x9f,\n    LOG0: 0xa0,\n    LOG1: 0xa1,\n    LOG2: 0xa2,\n    LOG3: 0xa3,\n    LOG4: 0xa4,\n    CREATE: 0xf0,\n    CALL: 0xf1,\n    CALLCODE: 0xf2,\n    RETURN: 0xf3,\n    DELEGATECALL: 0xf4,\n    CREATE2: 0xf5,\n    STATICCALL: 0xfa,\n    REVERT: 0xfd,\n    INVALID: 0xfe,\n    SELFDESTRUCT: 0xff,\n};\n\nexport default {\n    ...codes,\n    ...names,\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class ADD {\n    readonly name: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'ADD';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' + ' + stringify(this.right);\n    }\n\n    get type() {\n        if (this.left.type === this.right.type) {\n            return this.left.type;\n        } else if (!this.left.type && this.right.type) {\n            return this.right.type;\n        } else if (!this.right.type && this.left.type) {\n            return this.left.type;\n        } else {\n            return false;\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    state.stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint'\n            ? left + right\n            : typeof left === 'bigint' && left === 0n\n            ? right\n            : typeof right === 'bigint' && right === 0n\n            ? left\n            : new ADD(left, right)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { ADD } from './add';\nimport { MOD } from './mod';\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    const mod = state.stack.pop();\n    state.stack.push(\n        typeof left === 'bigint' && typeof right === 'bigint' && typeof mod === 'bigint'\n            ? (left + right) % mod\n            : typeof left === 'bigint' && typeof right === 'bigint'\n            ? new MOD(left + right, mod)\n            : new MOD(new ADD(left, right), mod)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class ADDRESS {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'ADDRESS';\n        this.type = 'address';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'this';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new ADDRESS());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class AND {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'AND';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' && ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left & right);\n    } else if (typeof left === 'bigint' && /^[f]+$/.test(left.toString(16))) {\n        right.size = left.toString(16).length;\n        state.stack.push(right);\n    } else if (typeof right === 'bigint' && /^[f]+$/.test(right.toString(16))) {\n        left.size = right.toString(16).length;\n        state.stack.push(left);\n        /*} else if (\n        typeof left === 'bigint' &&\n        left.equals('1461501637330902918203684832716283019655932542975')\n    ) {*/\n        /* 2 ** 160 */\n        /*    state.stack.push(right);\n    } else if (\n        typeof right === 'bigint' &&\n        right.equals('1461501637330902918203684832716283019655932542975')\n    ) {*/\n        /* 2 ** 160 */\n        /*    state.stack.push(left);*/\n    } else if (\n        typeof left === 'bigint' &&\n        right instanceof AND &&\n        typeof right.left === 'bigint' &&\n        left === right.left\n    ) {\n        state.stack.push(right.right);\n    } else {\n        state.stack.push(new AND(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class BALANCE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'BALANCE';\n        this.wrapped = false;\n        this.address = address;\n    }\n\n    toString() {\n        return stringify(this.address) + '.balance';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.stack.push(new BALANCE(address));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class BLOCKHASH {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly number: any;\n\n    constructor(blockNumber: any) {\n        this.name = 'BLOCKHASH';\n        this.wrapped = true;\n        this.number = blockNumber;\n    }\n\n    toString() {\n        return 'block.blockhash(' + stringify(this.number) + ')';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const blockNumber = state.stack.pop();\n    state.stack.push(new BLOCKHASH(blockNumber));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class BYTE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly position: any;\n    readonly data: any;\n\n    constructor(position: any, data: any) {\n        this.name = 'BYTE';\n        this.wrapped = true;\n        this.position = position;\n        this.data = data;\n    }\n\n    toString() {\n        return '(' + stringify(this.data) + ' >> ' + stringify(this.position) + ') & 1';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const position = state.stack.pop();\n    const data = state.stack.pop();\n    if (typeof data === 'bigint' && typeof position === 'bigint') {\n        state.stack.push((data >> position) & 1n);\n    } else {\n        state.stack.push(new BYTE(position, data));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CALL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly value: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n    readonly throwOnFail: boolean;\n\n    constructor(\n        gas: any,\n        address: any,\n        value: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'CALL';\n        this.wrapped = false;\n        this.gas = gas;\n        this.address = address;\n        this.value = value;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n        this.throwOnFail = false;\n    }\n\n    toString() {\n        if (\n            typeof this.memoryLength === 'bigint' &&\n            this.memoryLength === 0n &&\n            typeof this.outputLength === 'bigint' &&\n            this.outputLength === 0n\n        ) {\n            if (\n                this.gas.name === 'MUL' &&\n                this.gas.left.name === 'ISZERO' &&\n                typeof this.gas.right === 'bigint' &&\n                this.gas.right === 2300n\n            ) {\n                if (this.throwOnFail) {\n                    return (\n                        'address(' +\n                        stringify(this.address) +\n                        ').transfer(' +\n                        stringify(this.value) +\n                        ')'\n                    );\n                } else {\n                    return (\n                        'address(' +\n                        stringify(this.address) +\n                        ').send(' +\n                        stringify(this.value) +\n                        ')'\n                    );\n                }\n            } else {\n                return (\n                    'address(' +\n                    stringify(this.address) +\n                    ').call.gas(' +\n                    stringify(this.gas) +\n                    ').value(' +\n                    stringify(this.value) +\n                    ')'\n                );\n            }\n        } else {\n            return (\n                'call(' +\n                stringify(this.gas) +\n                ',' +\n                stringify(this.address) +\n                ',' +\n                stringify(this.value) +\n                ',' +\n                stringify(this.memoryStart) +\n                ',' +\n                stringify(this.memoryLength) +\n                ',' +\n                stringify(this.outputStart) +\n                ',' +\n                stringify(this.outputLength) +\n                ')'\n            );\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new CALL(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\n    );\n    state.memory[outputStart] = 'output';\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CALLCODE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly value: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n\n    constructor(\n        gas: any,\n        address: any,\n        value: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'CALLCODE';\n        this.wrapped = true;\n        this.gas = gas;\n        this.address = address;\n        this.value = value;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n    }\n\n    toString() {\n        return (\n            'callcode(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.value) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new CALLCODE(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class CALLDATACOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(startLocation: any, copyLength: any) {\n        this.name = 'CALLDATACOPY';\n        this.wrapped = true;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'msg.data[' +\n            this.startLocation +\n            ':(' +\n            this.startLocation +\n            '+' +\n            this.copyLength +\n            ')];'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    const startLocation = state.stack.pop();\n    const copyLength = state.stack.pop();\n    state.memory[memoryLocation] = new CALLDATACOPY(startLocation, copyLength);\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CALLDATALOAD {\n    readonly name: string;\n    readonly type?: string;\n    readonly returntype?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n\n    constructor(location: any) {\n        this.name = 'CALLDATALOAD';\n        this.wrapped = false;\n        this.location = location;\n    }\n\n    toString() {\n        if (typeof this.location === 'bigint' && this.location === 0n) {\n            return 'msg.data';\n        } else if (typeof this.location === 'bigint' && (this.location - 4n) % 32n === 0n) {\n            return '_arg' + ((this.location - 4n) / 32n).toString();\n        } else {\n            return 'msg.data[' + stringify(this.location) + ']';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const startLocation = state.stack.pop();\n    state.stack.push(new CALLDATALOAD(startLocation));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class CALLDATASIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CALLDATASIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'msg.data.length';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CALLDATASIZE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class CALLER {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CALLER';\n        this.name = 'address';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'msg.sender';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CALLER());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class CALLVALUE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CALLVALUE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'msg.value';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CALLVALUE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CODECOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(startLocation: any, copyLength: any) {\n        this.name = 'CODECOPY';\n        this.wrapped = true;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'this.code[' +\n            stringify(this.startLocation) +\n            ':(' +\n            stringify(this.startLocation) +\n            '+' +\n            stringify(this.copyLength) +\n            ')]'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    const startLocation = state.stack.pop();\n    const copyLength = state.stack.pop();\n    state.memory[memoryLocation] = new CODECOPY(startLocation, copyLength);\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class CODESIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CODESIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'this.code.length';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CODESIZE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class COINBASE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'COINBASE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.coinbase';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new COINBASE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CREATE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly value: any;\n\n    constructor(memoryStart: any, memoryLength: any, value: any) {\n        this.name = 'CREATE';\n        this.name = 'address';\n        this.wrapped = true;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.value = value;\n    }\n\n    toString() {\n        return (\n            '(new Contract(memory[' +\n            stringify(this.memoryStart) +\n            ':(' +\n            stringify(this.memoryStart) +\n            '+' +\n            stringify(this.memoryLength) +\n            ')]).value(' +\n            stringify(this.value) +\n            ')).address'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.stack.push(new CREATE(memoryStart, memoryLength, value));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CREATE2 {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly value: any;\n\n    constructor(memoryStart: any, memoryLength: any, value: any) {\n        this.name = 'CREATE2';\n        this.wrapped = true;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.value = value;\n    }\n\n    toString() {\n        return (\n            '(new Contract(memory[' +\n            stringify(this.memoryStart) +\n            ':(' +\n            stringify(this.memoryStart) +\n            '+' +\n            stringify(this.memoryLength) +\n            ')]).value(' +\n            stringify(this.value) +\n            ')).address'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.stack.push(new CREATE2(memoryStart, memoryLength, value));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class DELEGATECALL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n\n    constructor(\n        gas: any,\n        address: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'DELEGATECALL';\n        this.wrapped = true;\n        this.gas = gas;\n        this.address = address;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n    }\n\n    toString() {\n        return (\n            'delegatecall(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new DELEGATECALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class DIFFICULTY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'DIFFICULTY';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.difficulty';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new DIFFICULTY());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class DIV {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'DIV';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' / ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left / right);\n    } else if (typeof right === 'bigint' && right === 1n) {\n        state.stack.push(left);\n    } else {\n        state.stack.push(new DIV(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const duplicateLocation = parseInt(opcode.name.replace('DUP', ''), 10) - 1;\n    state.stack.duplicate(duplicateLocation);\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SIG {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly hash: string;\n\n    constructor(hash: string) {\n        this.name = 'SIG';\n        this.wrapped = false;\n        this.hash = hash;\n    }\n\n    toString() {\n        return 'msg.sig == ' + this.hash;\n    }\n}\n\nexport class EQ {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'EQ';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' == ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    let left = state.stack.pop();\n    let right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left === right ? 1n : 0n);\n    } else {\n        if (typeof left === 'bigint' && right.name === 'DIV' && typeof right.right === 'bigint') {\n            left = left * right.right;\n            right = right.left;\n        }\n        if (typeof right === 'bigint' && left.name === 'DIV' && typeof left.right === 'bigint') {\n            right = right * left.right;\n            left = left.left;\n        }\n        if (\n            typeof left === 'bigint' &&\n            /^[0]+$/.test(left.toString(16).substring(8)) &&\n            right.name === 'CALLDATALOAD' &&\n            right.location === 0n\n        ) {\n            state.stack.push(\n                new SIG(\n                    '0'.repeat(64 - left.toString(16).length) +\n                        left.toString(16).substring(0, 8 - (64 - left.toString(16).length))\n                )\n            );\n        } else if (\n            typeof right === 'bigint' &&\n            /^[0]+$/.test(right.toString(16).substring(8)) &&\n            left.name === 'CALLDATALOAD' &&\n            left.location === 0\n        ) {\n            state.stack.push(\n                new SIG(\n                    '0'.repeat(64 - right.toString(16).length) +\n                        right.toString(16).substring(0, 8 - (64 - right.toString(16).length))\n                )\n            );\n        } else {\n            state.stack.push(new EQ(left, right));\n        }\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'EXP';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' ** ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left ** right);\n    } else {\n        state.stack.push(new EXP(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODECOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(address: any, startLocation: any, copyLength: any) {\n        this.name = 'EXTCODECOPY';\n        this.wrapped = true;\n        this.address = address;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'address(' +\n            stringify(this.address) +\n            ').code[' +\n            stringify(this.startLocation) +\n            ':(' +\n            stringify(this.startLocation) +\n            '+' +\n            stringify(this.copyLength) +\n            ')]'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    const memoryLocation = state.stack.pop();\n    const startLocation = state.stack.pop();\n    const copyLength = state.stack.pop();\n    state.memory[memoryLocation] = new EXTCODECOPY(address, startLocation, copyLength);\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODEHASH {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'EXTCODEHASH';\n        this.wrapped = true;\n        this.address = address;\n    }\n\n    toString() {\n        return 'keccak256(address(' + stringify(this.address) + ').code)';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.stack.push(new EXTCODEHASH(address));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODESIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'EXTCODESIZE';\n        this.wrapped = true;\n        this.address = address;\n    }\n\n    toString() {\n        return 'address(' + stringify(this.address) + ').code.length';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.stack.push(new EXTCODESIZE(address));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class GAS {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'GAS';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'gasleft()';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new GAS());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class GASLIMIT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'GASLIMIT';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.gaslimit';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new GASLIMIT());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class GASPRICE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'GASPRICE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'tx.gasprice';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new GASPRICE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class GT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n    readonly equal: boolean;\n\n    constructor(left: any, right: any, equal = false) {\n        this.name = 'GT';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n        this.equal = equal;\n    }\n\n    toString() {\n        if (this.equal) {\n            return stringify(this.left) + ' >= ' + stringify(this.right);\n        } else {\n            return stringify(this.left) + ' > ' + stringify(this.right);\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left > right ? 1n : 0n);\n    } else {\n        state.stack.push(new GT(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class INVALID {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly opcode: any;\n\n    constructor(opcode: any) {\n        this.name = 'INVALID';\n        this.wrapped = true;\n        this.opcode = opcode;\n    }\n\n    toString() {\n        return 'revert(\"Invalid instruction (0x' + this.opcode.toString(16) + ')\");';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.halted = true;\n    state.instructions.push(new INVALID(opcode.opcode));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { LT } from './lt';\nimport { GT } from './gt';\nimport stringify from '../utils/stringify';\n\nexport class ISZERO {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly item: any;\n\n    constructor(item: any) {\n        this.name = 'ISZERO';\n        this.wrapped = true;\n        this.item = item;\n    }\n\n    toString() {\n        if (this.item.name === 'EQ') {\n            return stringify(this.item.left) + ' != ' + stringify(this.item.right);\n        } else {\n            return stringify(this.item) + ' == 0';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const item = state.stack.pop();\n    if (typeof item === 'bigint') {\n        state.stack.push(item === 0n ? 1n : 0n);\n    } else if (item.name === 'LT') {\n        if (item.equal) {\n            state.stack.push(new GT(item.left, item.right));\n        } else {\n            state.stack.push(new GT(item.left, item.right, true));\n        }\n    } else if (item.name === 'GT') {\n        if (item.equal) {\n            state.stack.push(new LT(item.left, item.right));\n        } else {\n            state.stack.push(new LT(item.left, item.right, true));\n        }\n    } else if (item instanceof ISZERO) {\n        state.stack.push(item.item);\n    } else {\n        state.stack.push(new ISZERO(item));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class JUMP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly valid: boolean;\n    readonly location: any;\n\n    constructor(location: any, bad?: boolean) {\n        this.name = 'JUMP';\n        this.wrapped = false;\n        this.location = location;\n        this.valid = true;\n        if (bad) {\n            this.valid = false;\n        }\n    }\n\n    toString() {\n        if (!this.valid) {\n            return 'revert(\"Bad jump destination\");';\n        } else {\n            return 'goto(' + stringify(this.location) + ');';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const jumpLocation = state.stack.pop();\n    if (typeof jumpLocation !== 'bigint') {\n        state.halted = true;\n        state.instructions.push(new JUMP(jumpLocation, true));\n    } else {\n        const opcodes = state.getOpcodes();\n        const jumpLocationData = opcodes.find((o: any) => o.pc === Number(jumpLocation));\n        if (!jumpLocationData) {\n            state.halted = true;\n            state.instructions.push(new JUMP(jumpLocation, true));\n        } else {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (!(opcode.pc + ':' + Number(jumpLocation) in state.jumps)) {\n                if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\n                    state.halted = true;\n                    state.instructions.push(new JUMP(jumpLocation, true));\n                } else if (\n                    jumpLocationData &&\n                    jumpIndex >= 0 &&\n                    jumpLocationData.name === 'JUMPDEST'\n                ) {\n                    state.jumps[opcode.pc + ':' + Number(jumpLocation)] = true;\n                    state.pc = jumpIndex;\n                } else {\n                    state.halted = true;\n                    state.instructions.push(new JUMP(jumpLocation, true));\n                }\n            } else {\n                state.halted = true;\n                state.instructions.push(new JUMP(jumpLocation));\n            }\n        }\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport default (_opcode: Opcode, _state: EVM): void => {\n    /* Empty */\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nconst updateCallDataLoad = (item: any, types: any) => {\n    for (const i in item) {\n        if (Object.prototype.hasOwnProperty.call(item, i)) {\n            if (\n                typeof item[i] === 'object' &&\n                item[i].name === 'CALLDATALOAD' &&\n                typeof item[i].location === 'bigint'\n            ) {\n                const argNumber = ((item[i].location - 4n) / 32n).toString();\n                item[i].type = types[argNumber];\n            }\n            if (typeof item[i] === 'object') {\n                updateCallDataLoad(item[i], types);\n            }\n        }\n    }\n};\n\nconst findReturns = (item: any) => {\n    const returns = [];\n    for (const i in item) {\n        if (Object.prototype.hasOwnProperty.call(item, i)) {\n            if (\n                typeof item[i] === 'object' &&\n                item[i].name === 'RETURN' &&\n                item[i].items &&\n                item[i].items.length > 0\n            ) {\n                returns.push(item[i].items);\n            }\n            if (typeof item[i] === 'object') {\n                const deepReturns: any = findReturns(item[i]);\n                if (deepReturns.length > 0) {\n                    returns.push(...deepReturns);\n                }\n            }\n        }\n    }\n    return returns;\n};\n\nexport class TopLevelFunction {\n    readonly name: string;\n    readonly type?: string;\n    readonly label: string;\n    readonly hash: any;\n    readonly gasUsed: number;\n    readonly payable: boolean;\n    readonly visibility: string;\n    readonly constant: boolean;\n    readonly items: any;\n    readonly returns: any;\n\n    constructor(items: any, hash: any, gasUsed: number, functionHashes: { [s: string]: string }) {\n        this.name = 'Function';\n        this.hash = hash;\n        this.gasUsed = gasUsed;\n        this.items = items;\n        this.payable = true;\n        this.visibility = 'public';\n        this.constant = false;\n        this.returns = [];\n        if (this.hash in functionHashes) {\n            this.label = (functionHashes as any)[this.hash];\n        } else {\n            this.label = this.hash + '()';\n        }\n        if (\n            this.items.length > 0 &&\n            this.items[0] instanceof REQUIRE &&\n            this.items[0].condition.name === 'ISZERO' &&\n            this.items[0].condition.item.name === 'CALLVALUE'\n        ) {\n            this.payable = false;\n            this.items.shift();\n        }\n        if (this.items.length === 1 && this.items[0].name === 'RETURN') {\n            this.constant = true;\n        }\n        if (this.hash in functionHashes) {\n            const functionName = (functionHashes as any)[this.hash].split('(')[0];\n            const argumentTypes = (functionHashes as any)[this.hash]\n                .replace(functionName, '')\n                .substr(1)\n                .slice(0, -1)\n                .split(',');\n            if (\n                argumentTypes.length > 1 ||\n                (argumentTypes.length === 1 && argumentTypes[0] !== '')\n            ) {\n                this.items.forEach((item: any) => updateCallDataLoad(item, argumentTypes));\n            }\n        }\n        const returns: any = [];\n        this.items.forEach((item: any) => {\n            const deepReturns = findReturns(item);\n            if (deepReturns.length > 0) {\n                returns.push(...deepReturns);\n            }\n        });\n        if (\n            returns.length > 0 &&\n            returns.every(\n                (returnItem: any) =>\n                    returnItem.length === returns[0].length &&\n                    returnItem.map((item: any) => item.type).join('') ===\n                        returns[0].map((item: any) => item.type).join('')\n            )\n        ) {\n            returns[0].forEach((item: any) => {\n                if (typeof item === 'bigint') {\n                    this.returns.push('uint256');\n                } else if (item.type) {\n                    this.returns.push(item.type);\n                } else {\n                    this.returns.push('unknown');\n                }\n            });\n        } else if (returns.length > 0) {\n            this.returns.push('<unknown>');\n        }\n    }\n}\n\nexport class Variable {\n    readonly name: string;\n    readonly label: string | false;\n    readonly types: any;\n\n    constructor(label: string | false, types: any) {\n        this.name = 'Variable';\n        this.label = label;\n        this.types = types;\n    }\n}\n\nexport class REQUIRE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly condition: any;\n\n    constructor(condition: any) {\n        this.name = 'REQUIRE';\n        this.wrapped = true;\n        this.condition = condition;\n    }\n\n    toString() {\n        return 'require(' + stringify(this.condition) + ');';\n    }\n}\n\nexport class JUMPI {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly condition: any;\n    readonly location: any;\n    readonly valid: boolean;\n    readonly true?: any;\n    readonly false?: any;\n    readonly payable?: boolean;\n\n    constructor(condition: any, location: any, ifTrue?: any, ifFalse?: any, skipped?: boolean) {\n        this.name = 'JUMPI';\n        this.wrapped = true;\n        this.condition = condition;\n        this.location = location;\n        if (skipped) {\n            this.valid = true;\n        } else if (ifTrue && ifFalse) {\n            this.valid = true;\n            this.true = ifTrue;\n            this.false = ifFalse;\n            if (\n                this.true.length >= 1 &&\n                this.true[0] instanceof REQUIRE &&\n                this.true[0].condition.name === 'ISZERO' &&\n                this.true[0].condition.item.name === 'CALLVALUE'\n            ) {\n                this.payable = false;\n                this.true.shift();\n            } else {\n                this.payable = true;\n            }\n        } else {\n            this.valid = false;\n        }\n    }\n\n    toString() {\n        if (this.valid && this.true && this.false) {\n            return stringify(this.condition);\n        } else if (this.valid) {\n            return 'if' + stringify(this.condition) + ' goto(' + stringify(this.location) + ');';\n        } else {\n            console.log(this);\n            return 'revert(\"Bad jump destination\");';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const jumpLocation = state.stack.pop();\n    const jumpCondition = state.stack.pop();\n    const opcodes = state.getOpcodes();\n    console.log(jumpLocation);\n    console.log(state.conditions);\n    console.log('-');\n    if (typeof jumpLocation !== 'bigint') {\n        state.halted = true;\n        state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n    } else {\n        const jumpLocationData = opcodes.find((o: any) => o.pc === Number(jumpLocation));\n        if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\n            //state.halted = true;\n            //state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            state.instructions.push(new REQUIRE(jumpCondition));\n        } else if (typeof jumpCondition === 'bigint') {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (\n                jumpIndex >= 0 &&\n                jumpCondition !== 0n &&\n                !(opcode.pc + ':' + Number(jumpLocation) in state.jumps)\n            ) {\n                state.jumps[opcode.pc + ':' + Number(jumpLocation)] = true;\n                state.pc = jumpIndex;\n            }\n        } else if (\n            !(opcode.pc + ':' + Number(jumpLocation) in state.jumps) &&\n            jumpCondition.name === 'SIG'\n        ) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (jumpIndex >= 0) {\n                const functionClone: any = state.clone();\n                functionClone.pc = jumpIndex;\n                const functionCloneTree = functionClone.parse();\n                state.functions[jumpCondition.hash] = new TopLevelFunction(\n                    functionCloneTree,\n                    jumpCondition.hash,\n                    functionClone.gasUsed,\n                    state.functionHashes\n                );\n                if (\n                    jumpCondition.hash in state.functionHashes &&\n                    functionCloneTree.length === 1 &&\n                    functionCloneTree[0].name === 'RETURN' &&\n                    functionCloneTree[0].items.every((item: any) => item.name === 'MappingLoad')\n                ) {\n                    functionCloneTree[0].items.forEach((item: any) => {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.mappings[item.location].name = fullFunction.split('(')[0];\n                        if (\n                            item.structlocation &&\n                            !state.mappings[item.location].structs.includes(item.structlocation)\n                        ) {\n                            state.mappings[item.location].structs.push(item.structlocation);\n                        }\n                    });\n                    delete state.functions[jumpCondition.hash];\n                } else if (\n                    jumpCondition.hash in state.functionHashes &&\n                    state.functions[jumpCondition.hash].items.length === 1 &&\n                    state.functions[jumpCondition.hash].items[0].name === 'RETURN' &&\n                    state.functions[jumpCondition.hash].items[0].items.length === 1 &&\n                    state.functions[jumpCondition.hash].items[0].items[0].name === 'SLOAD' &&\n                    typeof state.functions[jumpCondition.hash].items[0].items[0].location ===\n                        'bigint'\n                ) {\n                    if (\n                        !(\n                            state.functions[jumpCondition.hash].items[0].items[0].location in\n                            state.variables\n                        )\n                    ) {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.variables[\n                            state.functions[jumpCondition.hash].items[0].items[0].location\n                        ] = new Variable(fullFunction.split('(')[0], []);\n                        delete state.functions[jumpCondition.hash];\n                    } else {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.variables[\n                            state.functions[jumpCondition.hash].items[0].items[0].location\n                        ].label = fullFunction.split('(')[0];\n                        delete state.functions[jumpCondition.hash];\n                    }\n                }\n            }\n        } else if (\n            !(opcode.pc + ':' + Number(jumpLocation) in state.jumps) &&\n            ((jumpCondition.name === 'LT' &&\n                jumpCondition.left.name === 'CALLDATASIZE' &&\n                typeof jumpCondition.right === 'bigint' &&\n                jumpCondition.right === 4n) ||\n                (jumpCondition.name === 'ISZERO' && jumpCondition.item.name === 'CALLDATASIZE'))\n        ) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (jumpIndex >= 0) {\n                state.halted = true;\n                const trueClone: any = state.clone();\n                trueClone.pc = jumpIndex;\n                trueClone.conditions.push(jumpCondition);\n                const trueCloneTree = trueClone.parse();\n                const falseClone = state.clone();\n                falseClone.pc = state.pc + 1;\n                const falseCloneTree: any = falseClone.parse();\n                if (\n                    trueCloneTree.length > 0 &&\n                    trueCloneTree.length === falseCloneTree.length &&\n                    trueCloneTree[0].name !== 'REVERT' &&\n                    trueCloneTree[0].name !== 'INVALID' &&\n                    trueCloneTree.map((item: any) => stringify(item)).join('') ===\n                        falseCloneTree.map((item: any) => stringify(item)).join('')\n                ) {\n                    state.functions[''] = new TopLevelFunction(\n                        trueCloneTree,\n                        '',\n                        trueCloneTree.gasUsed,\n                        state.functionHashes\n                    );\n                } else if (\n                    trueCloneTree.length > 0 &&\n                    trueCloneTree[0].name !== 'REVERT' &&\n                    trueCloneTree[0].name !== 'INVALID'\n                ) {\n                    state.instructions.push(\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\n                    );\n                }\n            } else {\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            }\n        } else if (!(opcode.pc + ':' + Number(jumpLocation) in state.jumps)) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            state.jumps[opcode.pc + ':' + Number(jumpLocation)] = true;\n            if (jumpIndex >= 0) {\n                state.halted = true;\n                const trueClone: any = state.clone();\n                trueClone.pc = jumpIndex;\n                trueClone.conditions.push(jumpCondition);\n                const trueCloneTree = trueClone.parse();\n                const falseClone = state.clone();\n                falseClone.pc = state.pc + 1;\n                const falseCloneTree: any = falseClone.parse();\n                if (\n                    (falseCloneTree.length === 1 &&\n                        'name' in falseCloneTree[0] &&\n                        falseCloneTree[0].name === 'REVERT' &&\n                        falseCloneTree[0].items &&\n                        falseCloneTree[0].items.length === 0) ||\n                    falseCloneTree[0].name === 'INVALID'\n                ) {\n                    if (\n                        jumpCondition.name === 'CALL' &&\n                        typeof jumpCondition.memoryLength === 'bigint' &&\n                        jumpCondition.memoryLength === 0n &&\n                        typeof jumpCondition.outputLength === 'bigint' &&\n                        jumpCondition.outputLength === 0n &&\n                        jumpCondition.gas.name === 'MUL' &&\n                        jumpCondition.gas.left.name === 'ISZERO' &&\n                        typeof jumpCondition.gas.right === 'bigint' &&\n                        jumpCondition.gas.right === 2300n\n                    ) {\n                        jumpCondition.throwOnFail = true;\n                        state.instructions.push(jumpCondition);\n                        state.instructions.push(...trueCloneTree);\n                    } else {\n                        state.instructions.push(new REQUIRE(jumpCondition));\n                        state.instructions.push(...trueCloneTree);\n                    }\n                } else {\n                    state.instructions.push(\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\n                    );\n                }\n            } else {\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            }\n        } else {\n            state.instructions.push(new JUMPI(jumpCondition, jumpLocation, null, null, true));\n        }\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { MLOAD } from './mload';\n// import * as eventHashes from '../../data/eventHashes.json';\n\nexport class LOG {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items?: any;\n    readonly topics: any;\n    readonly eventName?: string;\n\n    constructor(\n        eventHashes: { [s: string]: string },\n        topics: any,\n        items?: any,\n        memoryStart?: any,\n        memoryLength?: any\n    ) {\n        this.name = 'LOG';\n        this.wrapped = true;\n        this.topics = topics;\n        if (\n            this.topics.length > 0 &&\n            typeof this.topics[0] === 'bigint' &&\n            this.topics[0].toString(16) in eventHashes\n        ) {\n            this.eventName = (eventHashes as any)[this.topics[0].toString(16)].split('(')[0];\n            this.topics.shift();\n        }\n        if (this.memoryStart && this.memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.eventName) {\n            return (\n                'emit ' + this.eventName + '(' + [...this.topics, ...this.items].join(', ') + ');'\n            );\n        } else {\n            return 'log(' + [...this.topics, ...this.items].join(', ') + ');';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const topicsCount = parseInt(opcode.name.replace('LOG', ''), 10);\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const topics = [];\n    for (let i = 0; i < topicsCount; i++) {\n        topics.push(state.stack.pop());\n    }\n    if (topics.length > 0) {\n        const eventTopic = topics[0].toString(16);\n        if (!(eventTopic in state.events)) {\n            state.events[eventTopic] = {};\n            state.events[eventTopic].indexedCount = topics.length - 1;\n            if (eventTopic in state.eventHashes) {\n                state.events[eventTopic].label = (state.eventHashes as any)[eventTopic];\n            }\n        }\n    }\n    if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n        const items = [];\n        for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        if (topics.length === 0) {\n            if (!('anonymous' in state.events)) {\n                state.events['anonymous'] = [];\n            }\n            state.events['anonymous'].push({ items });\n        }\n        state.instructions.push(new LOG(state.eventHashes, topics, items));\n    } else {\n        state.instructions.push(new LOG(state.eventHashes, topics, [], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class LT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n    readonly equal: boolean;\n\n    constructor(left: any, right: any, equal = false) {\n        this.name = 'LT';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n        this.equal = equal;\n    }\n\n    toString() {\n        if (this.equal) {\n            return stringify(this.left) + ' <= ' + stringify(this.right);\n        } else {\n            return stringify(this.left) + ' < ' + stringify(this.right);\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left < right ? 1n : 0n);\n    } else {\n        state.stack.push(new LT(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class MLOAD {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n\n    constructor(location: any) {\n        this.name = 'MLOAD';\n        this.wrapped = true;\n        this.location = location;\n    }\n\n    toString() {\n        return 'memory[' + stringify(this.location) + ']';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    if (typeof memoryLocation === 'bigint' && Number(memoryLocation) in state.memory) {\n        state.stack.push(state.memory[Number(memoryLocation)]);\n    } else {\n        state.stack.push(new MLOAD(memoryLocation));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class MOD {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'MOD';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' % ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left % right);\n    } else {\n        state.stack.push(new MOD(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class MSIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'MSIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'memory.length';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new MSIZE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class MSTORE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly data: any;\n\n    constructor(location: any, data: any) {\n        this.name = 'MSTORE';\n        this.wrapped = true;\n        this.location = location;\n        this.data = data;\n    }\n\n    toString() {\n        return 'memory[' + stringify(this.location) + '] = ' + stringify(this.data) + ';';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    const storeData = state.stack.pop();\n    if (typeof storeLocation === 'bigint') {\n        state.memory[Number(storeLocation)] = storeData;\n    } else {\n        state.instructions.push(new MSTORE(storeLocation, storeData));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class MUL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'MUL';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' * ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left * right);\n    } else if (\n        (typeof left === 'bigint' && left === 0n) ||\n        (typeof right === 'bigint' && right === 0n)\n    ) {\n        state.stack.push(0n);\n    } else {\n        state.stack.push(new MUL(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { MUL } from './mul';\nimport { MOD } from './mod';\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    const mod = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint' && typeof mod === 'bigint') {\n        state.stack.push((left * right) % mod);\n    } else if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(new MOD(left * right, mod));\n    } else {\n        state.stack.push(new MOD(new MUL(left, right), mod));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class NOT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly item: any;\n\n    constructor(item: any) {\n        this.name = 'AND';\n        this.wrapped = true;\n        this.item = item;\n    }\n\n    toString() {\n        return '~' + stringify(this.item);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const item = state.stack.pop();\n    if (typeof item === 'bigint') {\n        state.stack.push(!item);\n    } else {\n        state.stack.push(new NOT(item));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class NUMBER {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'NUMBER';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.number';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new NUMBER());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class OR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'OR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' || ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left | right);\n    } else {\n        state.stack.push(new OR(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class ORIGIN {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'ORIGIN';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'tx.origin';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new ORIGIN());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(BigInt(opcode.pc));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.pop();\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(BigInt('0x' + opcode.pushData!.toString('hex')));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { MLOAD } from './mload';\nimport { hex2a } from '../utils/hex';\nimport stringify from '../utils/stringify';\n\nexport class RETURN {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'RETURN';\n        this.wrapped = true;\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.memoryStart && this.memoryLength) {\n            return (\n                'return memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')];'\n            );\n        } else if (this.items.length === 0) {\n            return 'return;';\n        } else if (\n            this.items.length === 1 &&\n            (typeof this.items[0] === 'bigint' || this.items[0].static)\n        ) {\n            return 'return ' + this.items[0] + ';';\n        } else if (\n            this.items.length === 3 &&\n            this.items.every((item: any) => typeof item === 'bigint') &&\n            this.items[0] === 32n\n        ) {\n            return 'return \"' + hex2a(this.items[2].toString(16)) + '\";';\n        } else {\n            return 'return(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.halted = true;\n    if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n        const items = [];\n        for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.instructions.push(new RETURN(items));\n    } else {\n        state.instructions.push(new RETURN([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class RETURNDATACOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly returnDataPosition: any;\n    readonly returnDataSize: any;\n\n    constructor(returnDataPosition: any, returnDataSize: any) {\n        this.name = 'RETURNDATACOPY';\n        this.wrapped = true;\n        this.returnDataPosition = returnDataPosition;\n        this.returnDataSize = returnDataSize;\n    }\n\n    toString() {\n        return (\n            'output[' +\n            stringify(this.returnDataPosition) +\n            ':(' +\n            stringify(this.returnDataPosition) +\n            '+' +\n            stringify(this.returnDataSize) +\n            ')]'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryPosition = state.stack.pop();\n    const returnDataPosition = state.stack.pop();\n    const returnDataSize = state.stack.pop();\n    state.memory[memoryPosition] = new RETURNDATACOPY(returnDataPosition, returnDataSize);\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class RETURNDATASIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'RETURNDATASIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'output.length';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new RETURNDATASIZE());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { MLOAD } from './mload';\nimport stringify from '../utils/stringify';\n\nexport class REVERT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'REVERT';\n        this.wrapped = true;\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.items) {\n            return 'revert(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\n        } else {\n            return (\n                'revert(memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')]);'\n            );\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.halted = true;\n    if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n        const items = [];\n        for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.instructions.push(new REVERT(items));\n    } else {\n        state.instructions.push(new REVERT([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SAR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SAR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' >> ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left >> right);\n    } else {\n        state.stack.push(new SAR(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SELFDESTRUCT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'SELFDESTRUCT';\n        this.wrapped = true;\n        this.address = address;\n    }\n\n    toString() {\n        return 'selfdestruct(' + stringify(this.address) + ');';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.halted = true;\n    state.instructions.push(new SELFDESTRUCT(address));\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { MLOAD } from './mload';\nimport stringify from '../utils/stringify';\n\nexport class SHA3 {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'SHA3';\n        this.wrapped = false;\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.items) {\n            return 'keccak256(' + this.items.map((item: any) => stringify(item)).join(', ') + ')';\n        } else {\n            return (\n                'keccak256(memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')])'\n            );\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    if (typeof memoryStart === 'bigint' && typeof memoryLength === 'bigint') {\n        const items = [];\n        for (let i = Number(memoryStart); i < Number(memoryStart + memoryLength); i += 32) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.stack.push(new SHA3(items));\n    } else {\n        state.stack.push(new SHA3([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SHL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SHL';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' << ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left << right);\n    } else {\n        state.stack.push(new SHL(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SHR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SHR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' >>> ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left >> right);\n    } else {\n        state.stack.push(new SHR(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport { SHL } from './shl';\nimport { SAR } from './sar';\nimport { SUB } from './sub';\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push((right << (32n - left)) >> (32n - left));\n    } else if (typeof left === 'bigint') {\n        state.stack.push(new SAR(new SHL(right, 32n - left), 32n - left));\n    } else {\n        state.stack.push(new SAR(new SHL(right, new SUB(32n, left)), new SUB(32n, left)));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nconst parseMapping = (...items: any[]) => {\n    const mappings: any = [];\n    items.forEach((item2: any) => {\n        if (item2.name === 'SHA3' && item2.items) {\n            mappings.push(...parseMapping(...item2.items));\n        } else {\n            mappings.push(item2);\n        }\n    });\n    return mappings;\n};\n\nexport class MappingLoad {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly count: any;\n    readonly items: any;\n    readonly structlocation?: any;\n    readonly mappings: any;\n\n    constructor(mappings: any, location: any, items: any, count: any, structlocation?: any) {\n        this.name = 'MappingLoad';\n        this.wrapped = false;\n        this.location = location;\n        this.count = count;\n        this.items = items;\n        this.structlocation = structlocation;\n        this.mappings = mappings;\n    }\n\n    toString() {\n        let mappingName = 'mapping' + (this.count + 1);\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\n            mappingName = this.mappings()[this.location].name;\n        }\n        if (this.structlocation) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                '[' +\n                this.structlocation.toString() +\n                ']'\n            );\n        } else {\n            return (\n                mappingName + this.items.map((item: any) => '[' + stringify(item) + ']').join('')\n            );\n        }\n    }\n}\n\nexport class SLOAD {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly variables: any;\n\n    constructor(location: any, variables: any) {\n        this.name = 'SLOAD';\n        this.wrapped = false;\n        this.location = location;\n        this.variables = variables;\n    }\n\n    toString() {\n        if (typeof this.location === 'bigint' && this.location.toString() in this.variables()) {\n            if (this.variables()[this.location.toString()].label) {\n                return this.variables()[this.location.toString()].label;\n            } else {\n                return (\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1)\n                );\n            }\n        } else {\n            return 'storage[' + stringify(this.location) + ']';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    if (storeLocation.name === 'SHA3') {\n        const mappingItems = parseMapping(...storeLocation.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        storeLocation.left.name === 'SHA3' &&\n        typeof storeLocation.right === 'bigint'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.left.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.right\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        typeof storeLocation.left === 'bigint' &&\n        storeLocation.right.name === 'SHA3'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.right.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.left\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else {\n        state.stack.push(new SLOAD(storeLocation, () => state.variables));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\nimport { Variable } from './jumpi';\n\nconst parseMapping = (...items: any[]) => {\n    const mappings: any = [];\n    items.forEach((item2: any) => {\n        if (item2.name === 'SHA3' && item2.items) {\n            mappings.push(...parseMapping(...item2.items));\n        } else {\n            mappings.push(item2);\n        }\n    });\n    return mappings;\n};\n\nexport class MappingStore {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly count: any;\n    readonly items: any;\n    readonly data: any;\n    readonly structlocation?: any;\n    readonly mappings: any;\n\n    constructor(\n        mappings: any,\n        location: any,\n        items: any,\n        data: any,\n        count: any,\n        structlocation?: any\n    ) {\n        this.name = 'MappingStore';\n        this.wrapped = false;\n        this.location = location;\n        this.items = items;\n        this.data = data;\n        this.count = count;\n        this.structlocation = structlocation;\n        this.mappings = mappings;\n    }\n\n    toString() {\n        //console.log(this);\n        let mappingName = 'mapping' + (this.count + 1);\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\n            mappingName = this.mappings()[this.location].name;\n        }\n        if (\n            this.data.name === 'ADD' &&\n            this.data.right.name === 'MappingLoad' &&\n            stringify(this.data.right.location) === stringify(this.location)\n        ) {\n            console.log(this.items);\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' += ' +\n                stringify(this.data.left) +\n                ';'\n            );\n        } else if (\n            this.data.name === 'ADD' &&\n            this.data.left.name === 'MappingLoad' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            console.log(this.items);\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' += ' +\n                stringify(this.data.right) +\n                ';'\n            );\n        } else if (\n            this.data.name === 'SUB' &&\n            this.data.left.name === 'MappingLoad' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' -= ' +\n                stringify(this.data.right) +\n                ';'\n            );\n        } else {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' = ' +\n                stringify(this.data) +\n                ';'\n            );\n        }\n    }\n}\n\nexport class SSTORE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly data: any;\n    readonly variables: any;\n\n    constructor(location: any, data: any, variables: any) {\n        this.name = 'SSTORE';\n        this.wrapped = true;\n        this.location = location;\n        this.data = data;\n        this.variables = variables;\n        if (typeof this.location === 'bigint' && this.location.toString() in this.variables()) {\n            this.variables()[this.location.toString()].types.push(() => this.data.type);\n        } else if (\n            typeof this.location === 'bigint' &&\n            !(this.location.toString() in this.variables())\n        ) {\n            this.variables()[this.location.toString()] = new Variable(false, [\n                () => this.data.type,\n            ]);\n        }\n    }\n\n    toString() {\n        let variableName = 'storage[' + stringify(this.location) + ']';\n        if (typeof this.location === 'bigint' && this.location.toString() in this.variables()) {\n            if (this.variables()[this.location.toString()].label) {\n                variableName = this.variables()[this.location.toString()].label;\n            } else {\n                variableName =\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1);\n            }\n        }\n        if (\n            this.data.name === 'ADD' &&\n            this.data.right.name === 'SLOAD' &&\n            stringify(this.data.right.location) === stringify(this.location)\n        ) {\n            return variableName + ' += ' + stringify(this.data.left) + ';';\n        } else if (\n            this.data.name === 'SUB' &&\n            this.data.left.name === 'SLOAD' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return variableName + ' -= ' + stringify(this.data.right) + ';';\n        } else {\n            return variableName + ' = ' + stringify(this.data) + ';';\n        }\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    const storeData = state.stack.pop();\n    if (storeLocation.name === 'SHA3') {\n        const mappingItems = parseMapping(...storeLocation.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.mappings[mappingLocation].values.push(storeData);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        storeLocation.left.name === 'SHA3' &&\n        typeof storeLocation.right === 'bigint'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.left.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.right\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        typeof storeLocation.left === 'bigint' &&\n        storeLocation.right.name === 'SHA3'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.right.items);\n        const mappingLocation = mappingItems.find(\n            (mappingItem: any) => typeof mappingItem === 'bigint'\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => typeof mappingItem !== 'bigint'\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: [],\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.left\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        // eslint-disable-next-line no-constant-condition\n        false &&\n        typeof storeLocation === 'bigint' &&\n        storeLocation.toString() in state.variables &&\n        storeData.type &&\n        !state.variables[storeLocation.toString()].types.includes(storeData.type)\n    ) {\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        state.variables[storeLocation.toString()].types.push(storeData.type);\n    } else {\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class STATICCALL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n\n    constructor(\n        gas: any,\n        address: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'STATICCALL';\n        this.wrapped = true;\n        this.gas = gas;\n        this.address = address;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n    }\n\n    toString() {\n        return (\n            'staticcall(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new STATICCALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class STOP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'STOP';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'return;';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.halted = true;\n    state.instructions.push(new STOP());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SUB {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SUB';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' - ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left - right);\n    } else {\n        state.stack.push(new SUB(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const swapLocation = parseInt(opcode.name.replace('SWAP', ''), 10);\n    state.stack.swap(swapLocation);\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\n\nexport class TIMESTAMP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'TIMESTAMP';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.timestamp';\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    state.stack.push(new TIMESTAMP());\n};\n","import { EVM } from '../classes/evm.class';\nimport { Opcode } from '../opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class XOR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'XOR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' ^ ' + stringify(this.right);\n    }\n}\n\nexport default (_opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (typeof left === 'bigint' && typeof right === 'bigint') {\n        state.stack.push(left ^ right);\n    } else {\n        state.stack.push(new XOR(left, right));\n    }\n};\n","export function hex2a(hexx: any) {\n    const hex = hexx.toString();\n    let str = '';\n    for (let i = 0; i < hex.length && hex.substr(i, 2) !== '00'; i += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    }\n    return str;\n}\n\nexport function pad32(data: string) {\n    if (data.length >= 64) {\n        return data;\n    } else {\n        return '0'.repeat(64 - data.length) + data;\n    }\n}\n\nexport function isHex(h: any) {\n    return /^[0-9a-f-]+$/.test(h);\n}\n\nexport default (data: any) => {\n    if (isHex(data)) {\n        const pieces = data.match(/.{1,64}/g);\n        if (pieces.length === 3 && parseInt(pieces[0], 16) === 32) {\n            const stringLength = parseInt(pieces[1], 16) * 2;\n            const stringData = hex2a(pieces[2].substr(0, stringLength));\n            return '\"' + stringData + '\"';\n        } else if (!isNaN(parseInt(data, 16))) {\n            return parseInt(data, 16).toString();\n        } else {\n            return data;\n        }\n    } else {\n        return data;\n    }\n};\n","import STOP from '../opcodes/stop';\nimport ADD from '../opcodes/add';\nimport MUL from '../opcodes/mul';\nimport SUB from '../opcodes/sub';\nimport DIV from '../opcodes/div';\nimport MOD from '../opcodes/mod';\nimport ADDMOD from '../opcodes/addmod';\nimport MULMOD from '../opcodes/mulmod';\nimport EXP from '../opcodes/exp';\nimport SIGNEXTEND from '../opcodes/signextend';\nimport LT from '../opcodes/lt';\nimport GT from '../opcodes/gt';\nimport EQ from '../opcodes/eq';\nimport ISZERO from '../opcodes/iszero';\nimport AND from '../opcodes/and';\nimport OR from '../opcodes/or';\nimport XOR from '../opcodes/xor';\nimport NOT from '../opcodes/not';\nimport BYTE from '../opcodes/byte';\nimport SHL from '../opcodes/shl';\nimport SHR from '../opcodes/shr';\nimport SAR from '../opcodes/sar';\nimport SHA3 from '../opcodes/sha3';\nimport ADDRESS from '../opcodes/address';\nimport BALANCE from '../opcodes/balance';\nimport ORIGIN from '../opcodes/origin';\nimport CALLER from '../opcodes/caller';\nimport CALLVALUE from '../opcodes/callvalue';\nimport CALLDATALOAD from '../opcodes/calldataload';\nimport CALLDATASIZE from '../opcodes/calldatasize';\nimport CALLDATACOPY from '../opcodes/calldatacopy';\nimport CODESIZE from '../opcodes/codesize';\nimport CODECOPY from '../opcodes/codecopy';\nimport GASPRICE from '../opcodes/gasprice';\nimport EXTCODESIZE from '../opcodes/extcodesize';\nimport EXTCODECOPY from '../opcodes/extcodecopy';\nimport RETURNDATASIZE from '../opcodes/returndatasize';\nimport RETURNDATACOPY from '../opcodes/returndatacopy';\nimport EXTCODEHASH from '../opcodes/extcodehash';\nimport BLOCKHASH from '../opcodes/blockhash';\nimport COINBASE from '../opcodes/coinbase';\nimport TIMESTAMP from '../opcodes/timestamp';\nimport NUMBER from '../opcodes/number';\nimport DIFFICULTY from '../opcodes/difficulty';\nimport GASLIMIT from '../opcodes/gaslimit';\nimport POP from '../opcodes/pop';\nimport MLOAD from '../opcodes/mload';\nimport MSTORE from '../opcodes/mstore';\nimport SLOAD from '../opcodes/sload';\nimport SSTORE from '../opcodes/sstore';\nimport JUMP from '../opcodes/jump';\nimport JUMPI from '../opcodes/jumpi';\nimport PC from '../opcodes/pc';\nimport MSIZE from '../opcodes/msize';\nimport GAS from '../opcodes/gas';\nimport JUMPDEST from '../opcodes/jumpdest';\nimport PUSH from '../opcodes/push';\nimport DUP from '../opcodes/dup';\nimport SWAP from '../opcodes/swap';\nimport LOG from '../opcodes/log';\nimport CREATE from '../opcodes/create';\nimport CALL from '../opcodes/call';\nimport CALLCODE from '../opcodes/callcode';\nimport RETURN from '../opcodes/return';\nimport DELEGATECALL from '../opcodes/delegatecall';\nimport CREATE2 from '../opcodes/create2';\nimport STATICCALL from '../opcodes/staticcall';\nimport REVERT from '../opcodes/revert';\nimport INVALID from '../opcodes/invalid';\nimport SELFDESTRUCT from '../opcodes/selfdestruct';\n\nexport default {\n    STOP,\n    ADD,\n    MUL,\n    SUB,\n    DIV,\n    SDIV: DIV,\n    MOD,\n    SMOD: MOD,\n    ADDMOD,\n    MULMOD,\n    EXP,\n    SIGNEXTEND,\n    LT,\n    GT,\n    SLT: LT,\n    SGT: GT,\n    EQ,\n    ISZERO,\n    AND,\n    OR,\n    XOR,\n    NOT,\n    BYTE,\n    SHL,\n    SHR,\n    SAR,\n    SHA3,\n    ADDRESS,\n    BALANCE,\n    ORIGIN,\n    CALLER,\n    CALLVALUE,\n    CALLDATALOAD,\n    CALLDATASIZE,\n    CALLDATACOPY,\n    CODESIZE,\n    CODECOPY,\n    GASPRICE,\n    EXTCODESIZE,\n    EXTCODECOPY,\n    RETURNDATASIZE,\n    RETURNDATACOPY,\n    EXTCODEHASH,\n    BLOCKHASH,\n    COINBASE,\n    TIMESTAMP,\n    NUMBER,\n    DIFFICULTY,\n    GASLIMIT,\n    POP,\n    MLOAD,\n    MSTORE,\n    MSTORE8: MSTORE,\n    SLOAD,\n    SSTORE,\n    JUMP,\n    JUMPI,\n    PC,\n    MSIZE,\n    GAS,\n    JUMPDEST,\n    PUSH1: PUSH,\n    PUSH2: PUSH,\n    PUSH3: PUSH,\n    PUSH4: PUSH,\n    PUSH5: PUSH,\n    PUSH6: PUSH,\n    PUSH7: PUSH,\n    PUSH8: PUSH,\n    PUSH9: PUSH,\n    PUSH10: PUSH,\n    PUSH11: PUSH,\n    PUSH12: PUSH,\n    PUSH13: PUSH,\n    PUSH14: PUSH,\n    PUSH15: PUSH,\n    PUSH16: PUSH,\n    PUSH17: PUSH,\n    PUSH18: PUSH,\n    PUSH19: PUSH,\n    PUSH20: PUSH,\n    PUSH21: PUSH,\n    PUSH22: PUSH,\n    PUSH23: PUSH,\n    PUSH24: PUSH,\n    PUSH25: PUSH,\n    PUSH26: PUSH,\n    PUSH27: PUSH,\n    PUSH28: PUSH,\n    PUSH29: PUSH,\n    PUSH30: PUSH,\n    PUSH31: PUSH,\n    PUSH32: PUSH,\n    DUP1: DUP,\n    DUP2: DUP,\n    DUP3: DUP,\n    DUP4: DUP,\n    DUP5: DUP,\n    DUP6: DUP,\n    DUP7: DUP,\n    DUP8: DUP,\n    DUP9: DUP,\n    DUP10: DUP,\n    DUP11: DUP,\n    DUP12: DUP,\n    DUP13: DUP,\n    DUP14: DUP,\n    DUP15: DUP,\n    DUP16: DUP,\n    SWAP1: SWAP,\n    SWAP2: SWAP,\n    SWAP3: SWAP,\n    SWAP4: SWAP,\n    SWAP5: SWAP,\n    SWAP6: SWAP,\n    SWAP7: SWAP,\n    SWAP8: SWAP,\n    SWAP9: SWAP,\n    SWAP10: SWAP,\n    SWAP11: SWAP,\n    SWAP12: SWAP,\n    SWAP13: SWAP,\n    SWAP14: SWAP,\n    SWAP15: SWAP,\n    SWAP16: SWAP,\n    LOG0: LOG,\n    LOG1: LOG,\n    LOG2: LOG,\n    LOG3: LOG,\n    LOG4: LOG,\n    CREATE,\n    CALL,\n    CALLCODE,\n    RETURN,\n    DELEGATECALL,\n    CREATE2,\n    STATICCALL,\n    REVERT,\n    INVALID,\n    SELFDESTRUCT,\n};\n","export default (item: any) => {\n    if (typeof item === 'bigint') {\n        return item.toString(16);\n    } else if (!item.wrapped) {\n        return item.toString();\n    } else {\n        return '(' + item.toString() + ')';\n    }\n};\n","export default (stateEvents: any, events: string[]) => {\n    const stateEventValues = Object.keys(stateEvents).map((key: string) => stateEvents[key]);\n    let output = '';\n\n    events.forEach((event: string) => {\n        const eventName = event.split('(')[0];\n        const eventArguments = event.replace(eventName, '').substring(1).slice(0, -1);\n        output += 'event ';\n        if (eventArguments) {\n            output += eventName + '(';\n            output += eventArguments\n                .split(',')\n                .map((a: string, i: number) => {\n                    const stateEvent = stateEventValues.find((e: any) => e.label === event);\n                    if (stateEvent && i < stateEvent.indexedCount) {\n                        return a + ' indexed _arg' + i;\n                    } else {\n                        return a + ' _arg' + i;\n                    }\n                })\n                .join(', ');\n            output += ');';\n        } else {\n            output += event;\n        }\n        output += '\\n';\n    });\n\n    if (events.length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","import stringifyInstructions from './stringifyInstructions';\n// import * as functionHashes from '../../data/functionHashes.json';\n\nexport default (\n    functionName: string,\n    functionInstance: any,\n    functionHashes: { [s: string]: string }\n): string => {\n    let output = '';\n    output += 'function ';\n    if (functionName in functionHashes) {\n        const fullFunction = (functionHashes as any)[functionName];\n        const fullFunctionName = fullFunction.split('(')[0];\n        const fullFunctionArguments = fullFunction\n            .replace(fullFunctionName, '')\n            .substring(1)\n            .slice(0, -1);\n        if (fullFunctionArguments) {\n            output += fullFunctionName + '(';\n            output += fullFunctionArguments\n                .split(',')\n                .map((a: string, i: number) => a + ' _arg' + i)\n                .join(', ');\n            output += ')';\n        } else {\n            output += fullFunction;\n        }\n    } else {\n        output += functionName + '()';\n    }\n    output += ' ' + functionInstance.visibility;\n    if (functionInstance.constant) {\n        output += ' view';\n    }\n    if (functionInstance.payable) {\n        output += ' payable';\n    }\n    if (functionInstance.returns.length > 0) {\n        output += ' returns (' + functionInstance.returns.join(', ') + ')';\n    }\n    output += ' {\\n';\n    output += stringifyInstructions(functionInstance.items, 4);\n    output += '}\\n\\n';\n    return output;\n};\n","export const stringifyInstructions = (instructionTree: any, indentation = 0): string => {\n    let instructionLines = '';\n    instructionTree.forEach((instruction: any) => {\n        if (instruction.name === 'JUMPI' && instruction.false) {\n            const condition = instruction.toString();\n            const falseInstructions = instruction.false.filter((i: any) => i.debugLevel > 0);\n            if (falseInstructions.length === 1 && falseInstructions[0].name === 'JUMPI') {\n                instructionLines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\n                instructionLines += stringifyInstructions(instruction.true, indentation + 4);\n                instructionLines += ' '.repeat(indentation) + '} else ';\n                const elseOrElseIf = stringifyInstructions(instruction.false, indentation);\n                if (elseOrElseIf.trim().startsWith('if')) {\n                    instructionLines += elseOrElseIf.trim() + '\\n';\n                } else {\n                    instructionLines +=\n                        '{\\n' +\n                        elseOrElseIf\n                            .split('\\n')\n                            .filter(l => l)\n                            .map(l => ' '.repeat(4) + l)\n                            .join('\\n');\n                    instructionLines += '\\n' + ' '.repeat(indentation) + '}\\n';\n                }\n            } else {\n                instructionLines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\n                instructionLines += stringifyInstructions(instruction.true, indentation + 4);\n                instructionLines += ' '.repeat(indentation) + '} else {\\n';\n                instructionLines += stringifyInstructions(instruction.false, indentation + 4);\n                instructionLines += ' '.repeat(indentation) + '}\\n';\n            }\n        } else {\n            instructionLines += ' '.repeat(indentation) + instruction.toString() + '\\n';\n        }\n    });\n    return instructionLines;\n};\n\nexport default stringifyInstructions;\n","const stringifyMapping = (mapping: any) => {\n    const mappingKey: string[] = [];\n    const mappingValue: string[] = [];\n    let deepMapping = false;\n    mapping.keys\n        .filter((mappingChild: any) => mappingChild.length > 0)\n        .forEach((mappingChild: any) => {\n            if (\n                mappingChild.length > 0 &&\n                mappingChild[0].type &&\n                !mappingKey.includes(mappingChild[0].type)\n            ) {\n                mappingKey.push(mappingChild[0].type);\n            }\n            if (mappingChild.length > 1 && !deepMapping) {\n                deepMapping = true;\n                mappingValue.push(\n                    stringifyMapping({\n                        name: mapping.name,\n                        structs: mapping.structs,\n                        keys: mapping.keys.map((items: any) => {\n                            items.shift();\n                            return items;\n                        }),\n                        values: mapping.values,\n                    })\n                );\n            } else if (mappingChild.length === 1 && !deepMapping) {\n                mapping.values.forEach((mappingChild2: any) => {\n                    if (mappingChild2.type && !mappingValue.includes(mappingChild2.type)) {\n                        mappingValue.push(mappingChild2.type);\n                    }\n                });\n            }\n        });\n    if (mappingKey.length === 0) {\n        mappingKey.push('unknown');\n    }\n    if (mapping.structs.length > 0 && mappingValue.length === 0) {\n        mappingValue.push(mapping.name + 'Struct');\n    } else if (mappingValue.length === 0) {\n        mappingValue.push('unknown');\n    }\n    return 'mapping (' + mappingKey.join('|') + ' => ' + mappingValue.join('|') + ')';\n};\n\nexport default (mappings: any) => {\n    let output = '';\n\n    Object.keys(mappings).forEach((key: string, index: number) => {\n        const mapping = mappings[key];\n        if (mapping.name) {\n            output += stringifyMapping(mapping) + ' public ' + mapping.name + ';';\n        } else {\n            output += stringifyMapping(mapping) + ' mapping' + (index + 1) + ';';\n        }\n        output += '\\n';\n    });\n\n    if (Object.keys(mappings).length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","export default (mappings: any) => {\n    let output = '';\n\n    Object.keys(mappings)\n        .filter((key: any) => mappings[key].structs.length > 0)\n        .forEach((key: string, _index: number) => {\n            const mapping = mappings[key];\n            output += 'struct ' + mapping.name + 'Struct {\\n';\n            mapping.structs.forEach((struct: any) => {\n                output += '    ' + struct.toString() + ';\\n';\n            });\n            output += '}\\n\\n';\n        });\n\n    return output;\n};\n","export default (variables: any) => {\n    let output = '';\n\n    Object.keys(variables).forEach((key: string, index: number) => {\n        const variable = variables[key];\n        const types = variable.types\n            .map((type: any) => {\n                if (typeof type === 'function') {\n                    return type();\n                } else {\n                    return type;\n                }\n            })\n            .filter((type: any) => type);\n        if (types.length === 0) {\n            types.push('unknown');\n        }\n        if (variable.label) {\n            output += [...new Set(types)].join('|') + ' public ' + variable.label + ';';\n        } else {\n            output += [...new Set(types)].join('|') + ' var' + (index + 1).toString() + ';';\n            index++;\n        }\n        output += '\\n';\n    });\n\n    if (Object.keys(variables).length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(341);\n"],"names":["EVM","constructor","code","functionHashes","eventHashes","pc","stack","Stack","memory","opcodes","instructions","storage","jumps","mappings","layer","halted","functions","variables","events","gasUsed","conditions","Buffer","this","from","replace","clone","getBytecode","toString","getOpcodes","length","index","currentOp","opcode","name","codes","push","startsWith","pushDataLength","pushData","slice","getFunctions","Set","filter","map","hash","getEvents","containsOpcode","names","Error","currentOpcode","JUMPDEST","STOP","RETURN","REVERT","INVALID","SELFDESTRUCT","includes","PUSH1","PUSH32","getJumpDestinations","getSwarmHash","match","getABI","abi","parse","Object","keys","forEach","key","item","type","label","split","payable","constant","reset","decompile","instructionTree","functionName","join","isERC165","every","v","elements","unshift","pop","shift","duplicate","position","swap","secondPosition","firstValue","secondValue","parseSingle","data","substring","BigInt","transactionObject","blockHash","blockNumber","gas","gasPrice","input","to","value","setInput","getFunctionHash","substr","getFunction","functionHash","getFunctionName","rawFunction","getRawArguments","getArguments","_descriptive","functionArguments","rawFunctionArguments","result","i","functionArgumentType","functionArgument","location","Number","isContractCreation","Transaction","ADD","MUL","SUB","DIV","SDIV","MOD","SMOD","ADDMOD","MULMOD","EXP","SIGNEXTEND","LT","GT","SLT","SGT","EQ","ISZERO","AND","OR","XOR","NOT","BYTE","SHL","SHR","SAR","SHA3","ADDRESS","BALANCE","ORIGIN","CALLER","CALLVALUE","CALLDATALOAD","CALLDATASIZE","CALLDATACOPY","CODESIZE","CODECOPY","GASPRICE","EXTCODESIZE","EXTCODECOPY","RETURNDATASIZE","RETURNDATACOPY","EXTCODEHASH","BLOCKHASH","COINBASE","TIMESTAMP","NUMBER","DIFFICULTY","GASLIMIT","POP","MLOAD","MSTORE","MSTORE8","SLOAD","SSTORE","JUMP","JUMPI","PC","MSIZE","GAS","PUSH2","PUSH3","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH30","PUSH31","DUP1","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","SWAP1","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","LOG0","LOG1","LOG2","LOG3","LOG4","CREATE","CALL","CALLCODE","DELEGATECALL","CREATE2","STATICCALL","left","right","wrapped","_opcode","state","mod","test","size","address","number","memoryStart","memoryLength","outputStart","outputLength","throwOnFail","startLocation","copyLength","memoryLocation","duplicateLocation","parseInt","SIG","repeat","equal","bad","valid","jumpLocation","jumpLocationData","find","o","jumpIndex","indexOf","_state","updateCallDataLoad","types","prototype","hasOwnProperty","call","argNumber","findReturns","returns","items","deepReturns","TopLevelFunction","visibility","REQUIRE","condition","argumentTypes","returnItem","Variable","ifTrue","ifFalse","skipped","true","false","console","log","jumpCondition","trueClone","trueCloneTree","falseClone","falseCloneTree","functionClone","functionCloneTree","fullFunction","structlocation","structs","LOG","topics","eventName","topicsCount","eventTopic","indexedCount","storeLocation","storeData","static","hex2a","returnDataPosition","returnDataSize","memoryPosition","parseMapping","item2","MappingLoad","count","mappingName","mappingItems","mappingLocation","mappingItem","mappingParts","values","MappingStore","variableName","swapLocation","hexx","hex","str","String","fromCharCode","isHex","h","pieces","stringLength","isNaN","stateEvents","stateEventValues","output","event","eventArguments","a","stateEvent","e","functionInstance","fullFunctionName","fullFunctionArguments","stringifyInstructions","indentation","instructionLines","instruction","falseInstructions","debugLevel","elseOrElseIf","trim","l","stringifyMapping","mapping","mappingKey","mappingValue","deepMapping","mappingChild","mappingChild2","_index","struct","variable","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}