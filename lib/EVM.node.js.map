{"version":3,"file":"EVM.node.js","mappings":"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,EAAM,OACN,EAAM,SACN,EAAM,SACN,GAAM,MACN,GAAM,aACN,GAAM,KACN,GAAM,KACN,GAAM,MACN,GAAM,MACN,GAAM,KACN,GAAM,SACN,GAAM,MACN,GAAM,KACN,GAAM,MACN,GAAM,MACN,GAAM,OACN,GAAM,MACN,GAAM,MACN,GAAM,MACN,GAAM,OACN,GAAM,UACN,GAAM,UACN,GAAM,SACN,GAAM,SACN,GAAM,YACN,GAAM,eACN,GAAM,eACN,GAAM,eACN,GAAM,WACN,GAAM,WACN,GAAM,WACN,GAAM,cACN,GAAM,cACN,GAAM,iBACN,GAAM,iBACN,GAAM,cACN,GAAM,YACN,GAAM,WACN,GAAM,YACN,GAAM,SACN,GAAM,aACN,GAAM,WACN,GAAM,MACN,GAAM,QACN,GAAM,SACN,GAAM,UACN,GAAM,QACN,GAAM,SACN,GAAM,OACN,GAAM,QACN,GAAM,KACN,GAAM,QACN,GAAM,MACN,GAAM,WACN,GAAM,QACN,GAAM,QACN,GAAM,QACN,GAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,OACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,QACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,SACN,IAAM,OACN,IAAM,OA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","sources":["webpack://evm/./node_modules/big-integer/BigInteger.js","webpack://evm/./src/classes/evm.class.ts","webpack://evm/./src/classes/stack.class.ts","webpack://evm/./src/classes/tx.class.ts","webpack://evm/./src/index.ts","webpack://evm/./src/opcodes.ts","webpack://evm/./src/opcodes/add.ts","webpack://evm/./src/opcodes/addmod.ts","webpack://evm/./src/opcodes/address.ts","webpack://evm/./src/opcodes/and.ts","webpack://evm/./src/opcodes/balance.ts","webpack://evm/./src/opcodes/blockhash.ts","webpack://evm/./src/opcodes/byte.ts","webpack://evm/./src/opcodes/call.ts","webpack://evm/./src/opcodes/callcode.ts","webpack://evm/./src/opcodes/calldatacopy.ts","webpack://evm/./src/opcodes/calldataload.ts","webpack://evm/./src/opcodes/calldatasize.ts","webpack://evm/./src/opcodes/caller.ts","webpack://evm/./src/opcodes/callvalue.ts","webpack://evm/./src/opcodes/codecopy.ts","webpack://evm/./src/opcodes/codesize.ts","webpack://evm/./src/opcodes/coinbase.ts","webpack://evm/./src/opcodes/create.ts","webpack://evm/./src/opcodes/create2.ts","webpack://evm/./src/opcodes/delegatecall.ts","webpack://evm/./src/opcodes/difficulty.ts","webpack://evm/./src/opcodes/div.ts","webpack://evm/./src/opcodes/dup.ts","webpack://evm/./src/opcodes/eq.ts","webpack://evm/./src/opcodes/exp.ts","webpack://evm/./src/opcodes/extcodecopy.ts","webpack://evm/./src/opcodes/extcodehash.ts","webpack://evm/./src/opcodes/extcodesize.ts","webpack://evm/./src/opcodes/gas.ts","webpack://evm/./src/opcodes/gaslimit.ts","webpack://evm/./src/opcodes/gasprice.ts","webpack://evm/./src/opcodes/gt.ts","webpack://evm/./src/opcodes/invalid.ts","webpack://evm/./src/opcodes/iszero.ts","webpack://evm/./src/opcodes/jump.ts","webpack://evm/./src/opcodes/jumpdest.ts","webpack://evm/./src/opcodes/jumpi.ts","webpack://evm/./src/opcodes/log.ts","webpack://evm/./src/opcodes/lt.ts","webpack://evm/./src/opcodes/mload.ts","webpack://evm/./src/opcodes/mod.ts","webpack://evm/./src/opcodes/msize.ts","webpack://evm/./src/opcodes/mstore.ts","webpack://evm/./src/opcodes/mul.ts","webpack://evm/./src/opcodes/mulmod.ts","webpack://evm/./src/opcodes/not.ts","webpack://evm/./src/opcodes/number.ts","webpack://evm/./src/opcodes/or.ts","webpack://evm/./src/opcodes/origin.ts","webpack://evm/./src/opcodes/pc.ts","webpack://evm/./src/opcodes/pop.ts","webpack://evm/./src/opcodes/push.ts","webpack://evm/./src/opcodes/return.ts","webpack://evm/./src/opcodes/returndatacopy.ts","webpack://evm/./src/opcodes/returndatasize.ts","webpack://evm/./src/opcodes/revert.ts","webpack://evm/./src/opcodes/sar.ts","webpack://evm/./src/opcodes/selfdestruct.ts","webpack://evm/./src/opcodes/sha3.ts","webpack://evm/./src/opcodes/shl.ts","webpack://evm/./src/opcodes/shr.ts","webpack://evm/./src/opcodes/signextend.ts","webpack://evm/./src/opcodes/sload.ts","webpack://evm/./src/opcodes/sstore.ts","webpack://evm/./src/opcodes/staticcall.ts","webpack://evm/./src/opcodes/stop.ts","webpack://evm/./src/opcodes/sub.ts","webpack://evm/./src/opcodes/swap.ts","webpack://evm/./src/opcodes/timestamp.ts","webpack://evm/./src/opcodes/xor.ts","webpack://evm/./src/utils/hex.ts","webpack://evm/./src/utils/opcodes.ts","webpack://evm/./src/utils/stringify.ts","webpack://evm/./src/utils/stringifyEvents.ts","webpack://evm/./src/utils/stringifyFunctions.ts","webpack://evm/./src/utils/stringifyInstructions.ts","webpack://evm/./src/utils/stringifyMappings.ts","webpack://evm/./src/utils/stringifyStructs.ts","webpack://evm/./src/utils/stringifyVariables.ts","webpack://evm/webpack/bootstrap","webpack://evm/webpack/runtime/node module decorator","webpack://evm/webpack/startup"],"sourcesContent":["var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] + (i + 1 < digits.length ? digits[i + 1] / BASE : 0) : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < digits[i]) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","// import * as functionHashes from '../../data/functionHashes.json';\n// import * as eventHashes from '../../data/eventHashes.json';\nimport opcodeFunctions from '../utils/opcodes';\nimport stringifyEvents from '../utils/stringifyEvents';\nimport stringifyStructs from '../utils/stringifyStructs';\nimport stringifyMappings from '../utils/stringifyMappings';\nimport stringifyVariables from '../utils/stringifyVariables';\nimport stringifyFunctions from '../utils/stringifyFunctions';\nimport stringifyInstructions from '../utils/stringifyInstructions';\nimport { Stack } from './stack.class';\nimport Event from '../interfaces/event.interface';\nimport Instruction from '../interfaces/instruction.interface';\nimport Mapping from '../interfaces/mapping.interface';\nimport Opcode from '../interfaces/opcode.interface';\nimport Variable from '../interfaces/variable.interface';\nimport {\n    STOP,\n    RETURN,\n    REVERT,\n    INVALID,\n    PUSH1,\n    PUSH32,\n    JUMPDEST,\n    SELFDESTRUCT,\n    codes,\n    names\n} from '../opcodes';\n\nexport class EVM {\n    pc: number = 0;\n    stack: Stack = new Stack();\n    memory: any = {};\n    opcodes: Opcode[] = [];\n    instructions: Instruction[] = [];\n    storage: any = {};\n    jumps: any = {};\n    code: Buffer;\n    mappings: Mapping = {};\n    layer: number = 0;\n    halted: boolean = false;\n    functions: any = {};\n    variables: Variable = {};\n    events: Event = {};\n    gasUsed: number = 0;\n    conditions: any = [];\n\n    constructor(code: string | Buffer, readonly functionHashes: {[s: string]: string}, readonly eventHashes: {[s: string]: string}) {\n        if (code instanceof Buffer) {\n            this.code = code;\n        } else {\n            this.code = Buffer.from(code.replace('0x', ''), 'hex');\n        }\n    }\n\n    clone(): EVM {\n        const clone = new EVM(this.code, this.functionHashes, this.eventHashes);\n        clone.pc = this.pc;\n        clone.opcodes = this.opcodes;\n        clone.stack = this.stack.clone();\n        clone.memory = { ...this.memory };\n        clone.storage = this.storage;\n        clone.jumps = { ...this.jumps };\n        clone.mappings = this.mappings;\n        clone.layer = this.layer + 1;\n        clone.functions = this.functions;\n        clone.variables = this.variables;\n        clone.events = this.events;\n        clone.gasUsed = this.gasUsed;\n        clone.conditions = [...this.conditions];\n        return clone;\n    }\n\n    getBytecode(): string {\n        return '0x' + this.code.toString('hex');\n    }\n\n    getOpcodes(): Opcode[] {\n        if (this.opcodes.length === 0) {\n            for (let index = 0; index < this.code.length; index++) {\n                const currentOp: Opcode = {\n                    pc: index,\n                    opcode: this.code[index],\n                    name: 'INVALID'\n                };\n                if (currentOp.opcode in codes) {\n                    currentOp.name = (codes as any)[this.code[index]];\n                }\n                this.opcodes.push(currentOp);\n                if (currentOp.name.startsWith('PUSH')) {\n                    const pushDataLength = this.code[index] - 0x5f;\n                    const pushData = this.code.slice(index + 1, index + pushDataLength + 1);\n                    currentOp.pushData = pushData;\n                    index += pushDataLength;\n                }\n            }\n        }\n        return this.opcodes;\n    }\n\n    getFunctions(): string[] {\n        return [\n            ...new Set(\n                this.getOpcodes()\n                    .filter(opcode => opcode.name === 'PUSH4')\n                    .map(opcode => (opcode.pushData ? opcode.pushData.toString('hex') : ''))\n                    .filter(hash => hash in this.functionHashes)\n                    .map(hash => (this.functionHashes as any)[hash])\n            )\n        ];\n    }\n\n    getEvents(): string[] {\n        return [\n            ...new Set(\n                this.getOpcodes()\n                    .filter(opcode => opcode.name === 'PUSH32')\n                    .map(opcode => (opcode.pushData ? opcode.pushData.toString('hex') : ''))\n                    .filter(hash => hash in this.eventHashes)\n                    .map(hash => (this.eventHashes as any)[hash])\n            )\n        ];\n    }\n\n    containsOpcode(opcode: number | string): boolean {\n        let halted = false;\n        if (typeof opcode === 'string' && opcode in names) {\n            opcode = (names as any)[opcode];\n        } else if (typeof opcode === 'string') {\n            throw new Error('Invalid opcode provided');\n        }\n        for (let index = 0; index < this.code.length; index++) {\n            const currentOpcode = this.code[index];\n            if (currentOpcode === opcode && !halted) {\n                return true;\n            } else if (currentOpcode === JUMPDEST) {\n                halted = false;\n            } else if ([STOP, RETURN, REVERT, INVALID, SELFDESTRUCT].includes(currentOpcode)) {\n                halted = true;\n            } else if (currentOpcode >= PUSH1 && currentOpcode <= PUSH32) {\n                index += currentOpcode - PUSH1 + 0x01;\n            }\n        }\n        return false;\n    }\n\n    getJumpDestinations(): number[] {\n        return this.getOpcodes()\n            .filter(opcode => opcode.name === 'JUMPDEST')\n            .map(opcode => opcode.pc);\n    }\n\n    getSwarmHash(): string | false {\n        const regex = /a165627a7a72305820([a-f0-9]{64})0029$/;\n        const bytecode = this.getBytecode();\n        const match = bytecode.match(regex);\n        if (match && match[1]) {\n            return 'bzzr://' + match[1];\n        } else {\n            return false;\n        }\n    }\n\n    getABI(): any {\n        const abi: any = [];\n        if (this.instructions.length === 0) {\n            this.parse();\n        }\n        Object.keys(this.functions).forEach((key: string) => {\n            const item: any = abi.push({ type: 'function' });\n            item.name = this.functions[key].label.split('(')[0];\n            item.payable = this.functions[key].payable;\n            item.constant = this.functions[key].constant;\n        });\n    }\n\n    reset(): void {\n        this.pc = 0;\n        this.instructions = [];\n        this.stack.reset();\n        this.memory = {};\n        this.storage = {};\n        this.jumps = {};\n        this.mappings = {};\n        this.functions = {};\n        this.variables = {};\n        this.events = {};\n        this.gasUsed = 0;\n    }\n\n    parse(): Instruction[] {\n        if (this.instructions.length === 0) {\n            const opcodes = this.getOpcodes();\n            for (this.pc; this.pc < opcodes.length && !this.halted; this.pc++) {\n                const opcode = opcodes[this.pc];\n                if (!(opcode.name in opcodeFunctions)) {\n                    throw new Error('Unknown OPCODE: ' + opcode.name);\n                } else {\n                    (opcodeFunctions as any)[opcode.name](opcode, this);\n                }\n            }\n        }\n        return this.instructions;\n    }\n\n    decompile(): string {\n        const instructionTree = this.parse();\n        const events = stringifyEvents(this.events, this.getEvents());\n        const structs = stringifyStructs(this.mappings);\n        const mappings = stringifyMappings(this.mappings);\n        const variables = stringifyVariables(this.variables);\n        const functions = Object.keys(this.functions)\n            .map((functionName: string) =>\n                stringifyFunctions(functionName, this.functions[functionName], this.functionHashes)\n            )\n            .join('');\n        const code = stringifyInstructions(instructionTree);\n        return events + structs + mappings + variables + functions + code;\n    }\n\n    isERC165(): boolean {\n        return ['supportsInterface(bytes4)'].every(v => this.getFunctions().includes(v));\n    }\n}\n","export class Stack {\n    elements: any[];\n\n    constructor() {\n        this.elements = [];\n    }\n\n    push(item: any): void {\n        if (this.elements.length >= 1024) {\n            throw new Error('Stack too deep');\n        } else {\n            this.elements.unshift(item);\n        }\n    }\n\n    pop(): any {\n        if (this.elements.length === 0) {\n            throw new Error('POP with empty stack');\n        } else {\n            return this.elements.shift();\n        }\n    }\n\n    duplicate(position: number): void {\n        if (position < 0 || position > 15) {\n            throw new Error('Unsupported position for duplication operation');\n        } else if (!(position in this.elements)) {\n            throw new Error(\n                \"Invalid duplication operation, provided position wasn't found in stack\"\n            );\n        } else {\n            this.push(this.elements[position]);\n        }\n    }\n\n    swap(secondPosition: number): void {\n        if (secondPosition < 1 || secondPosition > 16) {\n            throw new Error('Unsupported position for swap operation');\n        } else if (!(secondPosition in this.elements)) {\n            throw new Error(\"Invalid swap operation, provided position wasn't found in stack\");\n        } else {\n            const firstValue = this.elements[0];\n            const secondValue = this.elements[secondPosition];\n            this.elements[0] = secondValue;\n            this.elements[secondPosition] = firstValue;\n        }\n    }\n\n    clone(): Stack {\n        const stack = new Stack();\n        stack.elements = [...this.elements];\n        return stack;\n    }\n\n    reset(): void {\n        this.elements = [];\n    }\n}\n","import * as BigNumber from '../../node_modules/big-integer';\n// import * as functionHashes from '../../data/functionHashes.json';\n\nconst parseSingle = (data: any, type: any) => {\n    if (type === 'string') {\n        return '\"' + Buffer.from(data, 'hex').toString('utf8') + '\"';\n    } else if (type === 'address') {\n        return '0x' + data.substring(24);\n    } else if (type === 'uint256' || type === 'uint8') {\n        return BigNumber(data, 16).toString();\n    } else if (type === 'bool') {\n        return (!BigNumber(data, 16).isZero()).toString();\n    } else {\n        return data;\n    }\n};\n\nexport class Transaction {\n    blockHash?: string;\n    blockNumber?: number;\n    from?: string;\n    gas?: number;\n    gasPrice?: number;\n    input?: string;\n    to?: string;\n    value?: number;\n\n    constructor(transactionObject?: any) {\n        if (transactionObject) {\n            if ('blockHash' in transactionObject) {\n                this.blockHash = transactionObject.blockHash;\n            }\n            if ('blockNumber' in transactionObject) {\n                this.blockNumber = transactionObject.blockNumber;\n            }\n            if ('from' in transactionObject) {\n                this.from = transactionObject.from;\n            }\n            if ('gas' in transactionObject) {\n                this.gas = transactionObject.gas;\n            }\n            if ('gasPrice' in transactionObject) {\n                this.gasPrice = transactionObject.gasPrice;\n            }\n            if ('input' in transactionObject) {\n                this.input = transactionObject.input.replace('0x', '');\n            }\n            if ('to' in transactionObject) {\n                this.to = transactionObject.to;\n            }\n            if ('value' in transactionObject) {\n                this.value = transactionObject.value;\n            }\n        }\n    }\n\n    setInput(input: string): void {\n        this.input = input.replace('0x', '');\n    }\n\n    getFunctionHash(): string | false {\n        if (this.input && this.input.length >= 8) {\n            return this.input.substr(0, 8);\n        } else {\n            return false;\n        }\n    }\n\n    getFunction(functionHashes: {[s: string]: string}): string | false {\n        const functionHash = this.getFunctionHash();\n        if (functionHash && functionHash in functionHashes) {\n            return (functionHashes as any)[functionHash];\n        } else {\n            return false;\n        }\n    }\n\n    getFunctionName(functionHashes: {[s: string]: string}): string | false {\n        const rawFunction = this.getFunction(functionHashes);\n        if (rawFunction) {\n            return rawFunction.split('(')[0];\n        } else {\n            return false;\n        }\n    }\n\n    getRawArguments(): string[] {\n        if (this.input && this.input.length >= 70) {\n            return this.input.substr(8).match(/.{1,64}/g)!;\n        } else {\n            return [];\n        }\n    }\n\n    getArguments(functionHashes: {[s: string]: string}, descriptive: boolean = true): string[] {\n        const functionName = this.getFunction(functionHashes);\n        const functionArguments = this.getRawArguments();\n        if (functionName && this.input) {\n            const rawFunctionArguments = functionName\n                .split('(')[1]\n                .slice(0, -1)\n                .split(',');\n            if (\n                rawFunctionArguments.length === 1 &&\n                rawFunctionArguments[0] === '' &&\n                functionArguments.length === 0\n            ) {\n                return [];\n            } else {\n                const result: string[] = [];\n                for (let i = 0; i < rawFunctionArguments.length; i++) {\n                    const functionArgumentType = rawFunctionArguments[i] || 'unknown';\n                    const functionArgument = functionArguments[i];\n                    if (functionArgumentType === 'string') {\n                        const location = BigNumber(functionArgument, 16)\n                            .divide(32)\n                            .toJSNumber();\n                        const length = BigNumber(functionArguments[location], 16)\n                            .multiply(2)\n                            .toJSNumber();\n                        const data = this.input.substring(8).substr((location + 1) * 64, length);\n                        result.push(parseSingle(data, functionArgumentType));\n                    } else {\n                        result.push(parseSingle(functionArgument, functionArgumentType));\n                    }\n                }\n                return result;\n            }\n        } else {\n            return functionArguments;\n        }\n    }\n\n    isContractCreation(): boolean {\n        return this.to === null;\n    }\n}\n","export { Transaction } from './classes/tx.class';\nexport { EVM } from './classes/evm.class';\nexport * from './opcodes';\n","export const STOP = 0x00;\nexport const ADD = 0x01;\nexport const MUL = 0x02;\nexport const SUB = 0x03;\nexport const DIV = 0x04;\nexport const SDIV = 0x05;\nexport const MOD = 0x06;\nexport const SMOD = 0x07;\nexport const ADDMOD = 0x08;\nexport const MULMOD = 0x09;\nexport const EXP = 0x0a;\nexport const SIGNEXTEND = 0x0b;\nexport const LT = 0x10;\nexport const GT = 0x11;\nexport const SLT = 0x12;\nexport const SGT = 0x13;\nexport const EQ = 0x14;\nexport const ISZERO = 0x15;\nexport const AND = 0x16;\nexport const OR = 0x17;\nexport const XOR = 0x18;\nexport const NOT = 0x19;\nexport const BYTE = 0x1a;\nexport const SHL = 0x1b;\nexport const SHR = 0x1c;\nexport const SAR = 0x1d;\nexport const SHA3 = 0x20;\nexport const ADDRESS = 0x30;\nexport const BALANCE = 0x31;\nexport const ORIGIN = 0x32;\nexport const CALLER = 0x33;\nexport const CALLVALUE = 0x34;\nexport const CALLDATALOAD = 0x35;\nexport const CALLDATASIZE = 0x36;\nexport const CALLDATACOPY = 0x37;\nexport const CODESIZE = 0x38;\nexport const CODECOPY = 0x39;\nexport const GASPRICE = 0x3a;\nexport const EXTCODESIZE = 0x3b;\nexport const EXTCODECOPY = 0x3c;\nexport const RETURNDATASIZE = 0x3d;\nexport const RETURNDATACOPY = 0x3e;\nexport const EXTCODEHASH = 0x3f;\nexport const BLOCKHASH = 0x40;\nexport const COINBASE = 0x41;\nexport const TIMESTAMP = 0x42;\nexport const NUMBER = 0x43;\nexport const DIFFICULTY = 0x44;\nexport const GASLIMIT = 0x45;\nexport const POP = 0x50;\nexport const MLOAD = 0x51;\nexport const MSTORE = 0x52;\nexport const MSTORE8 = 0x53;\nexport const SLOAD = 0x54;\nexport const SSTORE = 0x55;\nexport const JUMP = 0x56;\nexport const JUMPI = 0x57;\nexport const PC = 0x58;\nexport const MSIZE = 0x59;\nexport const GAS = 0x5a;\nexport const JUMPDEST = 0x5b;\nexport const PUSH1 = 0x60;\nexport const PUSH2 = 0x61;\nexport const PUSH3 = 0x62;\nexport const PUSH4 = 0x63;\nexport const PUSH5 = 0x64;\nexport const PUSH6 = 0x65;\nexport const PUSH7 = 0x66;\nexport const PUSH8 = 0x67;\nexport const PUSH9 = 0x68;\nexport const PUSH10 = 0x69;\nexport const PUSH11 = 0x6a;\nexport const PUSH12 = 0x6b;\nexport const PUSH13 = 0x6c;\nexport const PUSH14 = 0x6d;\nexport const PUSH15 = 0x6e;\nexport const PUSH16 = 0x6f;\nexport const PUSH17 = 0x70;\nexport const PUSH18 = 0x71;\nexport const PUSH19 = 0x72;\nexport const PUSH20 = 0x73;\nexport const PUSH21 = 0x74;\nexport const PUSH22 = 0x75;\nexport const PUSH23 = 0x76;\nexport const PUSH24 = 0x77;\nexport const PUSH25 = 0x78;\nexport const PUSH26 = 0x79;\nexport const PUSH27 = 0x7a;\nexport const PUSH28 = 0x7b;\nexport const PUSH29 = 0x7c;\nexport const PUSH30 = 0x7d;\nexport const PUSH31 = 0x7e;\nexport const PUSH32 = 0x7f;\nexport const DUP1 = 0x80;\nexport const DUP2 = 0x81;\nexport const DUP3 = 0x82;\nexport const DUP4 = 0x83;\nexport const DUP5 = 0x84;\nexport const DUP6 = 0x85;\nexport const DUP7 = 0x86;\nexport const DUP8 = 0x87;\nexport const DUP9 = 0x88;\nexport const DUP10 = 0x89;\nexport const DUP11 = 0x8a;\nexport const DUP12 = 0x8b;\nexport const DUP13 = 0x8c;\nexport const DUP14 = 0x8d;\nexport const DUP15 = 0x8e;\nexport const DUP16 = 0x8f;\nexport const SWAP1 = 0x90;\nexport const SWAP2 = 0x91;\nexport const SWAP3 = 0x92;\nexport const SWAP4 = 0x93;\nexport const SWAP5 = 0x94;\nexport const SWAP6 = 0x95;\nexport const SWAP7 = 0x96;\nexport const SWAP8 = 0x97;\nexport const SWAP9 = 0x98;\nexport const SWAP10 = 0x99;\nexport const SWAP11 = 0x9a;\nexport const SWAP12 = 0x9b;\nexport const SWAP13 = 0x9c;\nexport const SWAP14 = 0x9d;\nexport const SWAP15 = 0x9e;\nexport const SWAP16 = 0x9f;\nexport const LOG0 = 0xa0;\nexport const LOG1 = 0xa1;\nexport const LOG2 = 0xa2;\nexport const LOG3 = 0xa3;\nexport const LOG4 = 0xa4;\nexport const CREATE = 0xf0;\nexport const CALL = 0xf1;\nexport const CALLCODE = 0xf2;\nexport const RETURN = 0xf3;\nexport const DELEGATECALL = 0xf4;\nexport const CREATE2 = 0xf5;\nexport const STATICCALL = 0xfa;\nexport const REVERT = 0xfd;\nexport const INVALID = 0xfe;\nexport const SELFDESTRUCT = 0xff;\n\nexport const codes = {\n    0x00: 'STOP',\n    0x01: 'ADD',\n    0x02: 'MUL',\n    0x03: 'SUB',\n    0x04: 'DIV',\n    0x05: 'SDIV',\n    0x06: 'MOD',\n    0x07: 'SMOD',\n    0x08: 'ADDMOD',\n    0x09: 'MULMOD',\n    0x0a: 'EXP',\n    0x0b: 'SIGNEXTEND',\n    0x10: 'LT',\n    0x11: 'GT',\n    0x12: 'SLT',\n    0x13: 'SGT',\n    0x14: 'EQ',\n    0x15: 'ISZERO',\n    0x16: 'AND',\n    0x17: 'OR',\n    0x18: 'XOR',\n    0x19: 'NOT',\n    0x1a: 'BYTE',\n    0x1b: 'SHL',\n    0x1c: 'SHR',\n    0x1d: 'SAR',\n    0x20: 'SHA3',\n    0x30: 'ADDRESS',\n    0x31: 'BALANCE',\n    0x32: 'ORIGIN',\n    0x33: 'CALLER',\n    0x34: 'CALLVALUE',\n    0x35: 'CALLDATALOAD',\n    0x36: 'CALLDATASIZE',\n    0x37: 'CALLDATACOPY',\n    0x38: 'CODESIZE',\n    0x39: 'CODECOPY',\n    0x3a: 'GASPRICE',\n    0x3b: 'EXTCODESIZE',\n    0x3c: 'EXTCODECOPY',\n    0x3d: 'RETURNDATASIZE',\n    0x3e: 'RETURNDATACOPY',\n    0x3f: 'EXTCODEHASH',\n    0x40: 'BLOCKHASH',\n    0x41: 'COINBASE',\n    0x42: 'TIMESTAMP',\n    0x43: 'NUMBER',\n    0x44: 'DIFFICULTY',\n    0x45: 'GASLIMIT',\n    0x50: 'POP',\n    0x51: 'MLOAD',\n    0x52: 'MSTORE',\n    0x53: 'MSTORE8',\n    0x54: 'SLOAD',\n    0x55: 'SSTORE',\n    0x56: 'JUMP',\n    0x57: 'JUMPI',\n    0x58: 'PC',\n    0x59: 'MSIZE',\n    0x5a: 'GAS',\n    0x5b: 'JUMPDEST',\n    0x60: 'PUSH1',\n    0x61: 'PUSH2',\n    0x62: 'PUSH3',\n    0x63: 'PUSH4',\n    0x64: 'PUSH5',\n    0x65: 'PUSH6',\n    0x66: 'PUSH7',\n    0x67: 'PUSH8',\n    0x68: 'PUSH9',\n    0x69: 'PUSH10',\n    0x6a: 'PUSH11',\n    0x6b: 'PUSH12',\n    0x6c: 'PUSH13',\n    0x6d: 'PUSH14',\n    0x6e: 'PUSH15',\n    0x6f: 'PUSH16',\n    0x70: 'PUSH17',\n    0x71: 'PUSH18',\n    0x72: 'PUSH19',\n    0x73: 'PUSH20',\n    0x74: 'PUSH21',\n    0x75: 'PUSH22',\n    0x76: 'PUSH23',\n    0x77: 'PUSH24',\n    0x78: 'PUSH25',\n    0x79: 'PUSH26',\n    0x7a: 'PUSH27',\n    0x7b: 'PUSH28',\n    0x7c: 'PUSH29',\n    0x7d: 'PUSH30',\n    0x7e: 'PUSH31',\n    0x7f: 'PUSH32',\n    0x80: 'DUP1',\n    0x81: 'DUP2',\n    0x82: 'DUP3',\n    0x83: 'DUP4',\n    0x84: 'DUP5',\n    0x85: 'DUP6',\n    0x86: 'DUP7',\n    0x87: 'DUP8',\n    0x88: 'DUP9',\n    0x89: 'DUP10',\n    0x8a: 'DUP11',\n    0x8b: 'DUP12',\n    0x8c: 'DUP13',\n    0x8d: 'DUP14',\n    0x8e: 'DUP15',\n    0x8f: 'DUP16',\n    0x90: 'SWAP1',\n    0x91: 'SWAP2',\n    0x92: 'SWAP3',\n    0x93: 'SWAP4',\n    0x94: 'SWAP5',\n    0x95: 'SWAP6',\n    0x96: 'SWAP7',\n    0x97: 'SWAP8',\n    0x98: 'SWAP9',\n    0x99: 'SWAP10',\n    0x9a: 'SWAP11',\n    0x9b: 'SWAP12',\n    0x9c: 'SWAP13',\n    0x9d: 'SWAP14',\n    0x9e: 'SWAP15',\n    0x9f: 'SWAP16',\n    0xa0: 'LOG0',\n    0xa1: 'LOG1',\n    0xa2: 'LOG2',\n    0xa3: 'LOG3',\n    0xa4: 'LOG4',\n    0xf0: 'CREATE',\n    0xf1: 'CALL',\n    0xf2: 'CALLCODE',\n    0xf3: 'RETURN',\n    0xf4: 'DELEGATECALL',\n    0xf5: 'CREATE2',\n    0xfa: 'STATICCALL',\n    0xfd: 'REVERT',\n    0xfe: 'INVALID',\n    0xff: 'SELFDESTRUCT'\n};\n\nexport const names = {\n    STOP: 0x00,\n    ADD: 0x01,\n    MUL: 0x02,\n    SUB: 0x03,\n    DIV: 0x04,\n    SDIV: 0x05,\n    MOD: 0x06,\n    SMOD: 0x07,\n    ADDMOD: 0x08,\n    MULMOD: 0x09,\n    EXP: 0x0a,\n    SIGNEXTEND: 0x0b,\n    LT: 0x10,\n    GT: 0x11,\n    SLT: 0x12,\n    SGT: 0x13,\n    EQ: 0x14,\n    ISZERO: 0x15,\n    AND: 0x16,\n    OR: 0x17,\n    XOR: 0x18,\n    NOT: 0x19,\n    BYTE: 0x1a,\n    SHL: 0x1b,\n    SHR: 0x1c,\n    SAR: 0x1d,\n    SHA3: 0x20,\n    ADDRESS: 0x30,\n    BALANCE: 0x31,\n    ORIGIN: 0x32,\n    CALLER: 0x33,\n    CALLVALUE: 0x34,\n    CALLDATALOAD: 0x35,\n    CALLDATASIZE: 0x36,\n    CALLDATACOPY: 0x37,\n    CODESIZE: 0x38,\n    CODECOPY: 0x39,\n    GASPRICE: 0x3a,\n    EXTCODESIZE: 0x3b,\n    EXTCODECOPY: 0x3c,\n    RETURNDATASIZE: 0x3d,\n    RETURNDATACOPY: 0x3e,\n    EXTCODEHASH: 0x3f,\n    BLOCKHASH: 0x40,\n    COINBASE: 0x41,\n    TIMESTAMP: 0x42,\n    NUMBER: 0x43,\n    DIFFICULTY: 0x44,\n    GASLIMIT: 0x45,\n    POP: 0x50,\n    MLOAD: 0x51,\n    MSTORE: 0x52,\n    MSTORE8: 0x53,\n    SLOAD: 0x54,\n    SSTORE: 0x55,\n    JUMP: 0x56,\n    JUMPI: 0x57,\n    PC: 0x58,\n    MSIZE: 0x59,\n    GAS: 0x5a,\n    JUMPDEST: 0x5b,\n    PUSH1: 0x60,\n    PUSH2: 0x61,\n    PUSH3: 0x62,\n    PUSH4: 0x63,\n    PUSH5: 0x64,\n    PUSH6: 0x65,\n    PUSH7: 0x66,\n    PUSH8: 0x67,\n    PUSH9: 0x68,\n    PUSH10: 0x69,\n    PUSH11: 0x6a,\n    PUSH12: 0x6b,\n    PUSH13: 0x6c,\n    PUSH14: 0x6d,\n    PUSH15: 0x6e,\n    PUSH16: 0x6f,\n    PUSH17: 0x70,\n    PUSH18: 0x71,\n    PUSH19: 0x72,\n    PUSH20: 0x73,\n    PUSH21: 0x74,\n    PUSH22: 0x75,\n    PUSH23: 0x76,\n    PUSH24: 0x77,\n    PUSH25: 0x78,\n    PUSH26: 0x79,\n    PUSH27: 0x7a,\n    PUSH28: 0x7b,\n    PUSH29: 0x7c,\n    PUSH30: 0x7d,\n    PUSH31: 0x7e,\n    PUSH32: 0x7f,\n    DUP1: 0x80,\n    DUP2: 0x81,\n    DUP3: 0x82,\n    DUP4: 0x83,\n    DUP5: 0x84,\n    DUP6: 0x85,\n    DUP7: 0x86,\n    DUP8: 0x87,\n    DUP9: 0x88,\n    DUP10: 0x89,\n    DUP11: 0x8a,\n    DUP12: 0x8b,\n    DUP13: 0x8c,\n    DUP14: 0x8d,\n    DUP15: 0x8e,\n    DUP16: 0x8f,\n    SWAP1: 0x90,\n    SWAP2: 0x91,\n    SWAP3: 0x92,\n    SWAP4: 0x93,\n    SWAP5: 0x94,\n    SWAP6: 0x95,\n    SWAP7: 0x96,\n    SWAP8: 0x97,\n    SWAP9: 0x98,\n    SWAP10: 0x99,\n    SWAP11: 0x9a,\n    SWAP12: 0x9b,\n    SWAP13: 0x9c,\n    SWAP14: 0x9d,\n    SWAP15: 0x9e,\n    SWAP16: 0x9f,\n    LOG0: 0xa0,\n    LOG1: 0xa1,\n    LOG2: 0xa2,\n    LOG3: 0xa3,\n    LOG4: 0xa4,\n    CREATE: 0xf0,\n    CALL: 0xf1,\n    CALLCODE: 0xf2,\n    RETURN: 0xf3,\n    DELEGATECALL: 0xf4,\n    CREATE2: 0xf5,\n    STATICCALL: 0xfa,\n    REVERT: 0xfd,\n    INVALID: 0xfe,\n    SELFDESTRUCT: 0xff\n};\n\nexport default {\n    ...codes,\n    ...names\n};\n","import {EVM} from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class ADD {\n    readonly name: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'ADD';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' + ' + stringify(this.right);\n    }\n\n    get type() {\n        if (this.left.type === this.right.type) {\n            return this.left.type;\n        } else if (!this.left.type && this.right.type) {\n            return this.right.type;\n        } else if (!this.right.type && this.left.type) {\n            return this.left.type;\n        } else {\n            return false;\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    // state.stack.push(\n    //     typeof left === 'bigint' && typeof right === 'bigint' ? left + right\n    //     : typeof left === 'bigint' && left === 0n ? right \n    //     : typeof right === 'bigint' && right === 0n ? left \n    //     : new ADD(left, right)\n    // );\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.add(right));\n    } else if (BigNumber.isInstance(left) && left.isZero()) {\n        state.stack.push(right);\n    } else if (BigNumber.isInstance(right) && right.isZero()) {\n        state.stack.push(left);\n    } else {\n        state.stack.push(new ADD(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { ADD } from './add';\nimport { MOD } from './mod';\nimport * as BigNumber from '../../node_modules/big-integer';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    const mod = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right) && BigNumber.isInstance(mod)) {\n        state.stack.push(left.add(right).mod(mod));\n    } else if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(new MOD(left.add(right), mod));\n    } else {\n        state.stack.push(new MOD(new ADD(left, right), mod));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class ADDRESS {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'ADDRESS';\n        this.type = 'address';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'this';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new ADDRESS());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class AND {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'AND';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' && ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.and(right));\n    } else if (BigNumber.isInstance(left) && /^[f]+$/.test(left.toString(16))) {\n        right.size = left.toString(16).length;\n        state.stack.push(right);\n    } else if (BigNumber.isInstance(right) && /^[f]+$/.test(right.toString(16))) {\n        left.size = right.toString(16).length;\n        state.stack.push(left);\n        /*} else if (\n        BigNumber.isInstance(left) &&\n        left.equals('1461501637330902918203684832716283019655932542975')\n    ) {*/\n        /* 2 ** 160 */\n        /*    state.stack.push(right);\n    } else if (\n        BigNumber.isInstance(right) &&\n        right.equals('1461501637330902918203684832716283019655932542975')\n    ) {*/\n        /* 2 ** 160 */\n        /*    state.stack.push(left);*/\n    } else if (\n        BigNumber.isInstance(left) &&\n        right instanceof AND &&\n        BigNumber.isInstance(right.left) &&\n        left.equals(right.left)\n    ) {\n        state.stack.push(right.right);\n    } else {\n        state.stack.push(new AND(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class BALANCE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'BALANCE';\n        this.wrapped = false;\n        this.address = address;\n    }\n\n    toString() {\n        return stringify(this.address) + '.balance';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.stack.push(new BALANCE(address));\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class BLOCKHASH {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly number: any;\n\n    constructor(blockNumber: any) {\n        this.name = 'BLOCKHASH';\n        this.wrapped = true;\n        this.number = blockNumber;\n    }\n\n    toString() {\n        return 'block.blockhash(' + stringify(this.number) + ')';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const blockNumber = state.stack.pop();\n    state.stack.push(new BLOCKHASH(blockNumber));\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class BYTE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly position: any;\n    readonly data: any;\n\n    constructor(position: any, data: any) {\n        this.name = 'BYTE';\n        this.wrapped = true;\n        this.position = position;\n        this.data = data;\n    }\n\n    toString() {\n        return '(' + stringify(this.data) + ' >> ' + stringify(this.position) + ') & 1';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const position = state.stack.pop();\n    const data = state.stack.pop();\n    if (BigNumber.isInstance(data) && BigNumber.isInstance(position)) {\n        state.stack.push(data.shiftRight(position).and(1));\n    } else {\n        state.stack.push(new BYTE(position, data));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class CALL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly value: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n    readonly throwOnFail: boolean;\n\n    constructor(\n        gas: any,\n        address: any,\n        value: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'CALL';\n        this.wrapped = false;\n        this.gas = gas;\n        this.address = address;\n        this.value = value;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n        this.throwOnFail = false;\n    }\n\n    toString() {\n        if (\n            BigNumber.isInstance(this.memoryLength) &&\n            this.memoryLength.isZero() &&\n            BigNumber.isInstance(this.outputLength) &&\n            this.outputLength.isZero()\n        ) {\n            if (\n                this.gas.name === 'MUL' &&\n                this.gas.left.name === 'ISZERO' &&\n                BigNumber.isInstance(this.gas.right) &&\n                this.gas.right.equals(2300)\n            ) {\n                if (this.throwOnFail) {\n                    return (\n                        'address(' +\n                        stringify(this.address) +\n                        ').transfer(' +\n                        stringify(this.value) +\n                        ')'\n                    );\n                } else {\n                    return (\n                        'address(' +\n                        stringify(this.address) +\n                        ').send(' +\n                        stringify(this.value) +\n                        ')'\n                    );\n                }\n            } else {\n                return (\n                    'address(' +\n                    stringify(this.address) +\n                    ').call.gas(' +\n                    stringify(this.gas) +\n                    ').value(' +\n                    stringify(this.value) +\n                    ')'\n                );\n            }\n        } else {\n            return (\n                'call(' +\n                stringify(this.gas) +\n                ',' +\n                stringify(this.address) +\n                ',' +\n                stringify(this.value) +\n                ',' +\n                stringify(this.memoryStart) +\n                ',' +\n                stringify(this.memoryLength) +\n                ',' +\n                stringify(this.outputStart) +\n                ',' +\n                stringify(this.outputLength) +\n                ')'\n            );\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new CALL(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\n    );\n    state.memory[outputStart] = 'output';\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CALLCODE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly value: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n\n    constructor(\n        gas: any,\n        address: any,\n        value: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'CALLCODE';\n        this.wrapped = true;\n        this.gas = gas;\n        this.address = address;\n        this.value = value;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n    }\n\n    toString() {\n        return (\n            'callcode(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.value) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new CALLCODE(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class CALLDATACOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(startLocation: any, copyLength: any) {\n        this.name = 'CALLDATACOPY';\n        this.wrapped = true;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'msg.data[' +\n            this.startLocation +\n            ':(' +\n            this.startLocation +\n            '+' +\n            this.copyLength +\n            ')];'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    const startLocation = state.stack.pop();\n    const copyLength = state.stack.pop();\n    state.memory[memoryLocation] = new CALLDATACOPY(startLocation, copyLength);\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class CALLDATALOAD {\n    readonly name: string;\n    readonly type?: string;\n    readonly returntype?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n\n    constructor(location: any) {\n        this.name = 'CALLDATALOAD';\n        this.wrapped = false;\n        this.location = location;\n    }\n\n    toString() {\n        if (BigNumber.isInstance(this.location) && this.location.isZero()) {\n            return 'msg.data';\n        } else if (\n            BigNumber.isInstance(this.location) &&\n            this.location\n                .subtract(4)\n                .mod(32)\n                .isZero()\n        ) {\n            return (\n                '_arg' +\n                this.location\n                    .subtract(4)\n                    .divide(32)\n                    .toString()\n            );\n        } else {\n            return 'msg.data[' + stringify(this.location) + ']';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const startLocation = state.stack.pop();\n    state.stack.push(new CALLDATALOAD(startLocation));\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class CALLDATASIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CALLDATASIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'msg.data.length';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CALLDATASIZE());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class CALLER {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CALLER';\n        this.name = 'address';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'msg.sender';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CALLER());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class CALLVALUE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CALLVALUE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'msg.value';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CALLVALUE());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CODECOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(startLocation: any, copyLength: any) {\n        this.name = 'CODECOPY';\n        this.wrapped = true;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'this.code[' +\n            stringify(this.startLocation) +\n            ':(' +\n            stringify(this.startLocation) +\n            '+' +\n            stringify(this.copyLength) +\n            ')]'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    const startLocation = state.stack.pop();\n    const copyLength = state.stack.pop();\n    state.memory[memoryLocation] = new CODECOPY(startLocation, copyLength);\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class CODESIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CODESIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'this.code.length';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CODESIZE());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class COINBASE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'COINBASE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.coinbase';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new COINBASE());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CREATE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly value: any;\n\n    constructor(memoryStart: any, memoryLength: any, value: any) {\n        this.name = 'CREATE';\n        this.name = 'address';\n        this.wrapped = true;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.value = value;\n    }\n\n    toString() {\n        return (\n            '(new Contract(memory[' +\n            stringify(this.memoryStart) +\n            ':(' +\n            stringify(this.memoryStart) +\n            '+' +\n            stringify(this.memoryLength) +\n            ')]).value(' +\n            stringify(this.value) +\n            ')).address'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.stack.push(new CREATE(memoryStart, memoryLength, value));\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CREATE2 {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly value: any;\n\n    constructor(memoryStart: any, memoryLength: any, value: any) {\n        this.name = 'CREATE2';\n        this.wrapped = true;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.value = value;\n    }\n\n    toString() {\n        return (\n            '(new Contract(memory[' +\n            stringify(this.memoryStart) +\n            ':(' +\n            stringify(this.memoryStart) +\n            '+' +\n            stringify(this.memoryLength) +\n            ')]).value(' +\n            stringify(this.value) +\n            ')).address'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.stack.push(new CREATE2(memoryStart, memoryLength, value));\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class DELEGATECALL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n\n    constructor(\n        gas: any,\n        address: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'DELEGATECALL';\n        this.wrapped = true;\n        this.gas = gas;\n        this.address = address;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n    }\n\n    toString() {\n        return (\n            'delegatecall(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new DELEGATECALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class DIFFICULTY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'DIFFICULTY';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.difficulty';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new DIFFICULTY());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class DIV {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'DIV';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' / ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.divide(right));\n    } else if (BigNumber.isInstance(right) && right.equals(1)) {\n        state.stack.push(left);\n    } else {\n        state.stack.push(new DIV(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const duplicateLocation = parseInt(opcode.name.replace('DUP', ''), 10) - 1;\n    state.stack.duplicate(duplicateLocation);\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SIG {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly hash: string;\n\n    constructor(hash: string) {\n        this.name = 'SIG';\n        this.wrapped = false;\n        this.hash = hash;\n    }\n\n    toString() {\n        return 'msg.sig == ' + this.hash;\n    }\n}\n\nexport class EQ {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'EQ';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' == ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    let left = state.stack.pop();\n    let right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(BigNumber(left.equals(right) === true ? 1 : 0));\n    } else {\n        if (\n            BigNumber.isInstance(left) &&\n            right.name === 'DIV' &&\n            BigNumber.isInstance(right.right)\n        ) {\n            left = left.multiply(right.right);\n            right = right.left;\n        }\n        if (\n            BigNumber.isInstance(right) &&\n            left.name === 'DIV' &&\n            BigNumber.isInstance(left.right)\n        ) {\n            right = right.multiply(left.right);\n            left = left.left;\n        }\n        if (\n            BigNumber.isInstance(left) &&\n            /^[0]+$/.test(left.toString(16).substring(8)) &&\n            right.name === 'CALLDATALOAD' &&\n            right.location.equals(0)\n        ) {\n            state.stack.push(\n                new SIG(\n                    '0'.repeat(64 - left.toString(16).length) +\n                        left.toString(16).substring(0, 8 - (64 - left.toString(16).length))\n                )\n            );\n        } else if (\n            BigNumber.isInstance(right) &&\n            /^[0]+$/.test(right.toString(16).substring(8)) &&\n            left.name === 'CALLDATALOAD' &&\n            left.location.equals(0)\n        ) {\n            state.stack.push(\n                new SIG(\n                    '0'.repeat(64 - right.toString(16).length) +\n                        right.toString(16).substring(0, 8 - (64 - right.toString(16).length))\n                )\n            );\n        } else {\n            state.stack.push(new EQ(left, right));\n        }\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class EXP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'EXP';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' ** ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.pow(right));\n    } else {\n        state.stack.push(new EXP(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODECOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(address: any, startLocation: any, copyLength: any) {\n        this.name = 'EXTCODECOPY';\n        this.wrapped = true;\n        this.address = address;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'address(' +\n            stringify(this.address) +\n            ').code[' +\n            stringify(this.startLocation) +\n            ':(' +\n            stringify(this.startLocation) +\n            '+' +\n            stringify(this.copyLength) +\n            ')]'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    const memoryLocation = state.stack.pop();\n    const startLocation = state.stack.pop();\n    const copyLength = state.stack.pop();\n    state.memory[memoryLocation] = new EXTCODECOPY(address, startLocation, copyLength);\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODEHASH {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'EXTCODEHASH';\n        this.wrapped = true;\n        this.address = address;\n    }\n\n    toString() {\n        return 'keccak256(address(' + stringify(this.address) + ').code)';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.stack.push(new EXTCODEHASH(address));\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODESIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'EXTCODESIZE';\n        this.wrapped = true;\n        this.address = address;\n    }\n\n    toString() {\n        return 'address(' + stringify(this.address) + ').code.length';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.stack.push(new EXTCODESIZE(address));\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class GAS {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'GAS';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'gasleft()';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new GAS());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class GASLIMIT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'GASLIMIT';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.gaslimit';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new GASLIMIT());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class GASPRICE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'GASPRICE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'tx.gasprice';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new GASPRICE());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class GT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n    readonly equal: boolean;\n\n    constructor(left: any, right: any, equal: boolean = false) {\n        this.name = 'GT';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n        this.equal = equal;\n    }\n\n    toString() {\n        if (this.equal) {\n            return stringify(this.left) + ' >= ' + stringify(this.right);\n        } else {\n            return stringify(this.left) + ' > ' + stringify(this.right);\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(BigNumber(left.greater(right) === true ? 1 : 0));\n    } else {\n        state.stack.push(new GT(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class INVALID {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly opcode: any;\n\n    constructor(opcode: any) {\n        this.name = 'INVALID';\n        this.wrapped = true;\n        this.opcode = opcode;\n    }\n\n    toString() {\n        return 'revert(\"Invalid instruction (0x' + this.opcode.toString(16) + ')\");';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.halted = true;\n    state.instructions.push(new INVALID(opcode.opcode));\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport { LT } from './lt';\nimport { GT } from './gt';\nimport stringify from '../utils/stringify';\n\nexport class ISZERO {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly item: any;\n\n    constructor(item: any) {\n        this.name = 'ISZERO';\n        this.wrapped = true;\n        this.item = item;\n    }\n\n    toString() {\n        if (this.item.name === 'EQ') {\n            return stringify(this.item.left) + ' != ' + stringify(this.item.right);\n        } else {\n            return stringify(this.item) + ' == 0';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const item = state.stack.pop();\n    if (BigNumber.isInstance(item)) {\n        state.stack.push(BigNumber(item.isZero() === true ? 1 : 0));\n    } else if (item.name === 'LT') {\n        if (item.equal) {\n            state.stack.push(new GT(item.left, item.right));\n        } else {\n            state.stack.push(new GT(item.left, item.right, true));\n        }\n    } else if (item.name === 'GT') {\n        if (item.equal) {\n            state.stack.push(new LT(item.left, item.right));\n        } else {\n            state.stack.push(new LT(item.left, item.right, true));\n        }\n    } else if (item instanceof ISZERO) {\n        state.stack.push(item.item);\n    } else {\n        state.stack.push(new ISZERO(item));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class JUMP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly valid: boolean;\n    readonly location: any;\n\n    constructor(location: any, bad?: boolean) {\n        this.name = 'JUMP';\n        this.wrapped = false;\n        this.location = location;\n        this.valid = true;\n        if (bad) {\n            this.valid = false;\n        }\n    }\n\n    toString() {\n        if (!this.valid) {\n            return \"revert(\\\"Bad jump destination\\\");\";\n        } else {\n            return 'goto(' + stringify(this.location) + ');';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const jumpLocation = state.stack.pop();\n    if (!BigNumber.isInstance(jumpLocation)) {\n        state.halted = true;\n        state.instructions.push(new JUMP(jumpLocation, true));\n    } else {\n        const opcodes = state.getOpcodes();\n        const jumpLocationData = opcodes.find((o: any) => o.pc === jumpLocation.toJSNumber());\n        if (!jumpLocationData) {\n            state.halted = true;\n            state.instructions.push(new JUMP(jumpLocation, true));\n        } else {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (!(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps)) {\n                if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\n                    state.halted = true;\n                    state.instructions.push(new JUMP(jumpLocation, true));\n                } else if (\n                    jumpLocationData &&\n                    jumpIndex >= 0 &&\n                    jumpLocationData.name === 'JUMPDEST'\n                ) {\n                    state.jumps[opcode.pc + ':' + jumpLocation.toJSNumber()] = true;\n                    state.pc = jumpIndex;\n                } else {\n                    state.halted = true;\n                    state.instructions.push(new JUMP(jumpLocation, true));\n                }\n            } else {\n                state.halted = true;\n                state.instructions.push(new JUMP(jumpLocation));\n            }\n        }\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    /* Empty */\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\n// import * as functionHashes from '../../data/functionHashes.json';\nimport stringify from '../utils/stringify';\n\nconst updateCallDataLoad = (item: any, types: any) => {\n    for (const i in item) {\n        if (item.hasOwnProperty(i)) {\n            if (\n                typeof item[i] === 'object' &&\n                item[i].name === 'CALLDATALOAD' &&\n                BigNumber.isInstance(item[i].location)\n            ) {\n                const argNumber = item[i].location\n                    .subtract(4)\n                    .divide(32)\n                    .toString();\n                item[i].type = types[argNumber];\n            }\n            if (typeof item[i] === 'object') {\n                updateCallDataLoad(item[i], types);\n            }\n        }\n    }\n};\n\nconst findReturns = (item: any) => {\n    const returns = [];\n    for (const i in item) {\n        if (item.hasOwnProperty(i)) {\n            if (\n                typeof item[i] === 'object' &&\n                item[i].name === 'RETURN' &&\n                item[i].items &&\n                item[i].items.length > 0\n            ) {\n                returns.push(item[i].items);\n            }\n            if (typeof item[i] === 'object') {\n                const deepReturns: any = findReturns(item[i]);\n                if (deepReturns.length > 0) {\n                    returns.push(...deepReturns);\n                }\n            }\n        }\n    }\n    return returns;\n};\n\nexport class TopLevelFunction {\n    readonly name: string;\n    readonly type?: string;\n    readonly label: string;\n    readonly hash: any;\n    readonly gasUsed: number;\n    readonly payable: boolean;\n    readonly visibility: string;\n    readonly constant: boolean;\n    readonly items: any;\n    readonly returns: any;\n\n    constructor(items: any, hash: any, gasUsed: number, functionHashes: {[s: string]: string}) {\n        this.name = 'Function';\n        this.hash = hash;\n        this.gasUsed = gasUsed;\n        this.items = items;\n        this.payable = true;\n        this.visibility = 'public';\n        this.constant = false;\n        this.returns = [];\n        if (this.hash in functionHashes) {\n            this.label = (functionHashes as any)[this.hash];\n        } else {\n            this.label = this.hash + '()';\n        }\n        if (\n            this.items.length > 0 &&\n            this.items[0] instanceof REQUIRE &&\n            this.items[0].condition.name === 'ISZERO' &&\n            this.items[0].condition.item.name === 'CALLVALUE'\n        ) {\n            this.payable = false;\n            this.items.shift();\n        }\n        if (this.items.length === 1 && this.items[0].name === 'RETURN') {\n            this.constant = true;\n        }\n        if (this.hash in functionHashes) {\n            const functionName = (functionHashes as any)[this.hash].split('(')[0];\n            const argumentTypes = (functionHashes as any)[this.hash]\n                .replace(functionName, '')\n                .substr(1)\n                .slice(0, -1)\n                .split(',');\n            if (\n                argumentTypes.length > 1 ||\n                (argumentTypes.length === 1 && argumentTypes[0] !== '')\n            ) {\n                this.items.forEach((item: any) => updateCallDataLoad(item, argumentTypes));\n            }\n        }\n        const returns: any = [];\n        this.items.forEach((item: any) => {\n            const deepReturns = findReturns(item);\n            if (deepReturns.length > 0) {\n                returns.push(...deepReturns);\n            }\n        });\n        if (\n            returns.length > 0 &&\n            returns.every(\n                (returnItem: any) =>\n                    returnItem.length === returns[0].length &&\n                    returnItem.map((item: any) => item.type).join('') ===\n                        returns[0].map((item: any) => item.type).join('')\n            )\n        ) {\n            returns[0].forEach((item: any) => {\n                if (BigNumber.isInstance(item)) {\n                    this.returns.push('uint256');\n                } else if (item.type) {\n                    this.returns.push(item.type);\n                } else {\n                    this.returns.push('unknown');\n                }\n            });\n        } else if (returns.length > 0) {\n            this.returns.push('<unknown>');\n        }\n    }\n}\n\nexport class Variable {\n    readonly name: string;\n    readonly label: string | false;\n    readonly types: any;\n\n    constructor(label: string | false, types: any) {\n        this.name = 'Variable';\n        this.label = label;\n        this.types = types;\n    }\n}\n\nexport class REQUIRE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly condition: any;\n\n    constructor(condition: any) {\n        this.name = 'REQUIRE';\n        this.wrapped = true;\n        this.condition = condition;\n    }\n\n    toString() {\n        return 'require(' + stringify(this.condition) + ');';\n    }\n}\n\nexport class JUMPI {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly condition: any;\n    readonly location: any;\n    readonly valid: boolean;\n    readonly true?: any;\n    readonly false?: any;\n    readonly payable?: boolean;\n\n    constructor(condition: any, location: any, ifTrue?: any, ifFalse?: any, skipped?: boolean) {\n        this.name = 'JUMPI';\n        this.wrapped = true;\n        this.condition = condition;\n        this.location = location;\n        if (skipped) {\n            this.valid = true;\n        } else if (ifTrue && ifFalse) {\n            this.valid = true;\n            this.true = ifTrue;\n            this.false = ifFalse;\n            if (\n                this.true.length >= 1 &&\n                this.true[0] instanceof REQUIRE &&\n                this.true[0].condition.name === 'ISZERO' &&\n                this.true[0].condition.item.name === 'CALLVALUE'\n            ) {\n                this.payable = false;\n                this.true.shift();\n            } else {\n                this.payable = true;\n            }\n        } else {\n            this.valid = false;\n        }\n    }\n\n    toString() {\n        if (this.valid && this.true && this.false) {\n            return stringify(this.condition);\n        } else if (this.valid) {\n            return 'if' + stringify(this.condition) + ' goto(' + stringify(this.location) + ');';\n        } else {\n            console.log(this);\n            return \"revert(\\\"Bad jump destination\\\");\";\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const jumpLocation = state.stack.pop();\n    const jumpCondition = state.stack.pop();\n    const opcodes = state.getOpcodes();\n    console.log(jumpLocation);\n    console.log(state.conditions);\n    console.log('-');\n    if (!BigNumber.isInstance(jumpLocation)) {\n        state.halted = true;\n        state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n    } else {\n        const jumpLocationData = opcodes.find((o: any) => o.pc === jumpLocation.toJSNumber());\n        if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\n            //state.halted = true;\n            //state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            state.instructions.push(new REQUIRE(jumpCondition));\n        } else if (BigNumber.isInstance(jumpCondition)) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (\n                jumpIndex >= 0 &&\n                !jumpCondition.equals(0) &&\n                !(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps)\n            ) {\n                state.jumps[opcode.pc + ':' + jumpLocation.toJSNumber()] = true;\n                state.pc = jumpIndex;\n            }\n        } else if (\n            !(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps) &&\n            jumpCondition.name === 'SIG'\n        ) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (jumpIndex >= 0) {\n                const functionClone: any = state.clone();\n                functionClone.pc = jumpIndex;\n                const functionCloneTree = functionClone.parse();\n                state.functions[jumpCondition.hash] = new TopLevelFunction(\n                    functionCloneTree,\n                    jumpCondition.hash,\n                    functionClone.gasUsed,\n                    state.functionHashes,\n                );\n                if (\n                    jumpCondition.hash in state.functionHashes &&\n                    functionCloneTree.length === 1 &&\n                    functionCloneTree[0].name === 'RETURN' &&\n                    functionCloneTree[0].items.every((item: any) => item.name === 'MappingLoad')\n                ) {\n                    functionCloneTree[0].items.forEach((item: any) => {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.mappings[item.location].name = fullFunction.split('(')[0];\n                        if (\n                            item.structlocation &&\n                            !state.mappings[item.location].structs.includes(item.structlocation)\n                        ) {\n                            state.mappings[item.location].structs.push(item.structlocation);\n                        }\n                    });\n                    delete state.functions[jumpCondition.hash];\n                } else if (\n                    jumpCondition.hash in state.functionHashes &&\n                    state.functions[jumpCondition.hash].items.length === 1 &&\n                    state.functions[jumpCondition.hash].items[0].name === 'RETURN' &&\n                    state.functions[jumpCondition.hash].items[0].items.length === 1 &&\n                    state.functions[jumpCondition.hash].items[0].items[0].name === 'SLOAD' &&\n                    BigNumber.isInstance(\n                        state.functions[jumpCondition.hash].items[0].items[0].location\n                    )\n                ) {\n                    if (\n                        !(\n                            state.functions[jumpCondition.hash].items[0].items[0].location in\n                            state.variables\n                        )\n                    ) {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.variables[\n                            state.functions[jumpCondition.hash].items[0].items[0].location\n                        ] = new Variable(fullFunction.split('(')[0], []);\n                        delete state.functions[jumpCondition.hash];\n                    } else {\n                        const fullFunction = (state.functionHashes as any)[jumpCondition.hash];\n                        state.variables[\n                            state.functions[jumpCondition.hash].items[0].items[0].location\n                        ].label = fullFunction.split('(')[0];\n                        delete state.functions[jumpCondition.hash];\n                    }\n                }\n            }\n        } else if (\n            !(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps) &&\n            ((jumpCondition.name === 'LT' &&\n                jumpCondition.left.name === 'CALLDATASIZE' &&\n                BigNumber.isInstance(jumpCondition.right) &&\n                jumpCondition.right.equals(4)) ||\n                (jumpCondition.name === 'ISZERO' && jumpCondition.item.name === 'CALLDATASIZE'))\n        ) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (jumpIndex >= 0) {\n                state.halted = true;\n                const trueClone: any = state.clone();\n                trueClone.pc = jumpIndex;\n                trueClone.conditions.push(jumpCondition);\n                const trueCloneTree = trueClone.parse();\n                const falseClone = state.clone();\n                falseClone.pc = state.pc + 1;\n                const falseCloneTree: any = falseClone.parse();\n                if (\n                    trueCloneTree.length > 0 &&\n                    trueCloneTree.length === falseCloneTree.length &&\n                    trueCloneTree[0].name !== 'REVERT' &&\n                    trueCloneTree[0].name !== 'INVALID' &&\n                    trueCloneTree.map((item: any) => stringify(item)).join('') ===\n                        falseCloneTree.map((item: any) => stringify(item)).join('')\n                ) {\n                    state.functions[''] = new TopLevelFunction(\n                        trueCloneTree,\n                        '',\n                        trueCloneTree.gasUsed,\n                        state.functionHashes,\n                    );\n                } else if (\n                    trueCloneTree.length > 0 &&\n                    trueCloneTree[0].name !== 'REVERT' &&\n                    trueCloneTree[0].name !== 'INVALID'\n                ) {\n                    state.instructions.push(\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\n                    );\n                }\n            } else {\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            }\n        } else if (!(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps)) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            state.jumps[opcode.pc + ':' + jumpLocation.toJSNumber()] = true;\n            if (jumpIndex >= 0) {\n                state.halted = true;\n                const trueClone: any = state.clone();\n                trueClone.pc = jumpIndex;\n                trueClone.conditions.push(jumpCondition);\n                const trueCloneTree = trueClone.parse();\n                const falseClone = state.clone();\n                falseClone.pc = state.pc + 1;\n                const falseCloneTree: any = falseClone.parse();\n                if (\n                    (falseCloneTree.length === 1 &&\n                        'name' in falseCloneTree[0] &&\n                        (falseCloneTree[0].name === 'REVERT' &&\n                            falseCloneTree[0].items &&\n                            falseCloneTree[0].items.length === 0)) ||\n                    falseCloneTree[0].name === 'INVALID'\n                ) {\n                    if (\n                        jumpCondition.name === 'CALL' &&\n                        BigNumber.isInstance(jumpCondition.memoryLength) &&\n                        jumpCondition.memoryLength.isZero() &&\n                        BigNumber.isInstance(jumpCondition.outputLength) &&\n                        jumpCondition.outputLength.isZero() &&\n                        jumpCondition.gas.name === 'MUL' &&\n                        jumpCondition.gas.left.name === 'ISZERO' &&\n                        BigNumber.isInstance(jumpCondition.gas.right) &&\n                        jumpCondition.gas.right.equals(2300)\n                    ) {\n                        jumpCondition.throwOnFail = true;\n                        state.instructions.push(jumpCondition);\n                        state.instructions.push(...trueCloneTree);\n                    } else {\n                        state.instructions.push(new REQUIRE(jumpCondition));\n                        state.instructions.push(...trueCloneTree);\n                    }\n                } else {\n                    state.instructions.push(\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\n                    );\n                }\n            } else {\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            }\n        } else {\n            state.instructions.push(new JUMPI(jumpCondition, jumpLocation, null, null, true));\n        }\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { MLOAD } from './mload';\n// import * as eventHashes from '../../data/eventHashes.json';\nimport * as BigNumber from '../../node_modules/big-integer';\n\nexport class LOG {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items?: any;\n    readonly topics: any;\n    readonly eventName?: string;\n\n    constructor(eventHashes: {[s: string]: string},topics: any, items?: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'LOG';\n        this.wrapped = true;\n        this.topics = topics;\n        if (\n            this.topics.length > 0 &&\n            BigNumber.isInstance(this.topics[0]) &&\n            this.topics[0].toString(16) in eventHashes\n        ) {\n            this.eventName = (eventHashes as any)[this.topics[0].toString(16)].split('(')[0];\n            this.topics.shift();\n        }\n        if (this.memoryStart && this.memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.eventName) {\n            return (\n                'emit ' + this.eventName + '(' + [...this.topics, ...this.items].join(', ') + ');'\n            );\n        } else {\n            return 'log(' + [...this.topics, ...this.items].join(', ') + ');';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const topicsCount = parseInt(opcode.name.replace('LOG', ''), 10);\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const topics = [];\n    for (let i = 0; i < topicsCount; i++) {\n        topics.push(state.stack.pop());\n    }\n    if (topics.length > 0) {\n        const eventTopic = topics[0].toString(16);\n        if (!(eventTopic in state.events)) {\n            state.events[eventTopic] = {};\n            state.events[eventTopic].indexedCount = topics.length - 1;\n            if (eventTopic in state.eventHashes) {\n                state.events[eventTopic].label = (state.eventHashes as any)[eventTopic];\n            }\n        }\n    }\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\n        const items = [];\n        for (\n            let i = memoryStart.toJSNumber();\n            i < memoryStart.add(memoryLength).toJSNumber();\n            i += 32\n        ) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        if (topics.length === 0) {\n            if (!('anonymous' in state.events)) {\n                state.events.anonymous = [];\n            }\n            state.events.anonymous.push({ items });\n        }\n        state.instructions.push(new LOG(state.eventHashes, topics, items));\n    } else {\n        state.instructions.push(new LOG(state.eventHashes, topics, [], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class LT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n    readonly equal: boolean;\n\n    constructor(left: any, right: any, equal: boolean = false) {\n        this.name = 'LT';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n        this.equal = equal;\n    }\n\n    toString() {\n        if (this.equal) {\n            return stringify(this.left) + ' <= ' + stringify(this.right);\n        } else {\n            return stringify(this.left) + ' < ' + stringify(this.right);\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(BigNumber(left.lesser(right) === true ? 1 : 0));\n    } else {\n        state.stack.push(new LT(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class MLOAD {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n\n    constructor(location: any) {\n        this.name = 'MLOAD';\n        this.wrapped = true;\n        this.location = location;\n    }\n\n    toString() {\n        return 'memory[' + stringify(this.location) + ']';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    if (BigNumber.isInstance(memoryLocation) && memoryLocation.toJSNumber() in state.memory) {\n        state.stack.push(state.memory[memoryLocation.toJSNumber()]);\n    } else {\n        state.stack.push(new MLOAD(memoryLocation));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class MOD {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'MOD';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' % ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.mod(right));\n    } else {\n        state.stack.push(new MOD(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class MSIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'MSIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'memory.length';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new MSIZE());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class MSTORE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly data: any;\n\n    constructor(location: any, data: any) {\n        this.name = 'MSTORE';\n        this.wrapped = true;\n        this.location = location;\n        this.data = data;\n    }\n\n    toString() {\n        return 'memory[' + stringify(this.location) + '] = ' + stringify(this.data) + ';';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    const storeData = state.stack.pop();\n    if (BigNumber.isInstance(storeLocation)) {\n        state.memory[storeLocation.toJSNumber()] = storeData;\n    } else {\n        state.instructions.push(new MSTORE(storeLocation, storeData));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class MUL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'MUL';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' * ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.multiply(right));\n    } else if (\n        (BigNumber.isInstance(left) && left.isZero()) ||\n        (BigNumber.isInstance(right) && right.isZero())\n    ) {\n        state.stack.push(BigNumber(0));\n    } else {\n        state.stack.push(new MUL(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { MUL } from './mul';\nimport { MOD } from './mod';\nimport * as BigNumber from '../../node_modules/big-integer';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    const mod = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right) && BigNumber.isInstance(mod)) {\n        state.stack.push(left.multiply(right).mod(mod));\n    } else if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(new MOD(left.multiply(right), mod));\n    } else {\n        state.stack.push(new MOD(new MUL(left, right), mod));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class NOT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly item: any;\n\n    constructor(item: any) {\n        this.name = 'AND';\n        this.wrapped = true;\n        this.item = item;\n    }\n\n    toString() {\n        return '~' + stringify(this.item);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const item = state.stack.pop();\n    if (BigNumber.isInstance(item)) {\n        state.stack.push(item.not());\n    } else {\n        state.stack.push(new NOT(item));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class NUMBER {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'NUMBER';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.number';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new NUMBER());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class OR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'OR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' || ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.or(right));\n    } else {\n        state.stack.push(new OR(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class ORIGIN {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'ORIGIN';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'tx.origin';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new ORIGIN());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(BigNumber(opcode.pc));\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.pop();\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const pushDataLength = parseInt(opcode.name.replace('PUSH', ''), 10);\n    state.stack.push(BigNumber(opcode.pushData!.toString('hex'), 16));\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { MLOAD } from './mload';\nimport { hex2a } from '../utils/hex';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class RETURN {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'RETURN';\n        this.wrapped = true;\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.memoryStart && this.memoryLength) {\n            return (\n                'return memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')];'\n            );\n        } else if (this.items.length === 0) {\n            return 'return;';\n        } else if (\n            this.items.length === 1 &&\n            (BigNumber.isInstance(this.items[0]) || this.items[0].static)\n        ) {\n            return 'return ' + this.items[0] + ';';\n        } else if (\n            this.items.length === 3 &&\n            this.items.every((item: any) => BigNumber.isInstance(item)) &&\n            this.items[0].equals(32)\n        ) {\n            return 'return \"' + hex2a(this.items[2].toString(16)) + '\";';\n        } else {\n            return 'return(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.halted = true;\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\n        const items = [];\n        for (\n            let i = memoryStart.toJSNumber();\n            i < memoryStart.add(memoryLength).toJSNumber();\n            i += 32\n        ) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.instructions.push(new RETURN(items));\n    } else {\n        state.instructions.push(new RETURN([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class RETURNDATACOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly returnDataPosition: any;\n    readonly returnDataSize: any;\n\n    constructor(returnDataPosition: any, returnDataSize: any) {\n        this.name = 'RETURNDATACOPY';\n        this.wrapped = true;\n        this.returnDataPosition = returnDataPosition;\n        this.returnDataSize = returnDataSize;\n    }\n\n    toString() {\n        return (\n            'output[' +\n            stringify(this.returnDataPosition) +\n            ':(' +\n            stringify(this.returnDataPosition) +\n            '+' +\n            stringify(this.returnDataSize) +\n            ')]'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryPosition = state.stack.pop();\n    const returnDataPosition = state.stack.pop();\n    const returnDataSize = state.stack.pop();\n    state.memory[memoryPosition] = new RETURNDATACOPY(returnDataPosition, returnDataSize);\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class RETURNDATASIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'RETURNDATASIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'output.length';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new RETURNDATASIZE());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { MLOAD } from './mload';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class REVERT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'REVERT';\n        this.wrapped = true;\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.items) {\n            return 'revert(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\n        } else {\n            return (\n                'revert(memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')]);'\n            );\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.halted = true;\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\n        const items = [];\n        for (\n            let i = memoryStart.toJSNumber();\n            i < memoryStart.add(memoryLength).toJSNumber();\n            i += 32\n        ) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.instructions.push(new REVERT(items));\n    } else {\n        state.instructions.push(new REVERT([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SAR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SAR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' >> ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.shiftRight(right));\n    } else {\n        state.stack.push(new SAR(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SELFDESTRUCT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'SELFDESTRUCT';\n        this.wrapped = true;\n        this.address = address;\n    }\n\n    toString() {\n        return 'selfdestruct(' + stringify(this.address) + ');';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.halted = true;\n    state.instructions.push(new SELFDESTRUCT(address));\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { MLOAD } from './mload';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SHA3 {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'SHA3';\n        this.wrapped = false;\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.items) {\n            return 'keccak256(' + this.items.map((item: any) => stringify(item)).join(', ') + ')';\n        } else {\n            return (\n                'keccak256(memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')])'\n            );\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\n        const items = [];\n        for (\n            let i = memoryStart.toJSNumber();\n            i < memoryStart.add(memoryLength).toJSNumber();\n            i += 32\n        ) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.stack.push(new SHA3(items));\n    } else {\n        state.stack.push(new SHA3([], memoryStart, memoryLength));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SHL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SHL';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' << ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.shiftLeft(right));\n    } else {\n        state.stack.push(new SHL(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SHR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SHR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' >>> ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.shiftRight(right));\n    } else {\n        state.stack.push(new SHR(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { SHL } from './shl';\nimport { SAR } from './sar';\nimport { SUB } from './sub';\nimport * as BigNumber from '../../node_modules/big-integer';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(\n            right.shiftLeft(BigNumber(32).subtract(left)).shiftRight(BigNumber(32).subtract(left))\n        );\n    } else if (BigNumber.isInstance(left)) {\n        state.stack.push(\n            new SAR(new SHL(right, BigNumber(32).subtract(left)), BigNumber(32).subtract(left))\n        );\n    } else {\n        state.stack.push(\n            new SAR(new SHL(right, new SUB(BigNumber(32), left)), new SUB(BigNumber(32), left))\n        );\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nconst parseMapping = (...items: any[]) => {\n    const mappings: any = [];\n    items.forEach((item2: any) => {\n        if (item2.name === 'SHA3' && item2.items) {\n            mappings.push(...parseMapping(...item2.items));\n        } else {\n            mappings.push(item2);\n        }\n    });\n    return mappings;\n};\n\nexport class MappingLoad {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly count: any;\n    readonly items: any;\n    readonly structlocation?: any;\n    readonly mappings: any;\n\n    constructor(mappings: any, location: any, items: any, count: any, structlocation?: any) {\n        this.name = 'MappingLoad';\n        this.wrapped = false;\n        this.location = location;\n        this.count = count;\n        this.items = items;\n        this.structlocation = structlocation;\n        this.mappings = mappings;\n    }\n\n    toString() {\n        let mappingName = 'mapping' + (this.count + 1);\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\n            mappingName = this.mappings()[this.location].name;\n        }\n        if (this.structlocation) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                '[' +\n                this.structlocation.toString() +\n                ']'\n            );\n        } else {\n            return (\n                mappingName + this.items.map((item: any) => '[' + stringify(item) + ']').join('')\n            );\n        }\n    }\n}\n\nexport class SLOAD {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly variables: any;\n\n    constructor(location: any, variables: any) {\n        this.name = 'SLOAD';\n        this.wrapped = false;\n        this.location = location;\n        this.variables = variables;\n    }\n\n    toString() {\n        if (BigNumber.isInstance(this.location) && this.location.toString() in this.variables()) {\n            if (this.variables()[this.location.toString()].label) {\n                return this.variables()[this.location.toString()].label;\n            } else {\n                return (\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1)\n                );\n            }\n        } else {\n            return 'storage[' + stringify(this.location) + ']';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    if (storeLocation.name === 'SHA3') {\n        const mappingItems = parseMapping(...storeLocation.items);\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\n            BigNumber.isInstance(mappingItem)\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: []\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        storeLocation.left.name === 'SHA3' &&\n        BigNumber.isInstance(storeLocation.right)\n    ) {\n        const mappingItems = parseMapping(...storeLocation.left.items);\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\n            BigNumber.isInstance(mappingItem)\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: []\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.right\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        BigNumber.isInstance(storeLocation.left) &&\n        storeLocation.right.name === 'SHA3'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.right.items);\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\n            BigNumber.isInstance(mappingItem)\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: []\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.left\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else {\n        state.stack.push(new SLOAD(storeLocation, () => state.variables));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\nimport { Variable } from './jumpi';\n\nconst parseMapping = (...items: any[]) => {\n    const mappings: any = [];\n    items.forEach((item2: any) => {\n        if (item2.name === 'SHA3' && item2.items) {\n            mappings.push(...parseMapping(...item2.items));\n        } else {\n            mappings.push(item2);\n        }\n    });\n    return mappings;\n};\n\nexport class MappingStore {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly count: any;\n    readonly items: any;\n    readonly data: any;\n    readonly structlocation?: any;\n    readonly mappings: any;\n\n    constructor(\n        mappings: any,\n        location: any,\n        items: any,\n        data: any,\n        count: any,\n        structlocation?: any\n    ) {\n        this.name = 'MappingStore';\n        this.wrapped = false;\n        this.location = location;\n        this.items = items;\n        this.data = data;\n        this.count = count;\n        this.structlocation = structlocation;\n        this.mappings = mappings;\n    }\n\n    toString() {\n        //console.log(this);\n        let mappingName = 'mapping' + (this.count + 1);\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\n            mappingName = this.mappings()[this.location].name;\n        }\n        if (\n            this.data.name === 'ADD' &&\n            this.data.right.name === 'MappingLoad' &&\n            stringify(this.data.right.location) === stringify(this.location)\n        ) {\n            console.log(this.items);\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' += ' +\n                stringify(this.data.left) +\n                ';'\n            );\n        } else if (\n            this.data.name === 'ADD' &&\n            this.data.left.name === 'MappingLoad' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            console.log(this.items);\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' += ' +\n                stringify(this.data.right) +\n                ';'\n            );\n        } else if (\n            this.data.name === 'SUB' &&\n            this.data.left.name === 'MappingLoad' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' -= ' +\n                stringify(this.data.right) +\n                ';'\n            );\n        } else {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' = ' +\n                stringify(this.data) +\n                ';'\n            );\n        }\n    }\n}\n\nexport class SSTORE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly data: any;\n    readonly variables: any;\n\n    constructor(location: any, data: any, variables: any) {\n        this.name = 'SSTORE';\n        this.wrapped = true;\n        this.location = location;\n        this.data = data;\n        this.variables = variables;\n        if (BigNumber.isInstance(this.location) && this.location.toString() in this.variables()) {\n            this.variables()[this.location.toString()].types.push(() => this.data.type);\n        } else if (\n            BigNumber.isInstance(this.location) &&\n            !(this.location.toString() in this.variables())\n        ) {\n            this.variables()[this.location.toString()] = new Variable(false, [\n                () => this.data.type\n            ]);\n        }\n    }\n\n    toString() {\n        let variableName = 'storage[' + stringify(this.location) + ']';\n        if (BigNumber.isInstance(this.location) && this.location.toString() in this.variables()) {\n            if (this.variables()[this.location.toString()].label) {\n                variableName = this.variables()[this.location.toString()].label;\n            } else {\n                variableName =\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1);\n            }\n        }\n        if (\n            this.data.name === 'ADD' &&\n            this.data.right.name === 'SLOAD' &&\n            stringify(this.data.right.location) === stringify(this.location)\n        ) {\n            return variableName + ' += ' + stringify(this.data.left) + ';';\n        } else if (\n            this.data.name === 'SUB' &&\n            this.data.left.name === 'SLOAD' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return variableName + ' -= ' + stringify(this.data.right) + ';';\n        } else {\n            return variableName + ' = ' + stringify(this.data) + ';';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    const storeData = state.stack.pop();\n    if (storeLocation.name === 'SHA3') {\n        const mappingItems = parseMapping(...storeLocation.items);\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\n            BigNumber.isInstance(mappingItem)\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: []\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.mappings[mappingLocation].values.push(storeData);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        storeLocation.left.name === 'SHA3' &&\n        BigNumber.isInstance(storeLocation.right)\n    ) {\n        const mappingItems = parseMapping(...storeLocation.left.items);\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\n            BigNumber.isInstance(mappingItem)\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: []\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.right\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        BigNumber.isInstance(storeLocation.left) &&\n        storeLocation.right.name === 'SHA3'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.right.items);\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\n            BigNumber.isInstance(mappingItem)\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: []\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.left\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        false &&\n        BigNumber.isInstance(storeLocation) &&\n        storeLocation.toString() in state.variables &&\n        storeData.type &&\n        !state.variables[storeLocation.toString()].types.includes(storeData.type)\n    ) {\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        state.variables[storeLocation.toString()].types.push(storeData.type);\n    } else {\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class STATICCALL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n\n    constructor(\n        gas: any,\n        address: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'STATICCALL';\n        this.wrapped = true;\n        this.gas = gas;\n        this.address = address;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n    }\n\n    toString() {\n        return (\n            'staticcall(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new STATICCALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class STOP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'STOP';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'return;';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.halted = true;\n    state.instructions.push(new STOP());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SUB {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SUB';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' - ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.subtract(right));\n    } else {\n        state.stack.push(new SUB(left, right));\n    }\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const swapLocation = parseInt(opcode.name.replace('SWAP', ''), 10);\n    state.stack.swap(swapLocation);\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class TIMESTAMP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'TIMESTAMP';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.timestamp';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new TIMESTAMP());\n};\n","import { EVM } from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class XOR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'XOR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' ^ ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.xor(right));\n    } else {\n        state.stack.push(new XOR(left, right));\n    }\n};\n","export function hex2a(hexx: any) {\n    const hex = hexx.toString();\n    let str = '';\n    for (let i = 0; i < hex.length && hex.substr(i, 2) !== '00'; i += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    }\n    return str;\n}\n\nexport function pad32(data: string) {\n    if (data.length >= 64) {\n        return data;\n    } else {\n        return '0'.repeat(64 - data.length) + data;\n    }\n}\n\nexport function isHex(h: any) {\n    return /^[0-9a-f-]+$/.test(h);\n}\n\nexport default (data: any) => {\n    if (isHex(data)) {\n        const pieces = data.match(/.{1,64}/g);\n        if (pieces.length === 3 && parseInt(pieces[0], 16) === 32) {\n            const stringLength = parseInt(pieces[1], 16) * 2;\n            const stringData = hex2a(pieces[2].substr(0, stringLength));\n            return '\"' + stringData + '\"';\n        } else if (!isNaN(parseInt(data, 16))) {\n            return parseInt(data, 16).toString();\n        } else {\n            return data;\n        }\n    } else {\n        return data;\n    }\n};\n","import STOP from '../opcodes/stop';\nimport ADD from '../opcodes/add';\nimport MUL from '../opcodes/mul';\nimport SUB from '../opcodes/sub';\nimport DIV from '../opcodes/div';\nimport MOD from '../opcodes/mod';\nimport ADDMOD from '../opcodes/addmod';\nimport MULMOD from '../opcodes/mulmod';\nimport EXP from '../opcodes/exp';\nimport SIGNEXTEND from '../opcodes/signextend';\nimport LT from '../opcodes/lt';\nimport GT from '../opcodes/gt';\nimport EQ from '../opcodes/eq';\nimport ISZERO from '../opcodes/iszero';\nimport AND from '../opcodes/and';\nimport OR from '../opcodes/or';\nimport XOR from '../opcodes/xor';\nimport NOT from '../opcodes/not';\nimport BYTE from '../opcodes/byte';\nimport SHL from '../opcodes/shl';\nimport SHR from '../opcodes/shr';\nimport SAR from '../opcodes/sar';\nimport SHA3 from '../opcodes/sha3';\nimport ADDRESS from '../opcodes/address';\nimport BALANCE from '../opcodes/balance';\nimport ORIGIN from '../opcodes/origin';\nimport CALLER from '../opcodes/caller';\nimport CALLVALUE from '../opcodes/callvalue';\nimport CALLDATALOAD from '../opcodes/calldataload';\nimport CALLDATASIZE from '../opcodes/calldatasize';\nimport CALLDATACOPY from '../opcodes/calldatacopy';\nimport CODESIZE from '../opcodes/codesize';\nimport CODECOPY from '../opcodes/codecopy';\nimport GASPRICE from '../opcodes/gasprice';\nimport EXTCODESIZE from '../opcodes/extcodesize';\nimport EXTCODECOPY from '../opcodes/extcodecopy';\nimport RETURNDATASIZE from '../opcodes/returndatasize';\nimport RETURNDATACOPY from '../opcodes/returndatacopy';\nimport EXTCODEHASH from '../opcodes/extcodehash';\nimport BLOCKHASH from '../opcodes/blockhash';\nimport COINBASE from '../opcodes/coinbase';\nimport TIMESTAMP from '../opcodes/timestamp';\nimport NUMBER from '../opcodes/number';\nimport DIFFICULTY from '../opcodes/difficulty';\nimport GASLIMIT from '../opcodes/gaslimit';\nimport POP from '../opcodes/pop';\nimport MLOAD from '../opcodes/mload';\nimport MSTORE from '../opcodes/mstore';\nimport SLOAD from '../opcodes/sload';\nimport SSTORE from '../opcodes/sstore';\nimport JUMP from '../opcodes/jump';\nimport JUMPI from '../opcodes/jumpi';\nimport PC from '../opcodes/pc';\nimport MSIZE from '../opcodes/msize';\nimport GAS from '../opcodes/gas';\nimport JUMPDEST from '../opcodes/jumpdest';\nimport PUSH from '../opcodes/push';\nimport DUP from '../opcodes/dup';\nimport SWAP from '../opcodes/swap';\nimport LOG from '../opcodes/log';\nimport CREATE from '../opcodes/create';\nimport CALL from '../opcodes/call';\nimport CALLCODE from '../opcodes/callcode';\nimport RETURN from '../opcodes/return';\nimport DELEGATECALL from '../opcodes/delegatecall';\nimport CREATE2 from '../opcodes/create2';\nimport STATICCALL from '../opcodes/staticcall';\nimport REVERT from '../opcodes/revert';\nimport INVALID from '../opcodes/invalid';\nimport SELFDESTRUCT from '../opcodes/selfdestruct';\n\nexport default {\n    STOP,\n    ADD,\n    MUL,\n    SUB,\n    DIV,\n    SDIV: DIV,\n    MOD,\n    SMOD: MOD,\n    ADDMOD,\n    MULMOD,\n    EXP,\n    SIGNEXTEND,\n    LT,\n    GT,\n    SLT: LT,\n    SGT: GT,\n    EQ,\n    ISZERO,\n    AND,\n    OR,\n    XOR,\n    NOT,\n    BYTE,\n    SHL,\n    SHR,\n    SAR,\n    SHA3,\n    ADDRESS,\n    BALANCE,\n    ORIGIN,\n    CALLER,\n    CALLVALUE,\n    CALLDATALOAD,\n    CALLDATASIZE,\n    CALLDATACOPY,\n    CODESIZE,\n    CODECOPY,\n    GASPRICE,\n    EXTCODESIZE,\n    EXTCODECOPY,\n    RETURNDATASIZE,\n    RETURNDATACOPY,\n    EXTCODEHASH,\n    BLOCKHASH,\n    COINBASE,\n    TIMESTAMP,\n    NUMBER,\n    DIFFICULTY,\n    GASLIMIT,\n    POP,\n    MLOAD,\n    MSTORE,\n    MSTORE8: MSTORE,\n    SLOAD,\n    SSTORE,\n    JUMP,\n    JUMPI,\n    PC,\n    MSIZE,\n    GAS,\n    JUMPDEST,\n    PUSH1: PUSH,\n    PUSH2: PUSH,\n    PUSH3: PUSH,\n    PUSH4: PUSH,\n    PUSH5: PUSH,\n    PUSH6: PUSH,\n    PUSH7: PUSH,\n    PUSH8: PUSH,\n    PUSH9: PUSH,\n    PUSH10: PUSH,\n    PUSH11: PUSH,\n    PUSH12: PUSH,\n    PUSH13: PUSH,\n    PUSH14: PUSH,\n    PUSH15: PUSH,\n    PUSH16: PUSH,\n    PUSH17: PUSH,\n    PUSH18: PUSH,\n    PUSH19: PUSH,\n    PUSH20: PUSH,\n    PUSH21: PUSH,\n    PUSH22: PUSH,\n    PUSH23: PUSH,\n    PUSH24: PUSH,\n    PUSH25: PUSH,\n    PUSH26: PUSH,\n    PUSH27: PUSH,\n    PUSH28: PUSH,\n    PUSH29: PUSH,\n    PUSH30: PUSH,\n    PUSH31: PUSH,\n    PUSH32: PUSH,\n    DUP1: DUP,\n    DUP2: DUP,\n    DUP3: DUP,\n    DUP4: DUP,\n    DUP5: DUP,\n    DUP6: DUP,\n    DUP7: DUP,\n    DUP8: DUP,\n    DUP9: DUP,\n    DUP10: DUP,\n    DUP11: DUP,\n    DUP12: DUP,\n    DUP13: DUP,\n    DUP14: DUP,\n    DUP15: DUP,\n    DUP16: DUP,\n    SWAP1: SWAP,\n    SWAP2: SWAP,\n    SWAP3: SWAP,\n    SWAP4: SWAP,\n    SWAP5: SWAP,\n    SWAP6: SWAP,\n    SWAP7: SWAP,\n    SWAP8: SWAP,\n    SWAP9: SWAP,\n    SWAP10: SWAP,\n    SWAP11: SWAP,\n    SWAP12: SWAP,\n    SWAP13: SWAP,\n    SWAP14: SWAP,\n    SWAP15: SWAP,\n    SWAP16: SWAP,\n    LOG0: LOG,\n    LOG1: LOG,\n    LOG2: LOG,\n    LOG3: LOG,\n    LOG4: LOG,\n    CREATE,\n    CALL,\n    CALLCODE,\n    RETURN,\n    DELEGATECALL,\n    CREATE2,\n    STATICCALL,\n    REVERT,\n    INVALID,\n    SELFDESTRUCT\n};\n","import * as BigNumber from '../../node_modules/big-integer';\n\nexport default (item: any) => {\n    if (BigNumber.isInstance(item)) {\n        return item.toString(16);\n    } else if (!item.wrapped) {\n        return item.toString();\n    } else {\n        return '(' + item.toString() + ')';\n    }\n};\n","export default (stateEvents: any, events: string[]) => {\n    const stateEventValues = Object.keys(stateEvents).map((key: string) => stateEvents[key]);\n    let output = '';\n\n    events.forEach((event: string) => {\n        const eventName = event.split('(')[0];\n        const eventArguments = event\n            .replace(eventName, '')\n            .substring(1)\n            .slice(0, -1);\n        output += 'event ';\n        if (eventArguments) {\n            output += eventName + '(';\n            output += eventArguments\n                .split(',')\n                .map((a: string, i: number) => {\n                    const stateEvent = stateEventValues.find((e: any) => e.label === event);\n                    if (stateEvent && i < stateEvent.indexedCount) {\n                        return a + ' indexed _arg' + i;\n                    } else {\n                        return a + ' _arg' + i;\n                    }\n                })\n                .join(', ');\n            output += ');';\n        } else {\n            output += event;\n        }\n        output += '\\n';\n    });\n\n    if (events.length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","import stringifyInstructions from './stringifyInstructions';\n// import * as functionHashes from '../../data/functionHashes.json';\n\nexport default (functionName: string, functionInstance: any, functionHashes: {[s: string]: string}): string => {\n    let output = '';\n    output += 'function ';\n    if (functionName in functionHashes) {\n        const fullFunction = (functionHashes as any)[functionName];\n        const fullFunctionName = fullFunction.split('(')[0];\n        const fullFunctionArguments = fullFunction\n            .replace(fullFunctionName, '')\n            .substring(1)\n            .slice(0, -1);\n        if (fullFunctionArguments) {\n            output += fullFunctionName + '(';\n            output += fullFunctionArguments\n                .split(',')\n                .map((a: string, i: number) => a + ' _arg' + i)\n                .join(', ');\n            output += ')';\n        } else {\n            output += fullFunction;\n        }\n    } else {\n        output += functionName + '()';\n    }\n    output += ' ' + functionInstance.visibility;\n    if (functionInstance.constant) {\n        output += ' view';\n    }\n    if (functionInstance.payable) {\n        output += ' payable';\n    }\n    if (functionInstance.returns.length > 0) {\n        output += ' returns (' + functionInstance.returns.join(', ') + ')';\n    }\n    output += ' {\\n';\n    output += stringifyInstructions(functionInstance.items, 4);\n    output += '}\\n\\n';\n    return output;\n};\n","export const stringifyInstructions = (instructionTree: any, indentation = 0): string => {\n    let instructionLines = '';\n    instructionTree.forEach((instruction: any) => {\n        if (instruction.name === 'JUMPI' && instruction.false) {\n            const condition = instruction.toString();\n            const falseInstructions = instruction.false.filter((i: any) => i.debugLevel > 0);\n            if (falseInstructions.length === 1 && falseInstructions[0].name === 'JUMPI') {\n                instructionLines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\n                instructionLines += stringifyInstructions(instruction.true, indentation + 4);\n                instructionLines += ' '.repeat(indentation) + '} else ';\n                const elseOrElseIf = stringifyInstructions(instruction.false, indentation);\n                if (elseOrElseIf.trim().startsWith('if')) {\n                    instructionLines += elseOrElseIf.trim() + '\\n';\n                } else {\n                    instructionLines +=\n                        '{\\n' +\n                        elseOrElseIf\n                            .split('\\n')\n                            .filter(l => l)\n                            .map(l => ' '.repeat(4) + l)\n                            .join('\\n');\n                    instructionLines += '\\n' + ' '.repeat(indentation) + '}\\n';\n                }\n            } else {\n                instructionLines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\n                instructionLines += stringifyInstructions(instruction.true, indentation + 4);\n                instructionLines += ' '.repeat(indentation) + '} else {\\n';\n                instructionLines += stringifyInstructions(instruction.false, indentation + 4);\n                instructionLines += ' '.repeat(indentation) + '}\\n';\n            }\n        } else {\n            instructionLines += ' '.repeat(indentation) + instruction.toString() + '\\n';\n        }\n    });\n    return instructionLines;\n};\n\nexport default stringifyInstructions;\n","const stringifyMapping = (mapping: any) => {\n    const mappingKey: string[] = [];\n    const mappingValue: string[] = [];\n    let deepMapping = false;\n    mapping.keys\n        .filter((mappingChild: any) => mappingChild.length > 0)\n        .forEach((mappingChild: any) => {\n            if (\n                mappingChild.length > 0 &&\n                mappingChild[0].type &&\n                !mappingKey.includes(mappingChild[0].type)\n            ) {\n                mappingKey.push(mappingChild[0].type);\n            }\n            if (mappingChild.length > 1 && !deepMapping) {\n                deepMapping = true;\n                mappingValue.push(\n                    stringifyMapping({\n                        name: mapping.name,\n                        structs: mapping.structs,\n                        keys: mapping.keys.map((items: any) => {\n                            items.shift();\n                            return items;\n                        }),\n                        values: mapping.values\n                    })\n                );\n            } else if (mappingChild.length === 1 && !deepMapping) {\n                mapping.values.forEach((mappingChild2: any) => {\n                    if (mappingChild2.type && !mappingValue.includes(mappingChild2.type)) {\n                        mappingValue.push(mappingChild2.type);\n                    }\n                });\n            }\n        });\n    if (mappingKey.length === 0) {\n        mappingKey.push('unknown');\n    }\n    if (mapping.structs.length > 0 && mappingValue.length === 0) {\n        mappingValue.push(mapping.name + 'Struct');\n    } else if (mappingValue.length === 0) {\n        mappingValue.push('unknown');\n    }\n    return 'mapping (' + mappingKey.join('|') + ' => ' + mappingValue.join('|') + ')';\n};\n\nexport default (mappings: any) => {\n    let output = '';\n\n    Object.keys(mappings).forEach((key: string, index: number) => {\n        const mapping = mappings[key];\n        if (mapping.name) {\n            output += stringifyMapping(mapping) + ' public ' + mapping.name + ';';\n        } else {\n            output += stringifyMapping(mapping) + ' mapping' + (index + 1) + ';';\n        }\n        output += '\\n';\n    });\n\n    if (Object.keys(mappings).length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","export default (mappings: any) => {\n    let output = '';\n\n    Object.keys(mappings)\n        .filter((key: any) => mappings[key].structs.length > 0)\n        .forEach((key: string, index: number) => {\n            const mapping = mappings[key];\n            output += 'struct ' + mapping.name + 'Struct {\\n';\n            mapping.structs.forEach((struct: any) => {\n                output += '    ' + struct.toString() + ';\\n';\n            });\n            output += '}\\n\\n';\n        });\n\n    return output;\n};\n","export default (variables: any) => {\n    let output = '';\n\n    Object.keys(variables).forEach((key: string, index: number) => {\n        const variable = variables[key];\n        const types = variable.types\n            .map((type: any) => {\n                if (typeof type === 'function') {\n                    return type();\n                } else {\n                    return type;\n                }\n            })\n            .filter((type: any) => type);\n        if (types.length === 0) {\n            types.push('unknown');\n        }\n        if (variable.label) {\n            output += [...new Set(types)].join('|') + ' public ' + variable.label + ';';\n        } else {\n            output += [...new Set(types)].join('|') + ' var' + (index + 1).toString() + ';';\n            index++;\n        }\n        output += '\\n';\n    });\n\n    if (Object.keys(variables).length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(341);\n"],"names":["BASE","MAX_INT","MAX_INT_ARR","smallToArray","DEFAULT_ALPHABET","supportsNativeBigInt","BigInt","Integer","v","radix","alphabet","caseSensitive","parseValue","parseBase","BigInteger","value","sign","this","isSmall","SmallInteger","NativeBigInt","isPrecise","n","Math","floor","arrayToSmall","arr","trim","length","compareAbs","i","createArray","x","Array","truncate","ceil","add","a","b","sum","l_a","l_b","r","carry","base","push","addAny","addSmall","l","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","j","multiplySmall","shiftLeft","concat","multiplyKaratsuba","y","max","slice","d","c","ac","bd","abcd","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","self","Error","negate","abs","comparison","quotientDigit","shift","result","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","check","part","unshift","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","prototype","Object","create","plus","subtractAny","minus","small","multiply","l1","l2","times","_multiplyBySmall","divmod","over","pow","toString","_0","_1","_2","isNegative","exp","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","undefined","bits","bitLength","logN","log","toJSNumber","t","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","String","shiftRight","remQuo","and","or","xor","LOBMASK_I","roughLOB","integerLogarithm","tmp","p","e","min","gcd","text","toLowerCase","absBase","alphabetValues","digits","start","parseBaseFromArray","val","toBase","apply","map","valueOf","neg","Number","out","left","digit","toBaseString","stringify","join","parseStringValue","split","decimalPlace","indexOf","test","parseNumberValue","toArray","str","toJSON","parseInt","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","top","fromArray","module","hasOwnProperty","exports","EVM","constructor","code","functionHashes","eventHashes","pc","stack","Stack","memory","opcodes","instructions","storage","jumps","mappings","layer","halted","functions","variables","events","gasUsed","conditions","Buffer","from","replace","clone","getBytecode","getOpcodes","index","currentOp","opcode","name","codes","startsWith","pushDataLength","pushData","getFunctions","Set","filter","hash","getEvents","containsOpcode","names","currentOpcode","JUMPDEST","STOP","RETURN","REVERT","INVALID","SELFDESTRUCT","includes","PUSH1","PUSH32","getJumpDestinations","getSwarmHash","match","getABI","abi","parse","keys","forEach","key","item","type","label","payable","constant","reset","decompile","instructionTree","functionName","isERC165","every","elements","pop","duplicate","position","swap","secondPosition","firstValue","secondValue","parseSingle","data","substring","BigNumber","transactionObject","blockHash","blockNumber","gas","gasPrice","input","to","setInput","getFunctionHash","substr","getFunction","functionHash","getFunctionName","rawFunction","getRawArguments","getArguments","descriptive","functionArguments","rawFunctionArguments","functionArgumentType","functionArgument","location","isContractCreation","Transaction","ADD","MUL","SUB","DIV","SDIV","MOD","SMOD","ADDMOD","MULMOD","EXP","SIGNEXTEND","LT","GT","SLT","SGT","EQ","ISZERO","AND","OR","XOR","NOT","BYTE","SHL","SHR","SAR","SHA3","ADDRESS","BALANCE","ORIGIN","CALLER","CALLVALUE","CALLDATALOAD","CALLDATASIZE","CALLDATACOPY","CODESIZE","CODECOPY","GASPRICE","EXTCODESIZE","EXTCODECOPY","RETURNDATASIZE","RETURNDATACOPY","EXTCODEHASH","BLOCKHASH","COINBASE","TIMESTAMP","NUMBER","DIFFICULTY","GASLIMIT","POP","MLOAD","MSTORE","MSTORE8","SLOAD","SSTORE","JUMP","JUMPI","PC","MSIZE","GAS","PUSH2","PUSH3","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH30","PUSH31","DUP1","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","SWAP1","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","LOG0","LOG1","LOG2","LOG3","LOG4","CREATE","CALL","CALLCODE","DELEGATECALL","CREATE2","STATICCALL","right","wrapped","state","size","address","number","memoryStart","memoryLength","outputStart","outputLength","throwOnFail","startLocation","copyLength","memoryLocation","duplicateLocation","SIG","repeat","equal","bad","valid","jumpLocation","jumpLocationData","find","o","jumpIndex","updateCallDataLoad","types","argNumber","findReturns","returns","items","deepReturns","TopLevelFunction","visibility","REQUIRE","condition","argumentTypes","returnItem","Variable","ifTrue","ifFalse","skipped","true","false","console","jumpCondition","trueClone","trueCloneTree","falseClone","falseCloneTree","functionClone","functionCloneTree","fullFunction","structlocation","structs","LOG","topics","eventName","topicsCount","eventTopic","indexedCount","anonymous","storeLocation","storeData","static","hex2a","returnDataPosition","returnDataSize","memoryPosition","parseMapping","item2","MappingLoad","count","mappingName","mappingItems","mappingLocation","mappingItem","mappingParts","values","MappingStore","variableName","swapLocation","hexx","hex","fromCharCode","isHex","h","pieces","stringLength","isNaN","stateEvents","stateEventValues","output","event","eventArguments","stateEvent","functionInstance","fullFunctionName","fullFunctionArguments","stringifyInstructions","indentation","instructionLines","instruction","falseInstructions","debugLevel","elseOrElseIf","stringifyMapping","mapping","mappingKey","mappingValue","deepMapping","mappingChild","mappingChild2","struct","variable","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","id","loaded","__webpack_modules__","call","nmd","paths","children","__webpack_exports__"],"sourceRoot":""}